["^ ","~:output",["^ ","~:js","goog.provide('garden.util');\n/**\n * Formats a string using goog.string.format.\n */\ngarden.util.format = (function garden$util$format(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___68578 = arguments.length;\nvar i__4737__auto___68579 = (0);\nwhile(true){\nif((i__4737__auto___68579 < len__4736__auto___68578)){\nargs__4742__auto__.push((arguments[i__4737__auto___68579]));\n\nvar G__68580 = (i__4737__auto___68579 + (1));\ni__4737__auto___68579 = G__68580;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn garden.util.format.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(garden.util.format.cljs$core$IFn$_invoke$arity$variadic = (function (fmt,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(goog.string.format,fmt,args);\n}));\n\n(garden.util.format.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(garden.util.format.cljs$lang$applyTo = (function (seq68521){\nvar G__68522 = cljs.core.first(seq68521);\nvar seq68521__$1 = cljs.core.next(seq68521);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__68522,seq68521__$1);\n}));\n\n\n/**\n * @interface\n */\ngarden.util.ToString = function(){};\n\nvar garden$util$ToString$to_str$dyn_68581 = (function (this$){\nvar x__4428__auto__ = (((this$ == null))?null:this$);\nvar m__4429__auto__ = (garden.util.to_str[goog.typeOf(x__4428__auto__)]);\nif((!((m__4429__auto__ == null)))){\nreturn (m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__4429__auto__.call(null,this$));\n} else {\nvar m__4426__auto__ = (garden.util.to_str[\"_\"]);\nif((!((m__4426__auto__ == null)))){\nreturn (m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__4426__auto__.call(null,this$));\n} else {\nthrow cljs.core.missing_protocol(\"ToString.to-str\",this$);\n}\n}\n});\n/**\n * Convert a value into a string.\n */\ngarden.util.to_str = (function garden$util$to_str(this$){\nif((((!((this$ == null)))) && ((!((this$.garden$util$ToString$to_str$arity$1 == null)))))){\nreturn this$.garden$util$ToString$to_str$arity$1(this$);\n} else {\nreturn garden$util$ToString$to_str$dyn_68581(this$);\n}\n});\n\n(cljs.core.Keyword.prototype.garden$util$ToString$ = cljs.core.PROTOCOL_SENTINEL);\n\n(cljs.core.Keyword.prototype.garden$util$ToString$to_str$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn cljs.core.name(this$__$1);\n}));\n\ngoog.object.set(garden.util.ToString,\"_\",true);\n\ngoog.object.set(garden.util.to_str,\"_\",(function (this$){\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$);\n}));\n\ngoog.object.set(garden.util.ToString,\"null\",true);\n\ngoog.object.set(garden.util.to_str,\"null\",(function (this$){\nreturn \"\";\n}));\n/**\n * Convert a variable number of values into strings.\n */\ngarden.util.as_str = (function garden$util$as_str(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___68586 = arguments.length;\nvar i__4737__auto___68587 = (0);\nwhile(true){\nif((i__4737__auto___68587 < len__4736__auto___68586)){\nargs__4742__auto__.push((arguments[i__4737__auto___68587]));\n\nvar G__68588 = (i__4737__auto___68587 + (1));\ni__4737__auto___68587 = G__68588;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((0) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((0)),(0),null)):null);\nreturn garden.util.as_str.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);\n});\n\n(garden.util.as_str.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.util.to_str,args));\n}));\n\n(garden.util.as_str.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(garden.util.as_str.cljs$lang$applyTo = (function (seq68529){\nvar self__4724__auto__ = this;\nreturn self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq68529));\n}));\n\n/**\n * Convert a string to an integer with optional base.\n */\ngarden.util.string__GT_int = (function garden$util$string__GT_int(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___68591 = arguments.length;\nvar i__4737__auto___68592 = (0);\nwhile(true){\nif((i__4737__auto___68592 < len__4736__auto___68591)){\nargs__4742__auto__.push((arguments[i__4737__auto___68592]));\n\nvar G__68594 = (i__4737__auto___68592 + (1));\ni__4737__auto___68592 = G__68594;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn garden.util.string__GT_int.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(garden.util.string__GT_int.cljs$core$IFn$_invoke$arity$variadic = (function (s,p__68535){\nvar vec__68536 = p__68535;\nvar radix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68536,(0),null);\nvar radix__$1 = (function (){var or__4126__auto__ = radix;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (10);\n}\n})();\nreturn parseInt(s,radix__$1);\n}));\n\n(garden.util.string__GT_int.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(garden.util.string__GT_int.cljs$lang$applyTo = (function (seq68533){\nvar G__68534 = cljs.core.first(seq68533);\nvar seq68533__$1 = cljs.core.next(seq68533);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__68534,seq68533__$1);\n}));\n\n/**\n * Convert an integer to a string with optional base.\n */\ngarden.util.int__GT_string = (function garden$util$int__GT_string(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___68595 = arguments.length;\nvar i__4737__auto___68596 = (0);\nwhile(true){\nif((i__4737__auto___68596 < len__4736__auto___68595)){\nargs__4742__auto__.push((arguments[i__4737__auto___68596]));\n\nvar G__68597 = (i__4737__auto___68596 + (1));\ni__4737__auto___68596 = G__68597;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn garden.util.int__GT_string.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(garden.util.int__GT_string.cljs$core$IFn$_invoke$arity$variadic = (function (i,p__68545){\nvar vec__68546 = p__68545;\nvar radix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68546,(0),null);\nvar radix__$1 = (function (){var or__4126__auto__ = radix;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (10);\n}\n})();\nreturn i.toString(radix__$1);\n}));\n\n(garden.util.int__GT_string.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(garden.util.int__GT_string.cljs$lang$applyTo = (function (seq68543){\nvar G__68544 = cljs.core.first(seq68543);\nvar seq68543__$1 = cljs.core.next(seq68543);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__68544,seq68543__$1);\n}));\n\n/**\n * Return a space separated list of values.\n */\ngarden.util.space_join = (function garden$util$space_join(xs){\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$2(\" \",cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.util.to_str,xs));\n});\n/**\n * Return a comma separated list of values. Subsequences are joined with\n * spaces.\n */\ngarden.util.comma_join = (function garden$util$comma_join(xs){\nvar ys = (function (){var iter__4529__auto__ = (function garden$util$comma_join_$_iter__68549(s__68550){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__68550__$1 = s__68550;\nwhile(true){\nvar temp__5720__auto__ = cljs.core.seq(s__68550__$1);\nif(temp__5720__auto__){\nvar s__68550__$2 = temp__5720__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__68550__$2)){\nvar c__4527__auto__ = cljs.core.chunk_first(s__68550__$2);\nvar size__4528__auto__ = cljs.core.count(c__4527__auto__);\nvar b__68552 = cljs.core.chunk_buffer(size__4528__auto__);\nif((function (){var i__68551 = (0);\nwhile(true){\nif((i__68551 < size__4528__auto__)){\nvar x = cljs.core._nth(c__4527__auto__,i__68551);\ncljs.core.chunk_append(b__68552,((cljs.core.sequential_QMARK_(x))?garden.util.space_join(x):garden.util.to_str(x)));\n\nvar G__68609 = (i__68551 + (1));\ni__68551 = G__68609;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__68552),garden$util$comma_join_$_iter__68549(cljs.core.chunk_rest(s__68550__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__68552),null);\n}\n} else {\nvar x = cljs.core.first(s__68550__$2);\nreturn cljs.core.cons(((cljs.core.sequential_QMARK_(x))?garden.util.space_join(x):garden.util.to_str(x)),garden$util$comma_join_$_iter__68549(cljs.core.rest(s__68550__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__4529__auto__(xs);\n})();\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$2(\", \",ys);\n});\n/**\n * Wrap a string with double quotes.\n */\ngarden.util.wrap_quotes = (function garden$util$wrap_quotes(s){\nreturn [\"\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(s),\"\\\"\"].join('');\n});\n/**\n * True if `(map? x)` and `x` does not satisfy `clojure.lang.IRecord`.\n */\ngarden.util.hash_map_QMARK_ = (function garden$util$hash_map_QMARK_(x){\nreturn ((cljs.core.map_QMARK_(x)) && ((!(cljs.core.record_QMARK_(x)))));\n});\n/**\n * Alias to `vector?`.\n */\ngarden.util.rule_QMARK_ = cljs.core.vector_QMARK_;\n/**\n * Alias to `hash-map?`.\n */\ngarden.util.declaration_QMARK_ = garden.util.hash_map_QMARK_;\ngarden.util.at_rule_QMARK_ = (function garden$util$at_rule_QMARK_(x){\nreturn (x instanceof garden.types.CSSAtRule);\n});\n/**\n * True if `x` is a CSS `@media` rule.\n */\ngarden.util.at_media_QMARK_ = (function garden$util$at_media_QMARK_(x){\nreturn ((garden.util.at_rule_QMARK_(x)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"identifier\",\"identifier\",-805503498).cljs$core$IFn$_invoke$arity$1(x),new cljs.core.Keyword(null,\"media\",\"media\",-1066138403))));\n});\n/**\n * True if `x` is a CSS `@supports` rule.\n */\ngarden.util.at_supports_QMARK_ = (function garden$util$at_supports_QMARK_(x){\nreturn ((garden.util.at_rule_QMARK_(x)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"identifier\",\"identifier\",-805503498).cljs$core$IFn$_invoke$arity$1(x),new cljs.core.Keyword(null,\"feature\",\"feature\",27242652))));\n});\n/**\n * True if `x` is a CSS `@keyframes` rule.\n */\ngarden.util.at_keyframes_QMARK_ = (function garden$util$at_keyframes_QMARK_(x){\nreturn ((garden.util.at_rule_QMARK_(x)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"identifier\",\"identifier\",-805503498).cljs$core$IFn$_invoke$arity$1(x),new cljs.core.Keyword(null,\"keyframes\",\"keyframes\",-1437976012))));\n});\n/**\n * True if `x` is a CSS `@import` rule.\n */\ngarden.util.at_import_QMARK_ = (function garden$util$at_import_QMARK_(x){\nreturn ((garden.util.at_rule_QMARK_(x)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"identifier\",\"identifier\",-805503498).cljs$core$IFn$_invoke$arity$1(x),new cljs.core.Keyword(null,\"import\",\"import\",-1399500709))));\n});\n/**\n * Attach a CSS style prefix to s.\n */\ngarden.util.prefix = (function garden$util$prefix(p,s){\nvar p__$1 = garden.util.to_str(p);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"-\",cljs.core.last(p__$1))){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(p__$1),cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join('');\n} else {\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(p__$1),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join('');\n}\n});\n/**\n * Attach a CSS vendor prefix to s.\n */\ngarden.util.vendor_prefix = (function garden$util$vendor_prefix(p,s){\nvar p__$1 = garden.util.to_str(p);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"-\",cljs.core.first(p__$1))){\nreturn garden.util.prefix(p__$1,s);\n} else {\nreturn garden.util.prefix([\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(p__$1)].join(''),s);\n}\n});\n/**\n * True if n is a natural number.\n */\ngarden.util.natural_QMARK_ = (function garden$util$natural_QMARK_(n){\nreturn ((cljs.core.integer_QMARK_(n)) && ((n > (0))));\n});\n/**\n * True if n is a number between a and b.\n */\ngarden.util.between_QMARK_ = (function garden$util$between_QMARK_(n,a,b){\nvar bottom = (function (){var x__4217__auto__ = a;\nvar y__4218__auto__ = b;\nreturn ((x__4217__auto__ < y__4218__auto__) ? x__4217__auto__ : y__4218__auto__);\n})();\nvar top = (function (){var x__4214__auto__ = a;\nvar y__4215__auto__ = b;\nreturn ((x__4214__auto__ > y__4215__auto__) ? x__4214__auto__ : y__4215__auto__);\n})();\nreturn (((n >= bottom)) && ((n <= top)));\n});\n/**\n * Return a number such that n is no less than a and no more than b.\n */\ngarden.util.clip = (function garden$util$clip(a,b,n){\nvar vec__68568 = (((a <= b))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [b,a], null));\nvar a__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68568,(0),null);\nvar b__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68568,(1),null);\nvar x__4214__auto__ = a__$1;\nvar y__4215__auto__ = (function (){var x__4217__auto__ = b__$1;\nvar y__4218__auto__ = n;\nreturn ((x__4217__auto__ < y__4218__auto__) ? x__4217__auto__ : y__4218__auto__);\n})();\nreturn ((x__4214__auto__ > y__4215__auto__) ? x__4214__auto__ : y__4215__auto__);\n});\n/**\n * Return the average of two or more numbers.\n */\ngarden.util.average = (function garden$util$average(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___68619 = arguments.length;\nvar i__4737__auto___68620 = (0);\nwhile(true){\nif((i__4737__auto___68620 < len__4736__auto___68619)){\nargs__4742__auto__.push((arguments[i__4737__auto___68620]));\n\nvar G__68621 = (i__4737__auto___68620 + (1));\ni__4737__auto___68620 = G__68621;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((2) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((2)),(0),null)):null);\nreturn garden.util.average.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4743__auto__);\n});\n\n(garden.util.average.cljs$core$IFn$_invoke$arity$variadic = (function (n,m,more){\nreturn (cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._PLUS_,n,m,more) / (2.0 + cljs.core.count(more)));\n}));\n\n(garden.util.average.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(garden.util.average.cljs$lang$applyTo = (function (seq68571){\nvar G__68572 = cljs.core.first(seq68571);\nvar seq68571__$1 = cljs.core.next(seq68571);\nvar G__68573 = cljs.core.first(seq68571__$1);\nvar seq68571__$2 = cljs.core.next(seq68571__$1);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__68572,G__68573,seq68571__$2);\n}));\n\n/**\n * All the ways to take one item from each sequence.\n */\ngarden.util.cartesian_product = (function garden$util$cartesian_product(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___68622 = arguments.length;\nvar i__4737__auto___68623 = (0);\nwhile(true){\nif((i__4737__auto___68623 < len__4736__auto___68622)){\nargs__4742__auto__.push((arguments[i__4737__auto___68623]));\n\nvar G__68624 = (i__4737__auto___68623 + (1));\ni__4737__auto___68623 = G__68624;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((0) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((0)),(0),null)):null);\nreturn garden.util.cartesian_product.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);\n});\n\n(garden.util.cartesian_product.cljs$core$IFn$_invoke$arity$variadic = (function (seqs){\nvar v_original_seqs = cljs.core.vec(seqs);\nvar step = (function garden$util$step(v_seqs){\nvar increment = (function (v_seqs__$1){\nvar i = (cljs.core.count(v_seqs__$1) - (1));\nvar v_seqs__$2 = v_seqs__$1;\nwhile(true){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(i,(-1))){\nreturn null;\n} else {\nvar temp__5718__auto__ = cljs.core.next((v_seqs__$2.cljs$core$IFn$_invoke$arity$1 ? v_seqs__$2.cljs$core$IFn$_invoke$arity$1(i) : v_seqs__$2.call(null,i)));\nif(temp__5718__auto__){\nvar rst = temp__5718__auto__;\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v_seqs__$2,i,rst);\n} else {\nvar G__68625 = (i - (1));\nvar G__68626 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v_seqs__$2,i,(v_original_seqs.cljs$core$IFn$_invoke$arity$1 ? v_original_seqs.cljs$core$IFn$_invoke$arity$1(i) : v_original_seqs.call(null,i)));\ni = G__68625;\nv_seqs__$2 = G__68626;\ncontinue;\n}\n}\nbreak;\n}\n});\nif(cljs.core.truth_(v_seqs)){\nreturn cljs.core.cons(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,v_seqs),(new cljs.core.LazySeq(null,(function (){\nreturn garden$util$step(increment(v_seqs));\n}),null,null)));\n} else {\nreturn null;\n}\n});\nif(cljs.core.every_QMARK_(cljs.core.seq,seqs)){\nreturn (new cljs.core.LazySeq(null,(function (){\nreturn step(v_original_seqs);\n}),null,null));\n} else {\nreturn null;\n}\n}));\n\n(garden.util.cartesian_product.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(garden.util.cartesian_product.cljs$lang$applyTo = (function (seq68577){\nvar self__4724__auto__ = this;\nreturn self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq68577));\n}));\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Utility functions used by Garden.","~:file","garden/util.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",16],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$garden.util","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^N","~$str","^N","~$garden.types","^P","~$t","^P","~$goog.string","^Q","~$goog.string.format","^R","~$cljs.core","^S","~$goog","^T"],"~:seen",["^G",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^S","^S"],"~:form",["~#list",["~$ns","^I","Utility functions used by Garden.",["^Z",["^V",["^N","~:as","^O"],["^P","^10","~$t"],["^Q"],["^R"]]]]],"~:flags",["^ ","^V",["^G",[]]],"~:js-deps",["^ "],"~:deps",["^T","^S","^N","^P","^Q","^R"]],"^K","^I","~:resource-id",["~:shadow.build.classpath/resource","garden/util.cljc"],"~:compiled-at",1610009132398,"~:resource-name","garden/util.cljc","~:warnings",[],"~:source","(ns garden.util\n  \"Utility functions used by Garden.\"\n  (:require\n   [clojure.string :as str]\n   [garden.types :as t]\n   #?@(:cljs\n       [[goog.string]\n        [goog.string.format]]))\n  #?(:clj\n     (:refer-clojure :exclude [format]))\n  #?(:clj\n     (:import garden.types.CSSAtRule)))\n\n;; ---------------------------------------------------------------------\n;; String utilities\n\n#?(:cljs\n   (defn format\n     \"Formats a string using goog.string.format.\"\n     [fmt & args]\n     (apply goog.string/format fmt args)))\n\n;; To avoid the pain of #?cljs :refer.\n#?(:clj\n   (def format #'clojure.core/format))\n\n(defprotocol ToString\n  (^String to-str [this] \"Convert a value into a string.\"))\n\n(extend-protocol ToString\n  #?(:clj clojure.lang.Keyword)\n  #?(:cljs Keyword)\n  (to-str [this] (name this))\n\n  #?(:clj Object)\n  #?(:cljs default)\n  (to-str [this] (str this))\n\n  nil (to-str [this] \"\"))\n\n(defn ^String as-str\n  \"Convert a variable number of values into strings.\"\n  [& args]\n  (apply str (map to-str args)))\n\n(defn string->int\n  \"Convert a string to an integer with optional base.\"\n  [s & [radix]]\n  (let [radix (or radix 10)]\n    #?(:clj\n       (Integer/parseInt ^String s ^Long radix))\n    #?(:cljs\n       (js/parseInt s radix))))\n\n(defn int->string\n  \"Convert an integer to a string with optional base.\"\n  [i & [radix]]\n  (let [radix (or radix 10)]\n    #?(:clj\n       (Integer/toString ^Long i ^Long radix))\n    #?(:cljs\n       (.toString i radix))))\n\n(defn space-join\n  \"Return a space separated list of values.\"\n  [xs]\n  (str/join \" \" (map to-str xs)))\n\n(defn comma-join\n  \"Return a comma separated list of values. Subsequences are joined with\n   spaces.\"\n  [xs]\n  (let [ys (for [x xs]\n             (if (sequential? x)\n               (space-join x)\n               (to-str x)))]\n    (str/join \", \" ys)))\n\n(defn wrap-quotes\n  \"Wrap a string with double quotes.\"\n  [s]\n  (str \\\" s \\\"))\n\n;; ---------------------------------------------------------------------\n;; Predicates\n\n(defn hash-map?\n  \"True if `(map? x)` and `x` does not satisfy `clojure.lang.IRecord`.\"\n  [x]\n  (and (map? x) (not (record? x))))\n\n(def\n  ^{:doc \"Alias to `vector?`.\"}\n  rule? vector?)\n\n(def\n  ^{:doc \"Alias to `hash-map?`.\"}\n  declaration? hash-map?)\n\n(defn at-rule?\n  [x]\n  (instance? #?(:clj CSSAtRule) #?(:cljs t/CSSAtRule) x))\n\n(defn at-media?\n  \"True if `x` is a CSS `@media` rule.\"\n  [x]\n  (and (at-rule? x) (= (:identifier x) :media)))\n\n(defn at-supports?\n  \"True if `x` is a CSS `@supports` rule.\"\n  [x]\n  (and (at-rule? x) (= (:identifier x) :feature)))\n\n(defn at-keyframes?\n  \"True if `x` is a CSS `@keyframes` rule.\"\n  [x]\n  (and (at-rule? x) (= (:identifier x) :keyframes)))\n\n(defn at-import?\n  \"True if `x` is a CSS `@import` rule.\"\n  [x]\n  (and (at-rule? x) (= (:identifier x) :import)))\n\n(defn prefix\n  \"Attach a CSS style prefix to s.\"\n  [p s]\n  (let [p (to-str p)]\n    (if (= \\- (last p))\n      (str p s)\n      (str p \\- s))))\n\n(defn vendor-prefix\n  \"Attach a CSS vendor prefix to s.\"\n  [p s]\n  (let [p (to-str p)]\n    (if (= \\- (first p))\n      (prefix p s) \n      (prefix (str \\- p) s))))\n\n;; ---------------------------------------------------------------------\n;; Math utilities\n\n(defn natural?\n  \"True if n is a natural number.\"\n  [n]\n  (and (integer? n) (pos? n)))\n\n(defn between?\n  \"True if n is a number between a and b.\"\n  [n a b]\n  (let [bottom (min a b)\n        top (max a b)]\n    (and (>= n bottom) (<= n top))))\n\n(defn clip\n  \"Return a number such that n is no less than a and no more than b.\"\n  [a b n]\n  (let [[a b] (if (<= a b) [a b] [b a])] \n    (max a (min b n))))\n\n(defn average\n  \"Return the average of two or more numbers.\"\n  [n m & more]\n  (/ (apply + n m more) (+ 2.0 (count more))))\n\n;; Taken from clojure.math.combinatorics.\n(defn cartesian-product\n  \"All the ways to take one item from each sequence.\"\n  [& seqs]\n  (let [v-original-seqs (vec seqs)\n\tstep\n\t(fn step [v-seqs]\n\t  (let [increment\n\t\t(fn [v-seqs]\n\t\t  (loop [i (dec (count v-seqs)), v-seqs v-seqs]\n\t\t    (if (= i -1) nil\n\t\t\t(if-let [rst (next (v-seqs i))]\n\t\t\t  (assoc v-seqs i rst)\n\t\t\t  (recur (dec i) (assoc v-seqs i (v-original-seqs i)))))))]\n\t    (when v-seqs\n              (cons (map first v-seqs)\n                    (lazy-seq (step (increment v-seqs)))))))]\n    (when (every? seq seqs)\n      (lazy-seq (step v-original-seqs)))))\n","~:reader-features",["^G",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","garden.util/format","seq68521","G__68522","cljs.core/first","cljs.core/next","self__4723__auto__","fmt","args","cljs.core.apply","goog.string/format","garden$util$ToString$to_str$dyn","x__4428__auto__","m__4429__auto__","garden.util/to-str","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","garden.util/ToString","this","cljs.core/PROTOCOL_SENTINEL","goog.object/set","cljs.core/Keyword","cljs.core/name","garden.util/as-str","seq68529","self__4724__auto__","cljs.core/seq","cljs.core/str","cljs.core.map","garden.util/string->int","p__68535","vec__68536","cljs.core.nth","seq68533","G__68534","s","radix","or__4126__auto__","js/parseInt","garden.util/int->string","p__68545","vec__68546","seq68543","G__68544","i","garden.util/space-join","xs","clojure.string.join","garden.util/comma-join","ys","iter__4529__auto__","s__68550","cljs.core/LazySeq","temp__5720__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__68552","cljs.core/chunk-buffer","i__68551","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__68549","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","x","cljs.core/sequential?","garden.util/wrap-quotes","garden.util/hash-map?","cljs.core/map?","cljs.core/record?","garden.util/rule?","cljs.core/vector?","garden.util/declaration?","garden.util/at-rule?","garden.types/CSSAtRule","garden.util/at-media?","cljs.core._EQ_","garden.util/at-supports?","garden.util/at-keyframes?","garden.util/at-import?","garden.util/prefix","p","cljs.core/last","garden.util/vendor-prefix","garden.util/natural?","n","cljs.core/integer?","garden.util/between?","a","b","bottom","x__4217__auto__","y__4218__auto__","top","x__4214__auto__","y__4215__auto__","garden.util/clip","vec__68568","garden.util/average","seq68571","G__68572","G__68573","m","more","cljs.core/+","garden.util/cartesian-product","seq68577","seqs","v-original-seqs","cljs.core/vec","step","v-seqs","increment","temp__5718__auto__","rst","cljs.core.assoc","cljs.core/every?","cljs.core/chunk-first"]],"~:used-vars",["^G",["~$clojure.string/join","~$cljs.core/PROTOCOL_SENTINEL","~$garden.util/int->string","~$cljs.core/str","~$garden.util/rule?","~$cljs.core/vector?","~$cljs.core/=","~$garden.util/at-import?","~$garden.util/at-rule?","~$cljs.core/count","~$cljs.core/seq","~$cljs.core/apply","~$cljs.core/Keyword","~$goog.string/format","~$cljs.core/last","~$garden.util/space-join","~$cljs.core/LazySeq","~$garden.util/ToString","~$garden.util/comma-join","~$cljs.core/map?","~$garden.util/at-media?","~$garden.util/hash-map?","~$garden.util/to-str","~$cljs.core/map","~$js/parseInt","~$garden.util/clip","~$garden.util/between?","~$goog.object/set","~$cljs.core/integer?","~$garden.util/prefix","~$garden.types/CSSAtRule","~$cljs.core/record?","~$garden.util/cartesian-product","~$garden.util/format","~$garden.util/at-supports?","~$garden.util/as-str","~$garden.util/natural?","~$cljs.core/not","~$garden.util/at-keyframes?","~$garden.util/average","~$garden.util/string->int","~$cljs.core/first","~$garden.util/vendor-prefix","~$cljs.core/name","~$cljs.core/+","~$cljs.core/every?","~$garden.util/declaration?","~$garden.util/wrap-quotes"]]],"~:cache-keys",["~#cmap",[["^15","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^G",[]],"~:deps-syms",["^T","~$goog.dom.HtmlElement"]]],["^15","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","~$goog.array","~$goog.asserts"]]],["^15","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T"]]],["^15","goog/string/stringformat.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^Q"]]],["^15","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^2L","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^15","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^2M","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2P"]]],["^15","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^2M"]]],["^15","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T"]]],["^15","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T"]]],["^15","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T"]]],["^15","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T"]]],["^15","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^2M"]]],"~:SHADOW-TIMESTAMP",[1608791626000,1608791626000,1608497483000],["^15","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^2M","~$goog.reflect"]]],["^15","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^2M","~$goog.html.trustedtypes","^2S","^2T","^2U","^2V"]]],["^15","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T"]]],["^15","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T"]]],["^15","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^2L","^2M","~$goog.html.SafeUrl","^2U","^2V","^2P"]]],["^15","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^2M","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^2Z","^2R","~$goog.html.uncheckedconversions","^2U","^2P"]]],["^15","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^15","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^2L","^2M","~$goog.dom.TagName","~$goog.dom.tags","^32","^33","~$goog.html.SafeStyleSheet","^2Z","^2R","^2Y","^2S","^2T","~$goog.labs.userAgent.browser","^2O","^2U","^2V","^2P"]]],["^15","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^2O"]]],["^15","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^15","garden/types.cljc"],["c54b1d4a503890dd6f9bccea320b8ec76e68bee8","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^S"]]],["^15","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^2L","^2M","^Q","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^15","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T"]]],["^15","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T"]]],["^15","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",[]]],["^15","garden/util.cljc"],["c54b1d4a503890dd6f9bccea320b8ec76e68bee8","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^S","^N","^P","^Q","^R"]]],["^15","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^2L","^2O"]]],["^15","clojure/string.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^S","^Q","~$goog.string.StringBuffer"]]],["^15","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","~$goog.dom.safe","^34","^2U","^2P"]]],["^15","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T"]]],["^15","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^2P"]]],["^15","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T"]]],["^15","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^2L","^2M","^30","~$goog.math"]]],["^15","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^2M","^31","^32","^33","^39","^2Z","^2R","^2U","^2P"]]],["^15","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T"]]],["^15","cljs/core.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","~$goog.math.Long","~$goog.math.Integer","^Q","^2O","^2L","~$goog.Uri","^3B"]]],["^15","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^2M","^2Y","^2U","^2V"]]],["^15","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^2L","^2M","^33","^2O","^2U","^2V","^2P"]]],["^15","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^2X"]]],["^15","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^2L","^2M","^Q"]]],["^15","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^G",[]],"^2J",["^T","^2M","^2V"]]]]],"~:clj-info",["^ ","jar:file:/Users/bodyblock/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map/base64.clj",1608497483000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/string.clj",1608791625000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/env.cljc",1608497483000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/instant.clj",1608791625000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/pprint.clj",1608791625000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1608497496000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/core.cljc",1608497483000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/js_deps.cljc",1608497483000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/set.clj",1608791625000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1608497496000,"jar:file:/Users/bodyblock/.m2/repository/binaryage/devtools/1.0.0/devtools-1.0.0.jar!/devtools/defaults.clj",1608791627000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/java/io.clj",1608791625000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1608497496000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj",1608791625000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/util.cljc",1608497483000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/analyzer.cljc",1608497483000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map.clj",1608497483000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map/base64_vlq.clj",1608497483000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1608497496000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/edn.clj",1608791625000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1608497496000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/tagged_literals.cljc",1608497483000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/compiler.cljc",1608497483000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1608497473000,"jar:file:/Users/bodyblock/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/externs.clj",1608497483000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Utility functions used by Garden.","^7","garden/util.cljc","^8",1,"^9",5,"^:",1,"^;",16],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"~:shadow/protocol-prefixes",["^G",["garden$util$ToString$"]],"^E",null,"^F",["^G",[]],"^H","^I","^L",null,"^M",["^ ","^N","^N","^O","^N","^P","^P","~$t","^P","^Q","^Q","^R","^R","^S","^S","^T","^T"],"^U",["^G",["^V"]],"~:shadow/js-access-global",["^G",["parseInt"]],"^W",null,"~:defs",["^ ","~$space-join",["^ ","~:protocol-inline",null,"^5",["^ ","^7","garden/util.cljc","^8",64,"^9",7,"^:",64,"^;",17,"~:arglists",["^Z",["~$quote",["^Z",[["~$xs"]]]]],"^6","Return a space separated list of values."],"^H","^1P","^7","garden/util.cljc","^;",17,"~:method-params",["^Z",[["^4>"]]],"~:protocol-impl",null,"~:arglists-meta",["^Z",[null,null]],"^9",1,"~:variadic?",false,"^8",64,"~:ret-tag","~$string","^:",64,"~:max-fixed-arity",1,"~:fn-var",true,"^4<",["^Z",["^4=",["^Z",[["^4>"]]]]],"^6","Return a space separated list of values."],"~$at-import?",["^ ","^4;",null,"^5",["^ ","^7","garden/util.cljc","^8",119,"^9",7,"^:",119,"^;",17,"^4<",["^Z",["^4=",["^Z",[["~$x"]]]]],"^6","True if `x` is a CSS `@import` rule."],"^H","^1H","^7","garden/util.cljc","^;",17,"^4?",["^Z",[["~$x"]]],"^4@",null,"^4A",["^Z",[null,null]],"^9",1,"^4B",false,"^8",119,"^4C","~$boolean","^:",119,"^4E",1,"^4F",true,"^4<",["^Z",["^4=",["^Z",[["~$x"]]]]],"^6","True if `x` is a CSS `@import` rule."],"~$int->string",["^ ","^4;",null,"^5",["^ ","^7","garden/util.cljc","^8",55,"^9",7,"^:",55,"^;",18,"^4<",["^Z",["^4=",["^Z",[["~$i","~$&",["~$radix"]]]]]],"^6","Convert an integer to a string with optional base.","~:top-fn",["^ ","^4B",true,"~:fixed-arity",1,"^4E",1,"^4?",[["^Z",["~$i",["^4J"]]]],"^4<",["^Z",[["~$i","~$&",["^4J"]]]],"^4A",["^Z",[null]]]],"^H","^1C","^7","garden/util.cljc","^;",18,"^4K",["^ ","^4B",true,"^4L",1,"^4E",1,"^4?",[["^Z",["~$i",["^4J"]]]],"^4<",["^Z",[["~$i","~$&",["^4J"]]]],"^4A",["^Z",[null]]],"^4?",[["^Z",["~$i",["^4J"]]]],"^4@",null,"^4L",1,"^4A",["^Z",[null]],"^9",1,"^4B",true,"~:methods",[["^ ","^4L",1,"^4B",true,"~:tag","~$any"]],"^8",55,"^4C","^4O","^:",55,"^4E",1,"^4F",true,"^4<",["^Z",[["~$i","~$&",["^4J"]]]],"^6","Convert an integer to a string with optional base."],"~$rule?",["^ ","^H","^1E","^7","garden/util.cljc","^8",92,"^9",1,"^:",94,"^;",8,"^6","Alias to `vector?`.","^5",["^ ","^7","garden/util.cljc","^8",94,"^9",3,"^:",94,"^;",8,"^6","Alias to `vector?`."]],"~$to-str",["^ ","^4;",null,"^5",["^ ","~:protocol","^1R","^7","garden/util.cljc","^;",18,"^9",12,"^8",28,"^:",28,"^4N","~$String","^4<",["^Z",["^4=",["^Z",[["~$this"]]]]],"^6","Convert a value into a string."],"^4R","^1R","^H","^1W","^7","garden/util.cljc","^;",18,"^4?",["^Z",[["^4T"]]],"^4@",null,"^4A",["^Z",[null,null]],"^9",1,"^4B",false,"^8",27,"^4C","^4S","^:",28,"^4E",1,"^4N","^4S","^4F",true,"^4<",["^Z",["^4=",["^Z",[["^4T"]]]]],"^6","Convert a value into a string."],"~$cartesian-product",["^ ","^4;",null,"^5",["^ ","^7","garden/util.cljc","^8",167,"^9",7,"^:",167,"^;",24,"^4<",["^Z",["^4=",["^Z",[["~$&","~$seqs"]]]]],"^6","All the ways to take one item from each sequence.","^4K",["^ ","^4B",true,"^4L",0,"^4E",0,"^4?",[["^Z",["^4V"]]],"^4<",["^Z",[["~$&","^4V"]]],"^4A",["^Z",[null]]]],"^H","^25","^7","garden/util.cljc","^;",24,"^4K",["^ ","^4B",true,"^4L",0,"^4E",0,"^4?",[["^Z",["^4V"]]],"^4<",["^Z",[["~$&","^4V"]]],"^4A",["^Z",[null]]],"^4?",[["^Z",["^4V"]]],"^4@",null,"^4L",0,"^4A",["^Z",[null]],"^9",1,"^4B",true,"^4M",[["^ ","^4L",0,"^4B",true,"^4N",["^G",["^1Q","~$clj-nil"]]]],"^8",167,"^4C","^4O","^:",167,"^4E",0,"^4F",true,"^4<",["^Z",[["~$&","^4V"]]],"^6","All the ways to take one item from each sequence."],"~$format",["^ ","^4;",null,"^5",["^ ","^7","garden/util.cljc","^8",18,"^9",10,"^:",18,"^;",16,"^4<",["^Z",["^4=",["^Z",[["~$fmt","~$&","~$args"]]]]],"^6","Formats a string using goog.string.format.","^4K",["^ ","^4B",true,"^4L",1,"^4E",1,"^4?",[["^Z",["^4Y","^4Z"]]],"^4<",["^Z",[["^4Y","~$&","^4Z"]]],"^4A",["^Z",[null]]]],"^H","^26","^7","garden/util.cljc","^;",16,"^4K",["^ ","^4B",true,"^4L",1,"^4E",1,"^4?",[["^Z",["^4Y","^4Z"]]],"^4<",["^Z",[["^4Y","~$&","^4Z"]]],"^4A",["^Z",[null]]],"^4?",[["^Z",["^4Y","^4Z"]]],"^4@",null,"^4L",1,"^4A",["^Z",[null]],"^9",4,"^4B",true,"^4M",[["^ ","^4L",1,"^4B",true,"^4N","^4O"]],"^8",18,"^4C","^4O","^:",18,"^4E",1,"^4F",true,"^4<",["^Z",[["^4Y","~$&","^4Z"]]],"^6","Formats a string using goog.string.format."],"~$clip",["^ ","^4;",null,"^5",["^ ","^7","garden/util.cljc","^8",155,"^9",7,"^:",155,"^;",11,"^4<",["^Z",["^4=",["^Z",[["~$a","~$b","~$n"]]]]],"^6","Return a number such that n is no less than a and no more than b."],"^H","^1Z","^7","garden/util.cljc","^;",11,"^4?",["^Z",[["~$a","~$b","~$n"]]],"^4@",null,"^4A",["^Z",[null,null]],"^9",1,"^4B",false,"^8",155,"^4C","^4O","^:",155,"^4E",3,"^4F",true,"^4<",["^Z",["^4=",["^Z",[["~$a","~$b","~$n"]]]]],"^6","Return a number such that n is no less than a and no more than b."],"~$between?",["^ ","^4;",null,"^5",["^ ","^7","garden/util.cljc","^8",148,"^9",7,"^:",148,"^;",15,"^4<",["^Z",["^4=",["^Z",[["~$n","~$a","~$b"]]]]],"^6","True if n is a number between a and b."],"^H","^1[","^7","garden/util.cljc","^;",15,"^4?",["^Z",[["~$n","~$a","~$b"]]],"^4@",null,"^4A",["^Z",[null,null]],"^9",1,"^4B",false,"^8",148,"^4C","^4H","^:",148,"^4E",3,"^4F",true,"^4<",["^Z",["^4=",["^Z",[["~$n","~$a","~$b"]]]]],"^6","True if n is a number between a and b."],"~$at-media?",["^ ","^4;",null,"^5",["^ ","^7","garden/util.cljc","^8",104,"^9",7,"^:",104,"^;",16,"^4<",["^Z",["^4=",["^Z",[["~$x"]]]]],"^6","True if `x` is a CSS `@media` rule."],"^H","^1U","^7","garden/util.cljc","^;",16,"^4?",["^Z",[["~$x"]]],"^4@",null,"^4A",["^Z",[null,null]],"^9",1,"^4B",false,"^8",104,"^4C","^4H","^:",104,"^4E",1,"^4F",true,"^4<",["^Z",["^4=",["^Z",[["~$x"]]]]],"^6","True if `x` is a CSS `@media` rule."],"~$at-supports?",["^ ","^4;",null,"^5",["^ ","^7","garden/util.cljc","^8",109,"^9",7,"^:",109,"^;",19,"^4<",["^Z",["^4=",["^Z",[["~$x"]]]]],"^6","True if `x` is a CSS `@supports` rule."],"^H","^27","^7","garden/util.cljc","^;",19,"^4?",["^Z",[["~$x"]]],"^4@",null,"^4A",["^Z",[null,null]],"^9",1,"^4B",false,"^8",109,"^4C","^4H","^:",109,"^4E",1,"^4F",true,"^4<",["^Z",["^4=",["^Z",[["~$x"]]]]],"^6","True if `x` is a CSS `@supports` rule."],"~$string->int",["^ ","^4;",null,"^5",["^ ","^7","garden/util.cljc","^8",46,"^9",7,"^:",46,"^;",18,"^4<",["^Z",["^4=",["^Z",[["~$s","~$&",["^4J"]]]]]],"^6","Convert a string to an integer with optional base.","^4K",["^ ","^4B",true,"^4L",1,"^4E",1,"^4?",[["^Z",["~$s",["^4J"]]]],"^4<",["^Z",[["~$s","~$&",["^4J"]]]],"^4A",["^Z",[null]]]],"^H","^2=","^7","garden/util.cljc","^;",18,"^4K",["^ ","^4B",true,"^4L",1,"^4E",1,"^4?",[["^Z",["~$s",["^4J"]]]],"^4<",["^Z",[["~$s","~$&",["^4J"]]]],"^4A",["^Z",[null]]],"^4?",[["^Z",["~$s",["^4J"]]]],"^4@",null,"^4L",1,"^4A",["^Z",[null]],"^9",1,"^4B",true,"^4M",[["^ ","^4L",1,"^4B",true,"^4N","~$js"]],"^8",46,"^4C","^4O","^:",46,"^4E",1,"^4F",true,"^4<",["^Z",[["~$s","~$&",["^4J"]]]],"^6","Convert a string to an integer with optional base."],"~$as-str",["^ ","^4;",null,"^5",["^ ","^7","garden/util.cljc","^;",21,"^4K",["^ ","^4B",true,"^4L",0,"^4E",0,"^4?",[["^Z",["^4Z"]]],"^4<",["^Z",[["~$&","^4Z"]]],"^4A",["^Z",[null]]],"^9",15,"^8",41,"^:",41,"^4N","^4S","^4<",["^Z",["^4=",["^Z",[["~$&","^4Z"]]]]],"^6","Convert a variable number of values into strings."],"^H","^28","^7","garden/util.cljc","^;",21,"^4K",["^ ","^4B",true,"^4L",0,"^4E",0,"^4?",[["^Z",["^4Z"]]],"^4<",["^Z",[["~$&","^4Z"]]],"^4A",["^Z",[null]]],"^4?",[["^Z",["^4Z"]]],"^4@",null,"^4L",0,"^4A",["^Z",[null]],"^9",1,"^4B",true,"^4M",[["^ ","^4L",0,"^4B",true,"^4N","^4O"]],"^8",41,"^4C","^4S","^:",41,"^4E",0,"^4N","^4S","^4F",true,"^4<",["^Z",[["~$&","^4Z"]]],"^6","Convert a variable number of values into strings."],"~$comma-join",["^ ","^4;",null,"^5",["^ ","^7","garden/util.cljc","^8",69,"^9",7,"^:",69,"^;",17,"^4<",["^Z",["^4=",["^Z",[["^4>"]]]]],"^6","Return a comma separated list of values. Subsequences are joined with\n   spaces."],"^H","^1S","^7","garden/util.cljc","^;",17,"^4?",["^Z",[["^4>"]]],"^4@",null,"^4A",["^Z",[null,null]],"^9",1,"^4B",false,"^8",69,"^4C","^4D","^:",69,"^4E",1,"^4F",true,"^4<",["^Z",["^4=",["^Z",[["^4>"]]]]],"^6","Return a comma separated list of values. Subsequences are joined with\n   spaces."],"~$vendor-prefix",["^ ","^4;",null,"^5",["^ ","^7","garden/util.cljc","^8",132,"^9",7,"^:",132,"^;",20,"^4<",["^Z",["^4=",["^Z",[["~$p","~$s"]]]]],"^6","Attach a CSS vendor prefix to s."],"^H","^2?","^7","garden/util.cljc","^;",20,"^4?",["^Z",[["~$p","~$s"]]],"^4@",null,"^4A",["^Z",[null,null]],"^9",1,"^4B",false,"^8",132,"^4C","^4D","^:",132,"^4E",2,"^4F",true,"^4<",["^Z",["^4=",["^Z",[["~$p","~$s"]]]]],"^6","Attach a CSS vendor prefix to s."],"~$hash-map?",["^ ","^4;",null,"^5",["^ ","^7","garden/util.cljc","^8",87,"^9",7,"^:",87,"^;",16,"^4<",["^Z",["^4=",["^Z",[["~$x"]]]]],"^6","True if `(map? x)` and `x` does not satisfy `clojure.lang.IRecord`."],"^H","^1V","^7","garden/util.cljc","^;",16,"^4?",["^Z",[["~$x"]]],"^4@",null,"^4A",["^Z",[null,null]],"^9",1,"^4B",false,"^8",87,"^4C","^4H","^:",87,"^4E",1,"^4F",true,"^4<",["^Z",["^4=",["^Z",[["~$x"]]]]],"^6","True if `(map? x)` and `x` does not satisfy `clojure.lang.IRecord`."],"~$natural?",["^ ","^4;",null,"^5",["^ ","^7","garden/util.cljc","^8",143,"^9",7,"^:",143,"^;",15,"^4<",["^Z",["^4=",["^Z",[["~$n"]]]]],"^6","True if n is a natural number."],"^H","^29","^7","garden/util.cljc","^;",15,"^4?",["^Z",[["~$n"]]],"^4@",null,"^4A",["^Z",[null,null]],"^9",1,"^4B",false,"^8",143,"^4C","^4H","^:",143,"^4E",1,"^4F",true,"^4<",["^Z",["^4=",["^Z",[["~$n"]]]]],"^6","True if n is a natural number."],"~$ToString",["^ ","^5",["^ ","~:protocol-symbol",true,"^7","garden/util.cljc","^;",22,"^9",14,"^8",27,"~:protocol-info",["^ ","^4M",["^ ","^4Q",[["^4T"]]]],"^:",27,"~:sigs",["^ ","~:to-str",["^ ","^H","^4Q","^4<",["^Z",[["^4T"]]],"^6","Convert a value into a string."]],"~:jsdoc",["^Z",["@interface"]]],"^5;",true,"^H","^1R","^7","garden/util.cljc","^;",22,"^9",1,"^8",27,"^5<",["^ ","^4M",["^ ","^4Q",[["^4T"]]]],"~:info",null,"^:",27,"^4N","^4O","^5=",["^ ","^5>",["^ ","^H","^4Q","^4<",["^Z",[["^4T"]]],"^6","Convert a value into a string."]],"~:impls",["^G",[null,"^1M","~$default"]],"^5?",["^Z",["@interface"]]],"~$wrap-quotes",["^ ","^4;",null,"^5",["^ ","^7","garden/util.cljc","^8",79,"^9",7,"^:",79,"^;",18,"^4<",["^Z",["^4=",["^Z",[["~$s"]]]]],"^6","Wrap a string with double quotes."],"^H","^2D","^7","garden/util.cljc","^;",18,"^4?",["^Z",[["~$s"]]],"^4@",null,"^4A",["^Z",[null,null]],"^9",1,"^4B",false,"^8",79,"^4C","^4D","^:",79,"^4E",1,"^4F",true,"^4<",["^Z",["^4=",["^Z",[["~$s"]]]]],"^6","Wrap a string with double quotes."],"~$prefix",["^ ","^4;",null,"^5",["^ ","^7","garden/util.cljc","^8",124,"^9",7,"^:",124,"^;",13,"^4<",["^Z",["^4=",["^Z",[["~$p","~$s"]]]]],"^6","Attach a CSS style prefix to s."],"^H","^22","^7","garden/util.cljc","^;",13,"^4?",["^Z",[["~$p","~$s"]]],"^4@",null,"^4A",["^Z",[null,null]],"^9",1,"^4B",false,"^8",124,"^4C","^4D","^:",124,"^4E",2,"^4F",true,"^4<",["^Z",["^4=",["^Z",[["~$p","~$s"]]]]],"^6","Attach a CSS style prefix to s."],"~$declaration?",["^ ","^H","^2C","^7","garden/util.cljc","^8",96,"^9",1,"^:",98,"^;",15,"^6","Alias to `hash-map?`.","^5",["^ ","^7","garden/util.cljc","^8",98,"^9",3,"^:",98,"^;",15,"^6","Alias to `hash-map?`."]],"~$at-keyframes?",["^ ","^4;",null,"^5",["^ ","^7","garden/util.cljc","^8",114,"^9",7,"^:",114,"^;",20,"^4<",["^Z",["^4=",["^Z",[["~$x"]]]]],"^6","True if `x` is a CSS `@keyframes` rule."],"^H","^2;","^7","garden/util.cljc","^;",20,"^4?",["^Z",[["~$x"]]],"^4@",null,"^4A",["^Z",[null,null]],"^9",1,"^4B",false,"^8",114,"^4C","^4H","^:",114,"^4E",1,"^4F",true,"^4<",["^Z",["^4=",["^Z",[["~$x"]]]]],"^6","True if `x` is a CSS `@keyframes` rule."],"~$at-rule?",["^ ","^4;",null,"^5",["^ ","^7","garden/util.cljc","^8",100,"^9",7,"^:",100,"^;",15,"^4<",["^Z",["^4=",["^Z",[["~$x"]]]]]],"^H","^1I","^7","garden/util.cljc","^;",15,"^4?",["^Z",[["~$x"]]],"^4@",null,"^4A",["^Z",[null,null]],"^9",1,"^4B",false,"^8",100,"^4C","^4H","^:",100,"^4E",1,"^4F",true,"^4<",["^Z",["^4=",["^Z",[["~$x"]]]]]],"~$average",["^ ","^4;",null,"^5",["^ ","^7","garden/util.cljc","^8",161,"^9",7,"^:",161,"^;",14,"^4<",["^Z",["^4=",["^Z",[["~$n","~$m","~$&","~$more"]]]]],"^6","Return the average of two or more numbers.","^4K",["^ ","^4B",true,"^4L",2,"^4E",2,"^4?",[["^Z",["~$n","~$m","^5I"]]],"^4<",["^Z",[["~$n","~$m","~$&","^5I"]]],"^4A",["^Z",[null]]]],"^H","^2<","^7","garden/util.cljc","^;",14,"^4K",["^ ","^4B",true,"^4L",2,"^4E",2,"^4?",[["^Z",["~$n","~$m","^5I"]]],"^4<",["^Z",[["~$n","~$m","~$&","^5I"]]],"^4A",["^Z",[null]]],"^4?",[["^Z",["~$n","~$m","^5I"]]],"^4@",null,"^4L",2,"^4A",["^Z",[null]],"^9",1,"^4B",true,"^4M",[["^ ","^4L",2,"^4B",true,"^4N","~$number"]],"^8",161,"^4C","^4O","^:",161,"^4E",2,"^4F",true,"^4<",["^Z",[["~$n","~$m","~$&","^5I"]]],"^6","Return the average of two or more numbers."]],"^X",["^ ","^S","^S"],"~:cljs.analyzer/constants",["^ ","^U",["^G",["~:keyframes","~:identifier","~:import","~:feature","~:media"]],"~:order",["^5M","^5P","^5O","^5L","^5N"]],"^11",["^ ","^V",["^G",[]]],"^12",["^ "],"^13",["^T","^S","^N","^P","^Q","^R"]],"^K","^I","~:ns-specs",["^ "],"~:ns-spec-vars",["^G",[]],"~:compiler-options",["^2F",[["^5T","~:static-fns"],true,["^5T","~:shadow-tweaks"],null,["^5T","~:source-map-inline"],null,["^5T","~:elide-asserts"],false,["^5T","~:optimize-constants"],null,["^5T","^18"],null,["^5T","~:external-config"],null,["^5T","~:tooling-config"],null,["^5T","~:emit-constants"],null,["^5T","~:load-tests"],null,["^5T","~:form-size-threshold"],null,["^5T","~:data-readers"],null,["^5T","~:infer-externs"],"~:auto",["^5T","^1:"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5T","~:fn-invoke-direct"],null,["^5T","~:source-map"],"/dev/null"]]]