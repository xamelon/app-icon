{"version":3,"sources":["stylo/tailwind/spacing.cljc"],"mappings":"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","names":["stylo.rule/rule","_","x","stylo.util.as_unit","y","stylo.util.format","garden.compiler/render-css"],"sourcesContent":["(ns stylo.tailwind.spacing\n  (:require\n    [stylo.rule :refer [rule]]\n    [stylo.util :refer [as-unit] :as util]\n    [garden.compiler :refer [render-css]]))\n\n\n;; https://tailwindcss.com/docs/padding/#app\n(defmethod rule :p [_ x] [[:& {:padding (as-unit x)}]])\n(defmethod rule :p-auto [_] [[:& {:padding \"auto\"}]])\n(defmethod rule :p-px [_] [[:& {:padding (as-unit 1 :px)}]])\n\n(defmethod rule :px [_ x] [[:& {:padding-left (as-unit x) :padding-right (as-unit x)}]])\n(defmethod rule :px-auto [_] [[:& {:padding-left \"auto\" :padding-right \"auto\"}]])\n(defmethod rule :px-px [_] [[:& {:padding-left (as-unit 1 :px) :padding-right (as-unit 1 :px)}]])\n\n(defmethod rule :py [_ x] [[:& {:padding-top (as-unit x) :padding-bottom (as-unit x)}]])\n(defmethod rule :py-auto [_] [[:& {:padding-top \"auto\" :padding-bottom \"auto\"}]])\n(defmethod rule :py-px [_] [[:& {:padding-top (as-unit 1 :px) :padding-bottom (as-unit 1 :px)}]])\n\n(defmethod rule :pt [_ x] [[:& {:padding-top (as-unit x)}]])\n(defmethod rule :pt-auto [_] [[:& {:padding-top \"auto\"}]])\n(defmethod rule :pt-px [_] [[:& {:padding-top (as-unit 1 :px)}]])\n\n(defmethod rule :pl [_ x] [[:& {:padding-left (as-unit x)}]])\n(defmethod rule :pl-auto [_] [[:& {:padding-left \"auto\"}]])\n(defmethod rule :pl-px [_] [[:& {:padding-left (as-unit 1 :px)}]])\n\n(defmethod rule :pb [_ x] [[:& {:padding-bottom (as-unit x)}]])\n(defmethod rule :pb-auto [_] [[:& {:padding-bottom \"auto\"}]])\n(defmethod rule :pb-px [_] [[:& {:padding-bottom (as-unit 1 :px)}]])\n\n(defmethod rule :pr [_ x] [[:& {:padding-right (as-unit x)}]])\n(defmethod rule :pr-auto [_] [[:& {:padding-right \"auto\"}]])\n(defmethod rule :pr-px [_] [[:& {:padding-right (as-unit 1 :px)}]])\n\n(defmethod rule :pyx [_  y x]\n  [[:& {:padding-top    (as-unit y)\n        :padding-bottom (as-unit y)\n        :padding-left   (as-unit x)\n        :padding-right  (as-unit x)}]])\n\n;; https://tailwindcss.com/docs/margin/#app\n(defmethod rule :m [_ x] [[:& {:margin (as-unit x)}]])\n(defmethod rule :m-auto [_] [[:& {:margin \"auto\"}]])\n(defmethod rule :m-px [_] [[:& {:margin (as-unit 1 :px)}]])\n\n(defmethod rule :mx [_ x] [[:& {:margin-left (as-unit x) :margin-right (as-unit x)}]])\n(defmethod rule :mx-auto [_] [[:& {:margin-left \"auto\" :margin-right \"auto\"}]])\n(defmethod rule :mx-px [_] [[:& {:margin-left (as-unit 1 :px) :margin-right (as-unit 1 :px)}]])\n\n(defmethod rule :my [_ x] [[:& {:margin-top (as-unit x) :margin-bottom (as-unit x)}]])\n(defmethod rule :my-auto [_] [[:& {:margin-top \"auto\" :margin-bottom \"auto\"}]])\n(defmethod rule :my-px [_] [[:& {:margin-top (as-unit 1 :px) :margin-bottom (as-unit 1 :px)}]])\n\n(defmethod rule :mt [_ x] [[:& {:margin-top (as-unit x)}]])\n(defmethod rule :mt-auto [_] [[:& {:margin-top \"auto\"}]])\n(defmethod rule :mt-px [_] [[:& {:margin-top (as-unit 1 :px)}]])\n\n(defmethod rule :ml [_ x] [[:& {:margin-left (as-unit x)}]])\n(defmethod rule :ml-auto [_] [[:& {:margin-left \"auto\"}]])\n(defmethod rule :ml-px [_] [[:& {:margin-left (as-unit 1 :px)}]])\n\n(defmethod rule :mb [_ x] [[:& {:margin-bottom (as-unit x)}]])\n(defmethod rule :mb-auto [_] [[:& {:margin-bottom \"auto\"}]])\n(defmethod rule :mb-px [_] [[:& {:margin-bottom (as-unit 1 :px)}]])\n\n(defmethod rule :mr [_ x] [[:& {:margin-right (as-unit x)}]])\n(defmethod rule :mr-auto [_] [[:& {:margin-right \"auto\"}]])\n(defmethod rule :mr-px [_] [[:& {:margin-right (as-unit 1 :px)}]])\n\n\n;; https://tailwindcss.com/docs/space/#app\n(defmethod rule :space-x\n  ([_] (rule :space-x 1))\n  ([_ x] [[\"&>*+*\" {:--space-x-reverse 0\n                    :margin-right      (util/format \"calc(%s * var(--space-x-reverse))\" (render-css (as-unit x)))\n                    :margin-left       (util/format \"calc(%s * calc(1 - var(--space-x-reverse)))\" (render-css (as-unit x)))}]]))\n(defmethod rule :space-y\n  ([_] (rule :space-y 1))\n  ([_ x] [[\"&>*+*\" {:--space-y-reverse 0\n                    :margin-bottom     (util/format \"calc(%s * var(--space-y-reverse))\" (render-css (as-unit x)))\n                    :margin-top        (util/format \"calc(%s * calc(1 - var(--space-y-reverse)))\" (render-css (as-unit x)))}]]))\n\n(defmethod rule :space-x-reverse [_] [[\"&>*+*\" {:--space-x-reverse 1}]])\n(defmethod rule :space-y-reverse [_] [[\"&>*+*\" {:--space-y-reverse 1}]])\n\n\n(defmethod rule :myx [_ y x]\n  [[:& {:margin-left   (as-unit x)\n        :margin-right  (as-unit x)\n        :margin-top    (as-unit y)\n        :margin-bottom (as-unit y)}]])\n"]}