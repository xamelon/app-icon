{"version":3,"sources":["re_com/splits.cljs"],"mappings":"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","names":["re-com.splits/drag-handle","orientation","over?","vertical?","cljs.core._EQ_","length","width","pos1","pos2","color","border","flex-flow","cljs.core.merge","re-com.box/flex-flow-style","re-com.splits/hv-split-args-desc","re-com.validate/string-or-hiccup?","cljs.core/string?","cljs.core/fn?","re-com.validate/number-or-string?","re-com.validate/css-style?","re-com.validate/html-attr?","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-com.splits/h-split","p__63248","map__63249","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/Error","seq63247","self__4724__auto__","cljs.core/seq","size","height","on-split-change","initial-split","splitter-size","margin","args","js/goog.DEBUG","re_com.validate.validate_args","re-com.validate/extract-arg-data","p1__63243#","container-id","cljs.core.gensym","split-perc","reagent.core.atom","js/parseInt","dragging?","stop-drag","G__63253","cljs.core/deref","cljs.core/reset!","calc-perc","mouse-x","container","re-com.util/get-element-by-id","offsets","re-com.util/sum-scroll-offsets","c-width","c-left-x","relative-x","<html>?","js/document","mouseout","event","mousemove","mousedown","mouseover-split","mouseout-split","make-container-attrs","class","style","attr","in-drag?","re-com.box/flex-child-style","make-panel-attrs","percentage","make-splitter-attrs","p__63266","map__63267","panel-1","panel-2","_size","_width","_height","_on-split-change","_initial-split","_splitter-size","_margin","re-com.splits/v-split","p__63290","map__63291","seq63287","p1__63281#","G__63296","mouse-y","c-height","c-top-y","relative-y","p__63304","map__63305"],"sourcesContent":["(ns re-com.splits\n  (:require-macros [re-com.core :refer [handler-fn]])\n  (:require [re-com.util        :refer [get-element-by-id sum-scroll-offsets]]\n            [re-com.box         :refer [flex-child-style flex-flow-style]]\n            [re-com.validate    :refer [string-or-hiccup? number-or-string? html-attr? css-style?] :refer-macros [validate-args-macro]]\n            [reagent.core       :as    reagent]))\n\n\n(defn drag-handle\n  \"Return a drag handle to go into a vertical or horizontal splitter bar:\n    orientation: Can be :horizonal or :vertical\n    over?:       When true, the mouse is assumed to be over the splitter so show a bolder color\"\n  [orientation over?]\n  (let [vertical? (= orientation :vertical)\n        length    \"20px\"\n        width     \"8px\"\n        pos1      \"3px\"\n        pos2      \"3px\"\n        color     (if over? \"#999\" \"#ccc\")\n        border    (str \"solid 1px \" color)\n        flex-flow (str (if vertical? \"row\" \"column\") \" nowrap\")]\n    [:div {:class \"display-flex\"\n           :style (merge (flex-flow-style flex-flow)\n                         {:width  (if vertical? width length)\n                          :height (if vertical? length width)\n                          :margin \"auto\"})}\n     [:div {:style (if vertical?\n                     {:width pos1   :height length :border-right  border}\n                     {:width length :height pos1   :border-bottom border})}]\n     [:div {:style (if vertical?\n                     {:width pos2   :height length :border-right  border}\n                     {:width length :height pos2   :border-bottom border})}]]))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: h-split\n;; ------------------------------------------------------------------------------------\n\n(def hv-split-args-desc\n  [{:name :panel-1         :required true                  :type \"hiccup\"          :validate-fn string-or-hiccup? :description \"markup to go in the left (or top) panel\"}\n   {:name :panel-2         :required true                  :type \"hiccup\"          :validate-fn string-or-hiccup? :description \"markup to go in the right (or bottom) panel\"}\n   {:name :size            :required false :default \"auto\" :type \"string\"          :validate-fn string?           :description [:span \"applied to the outer container of the two panels. Equivalent to CSS style \" [:span.bold \"flex\"] \".\" [:br]  \"Examples: \" [:code \"initial\"] \", \" [:code \"auto\"] \", \" [:code \"none\"]\", \" [:code \"100px\"] \", \" [:code \"2\"] \" or a generic triple of \" [:code \"grow shrink basis\"]]}\n   {:name :width           :required false                 :type \"string\"          :validate-fn string?           :description \"width of the outer container of the two panels. A CSS width style\"}\n   {:name :height          :required false                 :type \"string\"          :validate-fn string?           :description \"height of the outer container of the two panels. A CSS height style\"}\n   {:name :on-split-change :required false                 :type \"double -> nil\"   :validate-fn fn?               :description [:span \"called when the user moves the splitter bar (on mouse up, not on each mouse move). Given the new \" [:code \":panel-1\"] \" percentage split\"]}\n   {:name :initial-split   :required false :default 50     :type \"double | string\" :validate-fn number-or-string? :description [:span \"initial split percentage for \" [:code \":panel-1\"] \". Can be double value or string (with/without percentage sign)\"]}\n   {:name :splitter-size   :required false :default \"8px\"  :type \"string\"          :validate-fn string?           :description \"thickness of the splitter\"}\n   {:name :margin          :required false :default \"8px\"  :type \"string\"          :validate-fn string?           :description \"thickness of the margin around the panels\"}\n   {:name :class           :required false                 :type \"string\"          :validate-fn string?           :description \"CSS class names, space separated (applies to the outer container)\"}\n   {:name :style           :required false                 :type \"CSS style map\"   :validate-fn css-style?        :description \"CSS styles to add or override (applies to the outer container)\"}\n   {:name :attr            :required false                 :type \"HTML attr map\"   :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the outer container)\"]}])\n\n(defn h-split\n  \"Returns markup for a horizontal layout component\"\n  [& {:keys [size width height on-split-change initial-split splitter-size margin]\n      :or   {size \"auto\" initial-split 50 splitter-size \"8px\" margin \"8px\"}\n      :as   args}]\n  {:pre [(validate-args-macro hv-split-args-desc args \"h-split\")]}\n  (let [container-id         (gensym \"h-split-\")\n        split-perc           (reagent/atom (js/parseInt initial-split)) ;; splitter position as a percentage of width\n        dragging?            (reagent/atom false)                       ;; is the user dragging the splitter (mouse is down)?\n        over?                (reagent/atom false)                       ;; is the mouse over the splitter, if so, highlight it\n\n        stop-drag            (fn []\n                               (when on-split-change (on-split-change @split-perc))\n                               (reset! dragging? false))\n\n        calc-perc            (fn [mouse-x]                                                 ;; turn a mouse y coordinate into a percentage position\n                               (let [container  (get-element-by-id container-id)           ;; the outside container\n                                     offsets    (sum-scroll-offsets container)             ;; take any scrolling into account\n                                     c-width    (.-clientWidth container)                  ;; the container's width\n                                     c-left-x   (.-offsetLeft container)                   ;; the container's left X\n                                     relative-x (+ (- mouse-x c-left-x) (:left offsets))]  ;; the X of the mouse, relative to container\n                                 (* 100.0 (/ relative-x c-width))))                        ;; do the percentage calculation\n\n        <html>?              #(= % (.-documentElement js/document))                        ;; test for the <html> element\n\n        mouseout             (fn [event]\n                               (if (<html>? (.-relatedTarget event))                       ;; stop drag if we leave the <html> element\n                                 (stop-drag)))\n\n        mousemove            (fn [event]\n                               (reset! split-perc (calc-perc (.-clientX event))))\n\n        mousedown            (fn [event]\n                               (.preventDefault event)                                    ;; stop selection of text during drag\n                               (reset! dragging? true))\n\n        mouseover-split      #(reset! over? true) ;; true CANCELs mouse-over (false cancels all others)\n        mouseout-split       #(reset! over? false)\n\n        make-container-attrs (fn [class style attr in-drag?]\n                               (merge {:class (str \"rc-h-split display-flex \" class)\n                                       :id    container-id\n                                       :style (merge (flex-child-style size)\n                                                     (flex-flow-style \"row nowrap\")\n                                                     {:margin margin\n                                                      :width  width\n                                                      :height height}\n                                                     style)}\n                                      (when in-drag?                             ;; only listen when we are dragging\n                                        {:on-mouse-up   (handler-fn (stop-drag))\n                                         :on-mouse-move (handler-fn (mousemove event))\n                                         :on-mouse-out  (handler-fn (mouseout event))})\n                                      attr))\n\n        make-panel-attrs     (fn [class in-drag? percentage]\n                               {:class (str \"display-flex \" class)\n                                :style (merge (flex-child-style (str percentage \" 1 0px\"))\n                                              {:overflow \"hidden\"} ;; TODO: Shouldn't have this...test removing it\n                                              (when in-drag? {:pointer-events \"none\"}))})\n\n        make-splitter-attrs  (fn [class]\n                               {:class         (str \"display-flex \" class)\n                                :on-mouse-down (handler-fn (mousedown event))\n                                :on-mouse-over (handler-fn (mouseover-split))\n                                :on-mouse-out  (handler-fn (mouseout-split))\n                                :style         (merge (flex-child-style (str \"0 0 \" splitter-size))\n                                                      {:cursor \"col-resize\"}\n                                                      (when @over? {:background-color \"#f8f8f8\"}))})]\n\n    (fn\n      [& {:keys [panel-1 panel-2 _size _width _height _on-split-change _initial-split _splitter-size _margin class style attr]}]\n      [:div (make-container-attrs class style attr @dragging?)\n       [:div (make-panel-attrs \"rc-h-split-top\" @dragging? @split-perc)\n        panel-1]\n       [:div (make-splitter-attrs \"rc-h-split-splitter\")\n        [drag-handle :vertical @over?]]\n       [:div (make-panel-attrs \"rc-h-split-bottom\" @dragging? (- 100 @split-perc))\n        panel-2]])))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: v-split\n;; ------------------------------------------------------------------------------------\n\n(defn v-split\n  \"Returns markup for a vertical layout component\"\n  [& {:keys [size width height on-split-change initial-split splitter-size margin]\n      :or   {size \"auto\" initial-split 50 splitter-size \"8px\" margin \"8px\"}\n      :as   args}]\n  {:pre [(validate-args-macro hv-split-args-desc args \"v-split\")]}\n  (let [container-id         (gensym \"v-split-\")\n        split-perc           (reagent/atom (js/parseInt initial-split))  ;; splitter position as a percentage of height\n        dragging?            (reagent/atom false)                        ;; is the user dragging the splitter (mouse is down)?\n        over?                (reagent/atom false)                        ;; is the mouse over the splitter, if so, highlight it\n\n        stop-drag            (fn []\n                               (when on-split-change (on-split-change @split-perc))\n                               (reset! dragging? false))\n\n        calc-perc            (fn [mouse-y]                                                 ;; turn a mouse y coordinate into a percentage position\n                               (let [container  (get-element-by-id container-id)           ;; the outside container\n                                     offsets    (sum-scroll-offsets container)             ;; take any scrolling into account\n                                     c-height   (.-clientHeight container)                 ;; the container's height\n                                     c-top-y    (.-offsetTop container)                    ;; the container's top Y\n                                     relative-y (+ (- mouse-y c-top-y) (:top offsets))]    ;; the Y of the mouse, relative to container\n                                 (* 100.0 (/ relative-y c-height))))                       ;; do the percentage calculation\n\n        <html>?              #(= % (.-documentElement js/document))                        ;; test for the <html> element\n\n        mouseout             (fn [event]\n                               (if (<html>? (.-relatedTarget event))                       ;; stop drag if we leave the <html> element\n                                 (stop-drag)))\n\n        mousemove            (fn [event]\n                               (reset! split-perc (calc-perc (.-clientY event))))\n\n        mousedown            (fn [event]\n                               (.preventDefault event)                                    ;; stop selection of text during drag\n                               (reset! dragging? true))\n\n        mouseover-split      #(reset! over? true)\n        mouseout-split       #(reset! over? false)\n\n        make-container-attrs (fn [class style attr in-drag?]\n                               (merge {:class (str \"rc-v-split display-flex \" class)\n                                       :id    container-id\n                                       :style (merge (flex-child-style size)\n                                                     (flex-flow-style \"column nowrap\")\n                                                     {:margin margin\n                                                      :width  width\n                                                      :height height}\n                                                     style)}\n                                      (when in-drag?                             ;; only listen when we are dragging\n                                        {:on-mouse-up   (handler-fn (stop-drag))\n                                         :on-mouse-move (handler-fn (mousemove event))\n                                         :on-mouse-out  (handler-fn (mouseout event))})\n                                      attr))\n\n        make-panel-attrs     (fn [class in-drag? percentage]\n                               {:class (str \"display-flex \" class)\n                                :style (merge (flex-child-style (str percentage \" 1 0px\"))\n                                              {:overflow \"hidden\"} ;; TODO: Shouldn't have this...test removing it\n                                              (when in-drag? {:pointer-events \"none\"}))})\n\n        make-splitter-attrs  (fn [class]\n                               {:class         (str \"display-flex \" class)\n                                :on-mouse-down (handler-fn (mousedown event))\n                                :on-mouse-over (handler-fn (mouseover-split))\n                                :on-mouse-out  (handler-fn (mouseout-split))\n                                :style         (merge (flex-child-style (str \"0 0 \" splitter-size))\n                                                      {:cursor  \"row-resize\"}\n                                                      (when @over? {:background-color \"#f8f8f8\"}))})]\n\n    (fn\n      [& {:keys [panel-1 panel-2 _size _width _height _on-split-change _initial-split _splitter-size _margin class style attr]}]\n      [:div (make-container-attrs class style attr @dragging?)\n       [:div (make-panel-attrs \"re-v-split-top\" @dragging? @split-perc)\n        panel-1]\n       [:div (make-splitter-attrs \"re-v-split-splitter\")\n        [drag-handle :horizontal @over?]]\n       [:div (make-panel-attrs \"re-v-split-bottom\" @dragging? (- 100 @split-perc))\n        panel-2]])))\n"]}