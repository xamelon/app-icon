{"version":3,"sources":["stylo/util.cljc"],"mappings":";AAYA,AAAA,AAAA,AAAAA,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AACHM,AAAMC;AADT,AAGW,AAACC,AAAMC,AAAeH,AAAIC;;;AAHrC,AAAA,AAAA,AAAMP;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAMA,AAAA,AAAMS,AACHC,AAAMC;AADT,AAEE,AAAAC,AAAkC,AAACQ,AAASV;AAA5C,AAAA,AAAAE;AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAN,AAAAQ,AAAAF,AAAAA;AAAA,AAAAG,AAAAH,AAAA,AAAiBI;AAAjB,AAAAD,AAAAH,AAAA,AAAqBK;AAArB,AAAAF,AAAAH,AAAA,AAA2BM;AAA3B,AACE,AAAA,AAACE,AACOJ,AAAIC,AAAMC,AAAK,AAACG,AAAKX;;AAC7BD;;;AAGJ,AAAA,AAAMa,AACHC;AADH,AAEE,AAAK,AAASA;AACT,AAAA,AAACC,AAA4BD;;AADlC;;;AAIF,AAAA,AAAME,AACHF;AADH,AAEE,AAAAG,AAAc,AAAA,AAACF,AAA4BD;AAA3C,AAAAI,AAAAD,AAAA,AAAA,AAAOE;AAAP,AAAAD,AAAAD,AAAA,AAAA,AAASG;AAAT,AAAAF,AAAAD,AAAA,AAAA,AAAWI;AAAX,AAEW,AAAG,AAACC,AAAcF,AAAG,AAACE,AAAcD;;AAGjD,AAAA,AAAA,AAAAtC,AAAMyC;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFE;AADJ,AAEG,AAAA,AAACC,AAAQD;;;AAFZ,AAAA,AAAA,AAAMF,AAGFE,AAAEE;AAHN,AAIG,AACE,AAACC,AAAYH;AAAGA;;AADlB,AAEE,AAACb,AAAWa;AAAG,AAACI,AAAc,AAAA,AAAO,AAACd,AAAgBU;;AAFxD,AAGE,AAASA;AAAGA;;AAHd,AAIQ,AAAAK,AAAMH;AAANG,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AACM,AAACE,AAASP;;;AADhB;AAEM,AAACQ,AAASR;;;AAFhB;AAGO,AAACS,AAAUT;;;AAHlB;AAIO,AAACU,AAAU,AAAA,AAAGV;;;AAJrB;AAKW,AAACI,AAAcJ;;;;AAL1B,AAAA,AAAAD,AAAA,AAAA,AAAAM;;;;;;;;;AARX,AAAA,AAAA,AAAMP;;AAAN,AAgBA","names":["var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","stylo.util/format","seq69213","G__69214","cljs.core/first","cljs.core/next","self__4723__auto__","fmt","args","cljs.core.apply","goog.string/format","stylo.util/with-alpha","color","variable","temp__5718__auto__","map__69225","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","red","green","blue","garden.color/hex->rgb","stylo.util.format","cljs.core/name","stylo.util/str-ratio?","s","cljs.core/re-matches","stylo.util/parse-str-ratio","vec__69237","cljs.core.nth","_","n","d","js/parseFloat","G__69241","stylo.util/as-unit","js/Error","v","stylo.util.as_unit","preferred-unit","garden.units/unit?","garden.units/percent","G__69242","cljs.core/Keyword","garden.units/ms","garden.units/px","garden.units/deg","garden.units/rem"],"sourcesContent":["(ns stylo.util\n  (:refer-clojure :exclude [format])\n  (:require\n   [garden.color :refer [hex->rgb]]\n   [garden.units :as units]\n   #?(:cljs [goog.string :as gstring])\n   #?(:cljs [goog.string.format])\n   #?(:clj [garden.def]))\n  #?(:cljs\n     (:require-macros [garden.def])))\n\n\n(defn format\n  [fmt & args]\n  #?(:clj (apply clojure.core/format fmt args)\n     :cljs (apply gstring/format fmt args)))\n\n\n(defn with-alpha\n  [color variable]\n  (if-let [{:keys [red green blue]} (hex->rgb color)]\n    (format \"rgba(%d,%d,%d,var(%s))\"\n            red green blue (name variable))\n    color))\n\n\n(defn str-ratio?\n  [s]\n  (and (string? s)\n       (re-matches #\"(-?\\d+)/(\\d+)\" s)))\n\n\n(defn parse-str-ratio\n  [s]\n  (let [[_ n d] (re-matches #\"(-?\\d+)/(\\d+)\" s)]\n    #?(:clj (/ (Double/parseDouble n) (Double/parseDouble d))\n       :cljs (/ (js/parseFloat n) (js/parseFloat d)))))\n\n\n(defn as-unit\n  ([v]\n   (as-unit v :rem))\n  ([v preferred-unit]\n   (cond\n     (units/unit? v) v\n     (str-ratio? v) (units/percent (* 100 (parse-str-ratio v)))\n     (string? v) v\n     :else (case preferred-unit\n             :ms (units/ms v)\n             :px (units/px v)\n             :deg (units/deg v)\n             :rem (units/rem (* v 0.25))\n             :percent (units/percent v)))))\n\n\n(comment\n  (garden.compiler/render-css (units/percent 42))\n  (garden.compiler/render-css (as-unit \"3/4\")))\n"]}