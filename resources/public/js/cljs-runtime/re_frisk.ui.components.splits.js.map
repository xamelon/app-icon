{"version":3,"sources":["re_frisk/ui/components/splits.cljs"],"mappings":"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","names":["re-frisk.ui.components.splits/drag-handle","orientation","over?","vertical?","cljs.core._EQ_","length","width","pos1","pos2","color","border","flex-flow","cljs.core.merge","re-com.box/flex-flow-style","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-frisk.ui.components.splits/h-split","p__65650","map__65651","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq65646","self__4724__auto__","cljs.core/seq","size","height","on-split-change","initial-split","splitter-size","margin","document","js/document","args","container-id","cljs.core.gensym","split-perc","reagent.core.atom","js/parseInt","dragging?","stop-drag","G__65654","cljs.core/deref","cljs.core/reset!","calc-perc","mouse-x","container","offsets","re-com.util/sum-scroll-offsets","c-width","c-left-x","relative-x","mousemove","event","mousedown","mouseover-split","mouseout-split","make-container-attrs","class","style","attr","in-drag?","re-com.box/flex-child-style","make-panel-attrs","percentage","make-splitter-attrs","p__65663","map__65665","panel-1","panel-2","_size","_width","_height","_on-split-change","_initial-split","_splitter-size","_margin","re-frisk.ui.components.splits/v-split","p__65679","map__65680","seq65677","open-bottom-split?","G__65685","mouse-y","c-height","c-top-y","relative-y","p__65703","map__65704","perc","and__4115__auto__"],"sourcesContent":["(ns re-frisk.ui.components.splits\n  (:require-macros [re-com.core :refer [handler-fn]])\n  (:require [re-com.util        :refer [sum-scroll-offsets]]\n            [re-com.box         :refer [flex-child-style flex-flow-style]]\n            [reagent.core       :as    reagent]))\n\n;;TODO copy https://github.com/Day8/re-com/blob/master/src/re_com/splits.cljs\n\n;; fixed :on-mouse-leave https://github.com/Day8/re-com/issues/158\n;; (.getElementById document container-id), document provided from outside, because re-frisk window is not a root window\n\n(defn drag-handle\n  \"Return a drag handle to go into a vertical or horizontal splitter bar:\n    orientation: Can be :horizonal or :vertical\n    over?:       When true, the mouse is assumed to be over the splitter so show a bolder color\"\n  [orientation over?]\n  (let [vertical? (= orientation :vertical)\n        length    \"20px\"\n        width     \"8px\"\n        pos1      \"3px\"\n        pos2      \"3px\"\n        color     (if over? \"#999\" \"#ccc\")\n        border    (str \"solid 1px \" color)\n        flex-flow (str (if vertical? \"row\" \"column\") \" nowrap\")]\n    [:div {:class \"display-flex\"\n           :style (merge (flex-flow-style flex-flow)\n                         {:width  (if vertical? width length)\n                          :height (if vertical? length width)\n                          :margin \"auto\"})}\n     [:div {:style (if vertical?\n                     {:width pos1   :height length :border-right  border}\n                     {:width length :height pos1   :border-bottom border})}]\n     [:div {:style (if vertical?\n                     {:width pos2   :height length :border-right  border}\n                     {:width length :height pos2   :border-bottom border})}]]))\n\n(defn h-split\n  \"Returns markup for a horizontal layout component\"\n  [& {:keys [size width height on-split-change initial-split splitter-size margin document]\n      :or   {size \"auto\" initial-split 50 splitter-size \"8px\" margin \"8px\" document js/document}\n      :as   args}]\n  (let [container-id         (gensym \"h-split-\")\n        split-perc           (reagent/atom (js/parseInt initial-split)) ;; splitter position as a percentage of width\n        dragging?            (reagent/atom false)                       ;; is the user dragging the splitter (mouse is down)?\n        over?                (reagent/atom false)                       ;; is the mouse over the splitter, if so, highlight it\n\n        stop-drag            (fn []\n                               (when on-split-change (on-split-change @split-perc))\n                               (reset! dragging? false))\n\n        calc-perc            (fn [mouse-x]                                                 ;; turn a mouse y coordinate into a percentage position\n                               (let [container  (.getElementById document container-id)    ;; the outside container\n                                     offsets    (sum-scroll-offsets container)             ;; take any scrolling into account\n                                     c-width    (.-clientWidth container)                  ;; the container's width\n                                     c-left-x   (.-offsetLeft container)                   ;; the container's left X\n                                     relative-x (+ (- mouse-x c-left-x) (:left offsets))]  ;; the X of the mouse, relative to container\n                                 (* 100.0 (/ relative-x c-width))))                        ;; do the percentage calculation\n\n        mousemove            (fn [event]\n                               (reset! split-perc (calc-perc (.-clientX event))))\n\n        mousedown            (fn [event]\n                               (.preventDefault event)                                    ;; stop selection of text during drag\n                               (reset! dragging? true))\n\n        mouseover-split      #(reset! over? true) ;; true CANCELs mouse-over (false cancels all others)\n        mouseout-split       #(reset! over? false)\n\n        make-container-attrs (fn [class style attr in-drag?]\n                               (merge {:class (str \"rc-h-split display-flex \" class)\n                                       :id    container-id\n                                       :style (merge (flex-child-style size)\n                                                     (flex-flow-style \"row nowrap\")\n                                                     {:margin margin\n                                                      :width  width\n                                                      :height height}\n                                                     style)}\n                                      (when in-drag?               ;; only listen when we are dragging\n                                        {:on-mouse-up   (handler-fn (stop-drag))\n                                         :on-mouse-leave  (handler-fn (stop-drag))\n                                         :on-mouse-move (handler-fn (mousemove event))})\n                                      attr))\n\n        make-panel-attrs     (fn [class in-drag? percentage]\n                               {:class (str \"display-flex \" class)\n                                :style (merge (flex-child-style (str percentage \" 1 0px\"))\n                                              {:overflow \"hidden\"} ;; TODO: Shouldn't have this...test removing it\n                                              (when in-drag? {:pointer-events \"none\"}))})\n\n        make-splitter-attrs  (fn [class]\n                               {:class         (str \"display-flex \" class)\n                                :on-mouse-down (handler-fn (mousedown event))\n                                :on-mouse-over (handler-fn (mouseover-split))\n                                :on-mouse-out  (handler-fn (mouseout-split))\n                                :style         (merge (flex-child-style (str \"0 0 \" splitter-size))\n                                                      {:cursor \"col-resize\"}\n                                                      (when @over? {:background-color \"#f8f8f8\"}))})]\n\n    (fn\n      [& {:keys [panel-1 panel-2 _size _width _height _on-split-change _initial-split _splitter-size _margin class style attr]}]\n      [:div (make-container-attrs class style attr @dragging?)\n       [:div (make-panel-attrs \"rc-h-split-top\" @dragging? @split-perc)\n        panel-1]\n       [:div (make-splitter-attrs \"rc-h-split-splitter\")\n        [drag-handle :vertical @over?]]\n       [:div (make-panel-attrs \"rc-h-split-bottom\" @dragging? (- 100 @split-perc))\n        panel-2]])))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: v-split\n;; ------------------------------------------------------------------------------------\n\n(defn v-split\n  \"Returns markup for a vertical layout component\"\n  [& {:keys [size width height on-split-change initial-split splitter-size margin document open-bottom-split?]\n      :or   {size \"auto\" initial-split 50 splitter-size \"8px\" margin \"8px\" document js/document}\n      :as   args}]\n  (let [container-id         (gensym \"v-split-\")\n        split-perc           (reagent/atom (js/parseInt initial-split))  ;; splitter position as a percentage of height\n        dragging?            (reagent/atom false)                        ;; is the user dragging the splitter (mouse is down)?\n        over?                (reagent/atom false)                        ;; is the mouse over the splitter, if so, highlight it\n\n        stop-drag            (fn []\n                               (when on-split-change (on-split-change @split-perc))\n                               (reset! dragging? false))\n\n        calc-perc            (fn [mouse-y]                                                 ;; turn a mouse y coordinate into a percentage position\n                               (let [container  (.getElementById document container-id)            ;; the outside container\n                                     offsets    (sum-scroll-offsets container)             ;; take any scrolling into account\n                                     c-height   (.-clientHeight container)                 ;; the container's height\n                                     c-top-y    (.-offsetTop container)                    ;; the container's top Y\n                                     relative-y (+ (- mouse-y c-top-y) (:top offsets))]    ;; the Y of the mouse, relative to container\n                                 (* 100.0 (/ relative-y c-height))))                       ;; do the percentage calculation\n\n        mousemove            (fn [event]\n                               (reset! split-perc (calc-perc (.-clientY event))))\n\n        mousedown            (fn [event]\n                               (.preventDefault event)                                    ;; stop selection of text during drag\n                               (reset! dragging? true))\n\n        mouseover-split      #(reset! over? true)\n        mouseout-split       #(reset! over? false)\n\n        make-container-attrs (fn [class style attr in-drag?]\n                               (merge {:class (str \"rc-v-split display-flex \" class)\n                                       :id    container-id\n                                       :style (merge (flex-child-style size)\n                                                     (flex-flow-style \"column nowrap\")\n                                                     {:margin margin\n                                                      :width  width\n                                                      :height height}\n                                                     style)}\n                                      (when in-drag?                             ;; only listen when we are dragging\n                                        {:on-mouse-up   (handler-fn (stop-drag))\n                                         :on-mouse-move (handler-fn (mousemove event))\n                                         :on-mouse-leave  (handler-fn (stop-drag))})\n                                      attr))\n\n        make-panel-attrs     (fn [class in-drag? percentage]\n                               {:class (str \"display-flex \" class)\n                                :style (merge (flex-child-style (str percentage \" 1 0px\"))\n                                              {:overflow \"hidden\"} ;; TODO: Shouldn't have this...test removing it\n                                              (when in-drag? {:pointer-events \"none\"}))})\n\n        make-splitter-attrs  (fn [class]\n                               {:class         (str \"display-flex \" class)\n                                :on-mouse-down (handler-fn (mousedown event))\n                                :on-mouse-over (handler-fn (mouseover-split))\n                                :on-mouse-out  (handler-fn (mouseout-split))\n                                :style         (merge (flex-child-style (str \"0 0 \" splitter-size))\n                                                      {:cursor  \"row-resize\"}\n                                                      (when @over? {:background-color \"#f8f8f8\"}))})]\n\n    (fn\n      [& {:keys [panel-1 panel-2 _size _width _height _on-split-change _initial-split _splitter-size _margin class style attr]}]\n      (let [perc (if (and (= @split-perc (js/parseInt initial-split)) open-bottom-split? @open-bottom-split?) \"70\" @split-perc)]\n        [:div (make-container-attrs class style attr @dragging?)\n         [:div (make-panel-attrs \"re-v-split-top\" @dragging? perc)\n          panel-1]\n         [:div (make-splitter-attrs \"re-v-split-splitter\")\n          [drag-handle :horizontal @over?]]\n         [:div (make-panel-attrs \"re-v-split-bottom\" @dragging? (- 100 perc))\n          panel-2]]))))\n"]}