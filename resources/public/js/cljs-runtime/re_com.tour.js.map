{"version":3,"sources":["re_com/tour.cljs"],"mappings":"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","names":["re-com.tour/make-tour","tour-spec","tour-map","cljs.core.atom","p1__63582#","p2__63583#","cljs.core.reduce","cljs.core.assoc","reagent.core.atom","re-com.tour/initialise-tour","tour","cljs.core.doall","iter__4529__auto__","s__63591","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__63593","cljs.core/chunk-buffer","i__63592","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__63590","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","step","cljs.core/reset!","re-com.tour/start-tour","fexpr__63611","re-com.tour/finish-tour","re-com.tour/next-tour-step","cljs.core/deref","steps","old-step","new-step","fexpr__63619","cljs.core.nth","fexpr__63620","re-com.tour/prev-tour-step","fexpr__63623","fexpr__63624","re-com.tour/make-tour-nav","on-first-button","cljs.core._EQ_","on-last-button","cljs.core.merge","re-com.box/flex-child-style","re-com.buttons/button","event","cljs.core/chunk-first"],"sourcesContent":["(ns re-com.tour\n  (:require-macros [re-com.core :refer [handler-fn]])\n  (:require [reagent.core   :as    reagent]\n            [re-com.box     :refer [flex-child-style]]\n            [re-com.buttons :refer [button]]))\n\n\n;;--------------------------------------------------------------------------------------------------\n;; Component: tour\n;;\n;;   Strings together\n;;--------------------------------------------------------------------------------------------------\n\n(defn make-tour\n  \"Returns a map containing\n  - A reagent atom for each tour step controlling popover show/hide (boolean)\n  - A standard atom holding the current step (integer)\n  - A copy of the steps parameter passed in, to determine the order for prev/next functions\n  It sets the first step atom to true so that it will be initially shown\n  Sample return value:\n  {:steps [:step1 :step2 :step3]\n  :current-step (atom 0)\n  :step1 (reagent/atom true)\n  :step2 (reagent/atom false)\n  :step3 (reagent/atom false)}\"\n  [tour-spec]\n  (let [tour-map {:current-step (atom 0) :steps tour-spec}] ;; Only need normal atom\n\n    (reduce #(assoc %1 %2 (reagent/atom false)) tour-map tour-spec))) ;; Old way: (merge {} (map #(hash-map % (reagent/atom false)) tour-spec))\n\n\n(defn- initialise-tour\n  \"Resets all poover atoms to false\"\n  [tour]\n  (doall (for [step (:steps tour)] (reset! (step tour) false))))\n\n\n(defn start-tour\n  \"Sets the first popover atom in the tour to true\"\n  [tour]\n  (initialise-tour tour)\n  (reset! (:current-step tour) 0)\n  (reset! ((first (:steps tour)) tour) true))\n\n\n(defn finish-tour\n  \"Closes all tour popovers\"\n  [tour]\n  (initialise-tour tour))\n\n\n(defn- next-tour-step\n  [tour]\n  (let [steps     (:steps tour)\n        old-step  @(:current-step tour)\n        new-step  (inc old-step)]\n    (when (< new-step (count (:steps tour)))\n      (reset! (:current-step tour) new-step)\n      (reset! ((nth steps old-step) tour) false)\n      (reset! ((nth steps new-step) tour) true))))\n\n\n(defn- prev-tour-step\n  [tour]\n  (let [steps    (:steps tour)\n        old-step @(:current-step tour)\n        new-step (dec old-step)]\n    (when (>= new-step 0)\n      (reset! (:current-step tour) new-step)\n      (reset! ((nth steps old-step) tour) false)\n      (reset! ((nth steps new-step) tour) true))))\n\n\n(defn make-tour-nav\n  \"Generate the hr and previous/next buttons markup.\n  If first button in tour, don't generate a Previous button.\n  If last button in tour, change Next button to a Finish button\"\n  [tour]\n  (let [on-first-button (= @(:current-step tour) 0)\n        on-last-button  (= @(:current-step tour) (dec (count (:steps tour))))]\n    [:div\n     [:hr {:style (merge (flex-child-style \"none\")\n                         {:margin \"10px 0px 10px\"})}]\n      (when-not on-first-button\n        [button\n         :label    \"Previous\"\n         :on-click (handler-fn (prev-tour-step tour))\n         :style    {:margin-right \"15px\"}\n         :class     \"btn-default\"])\n      [button\n       :label    (if on-last-button \"Finish\" \"Next\")\n       :on-click (handler-fn (if on-last-button\n                               (finish-tour tour)\n                               (next-tour-step tour)))\n       :class     \"btn-default\"]]))\n"]}