{"version":3,"sources":["stylo/core.cljc"],"mappings":";AAyBA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAO,AAAA,AAACC;;AAoBjB,AAAA,AAAMC,AAAgBC;AAAtB,AACE,AAACC,AACC,AAACC,AACAC,AAGM,AAACK,AAAI,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAME;AAAN,AAAAD,AAAAD,AAAA,AAAA,AAAQG;AAAR,AAAY,AAAA,AAACC,AAAMF,AAAGC;AAF3Bb,AACA,AAACI,AAAQ,AAAA,AAACC,AAAeC,AAAKC;;AAczC","names":["js/stylo","js/stylo.core","js/stylo.core.styles","stylo.core/styles","cljs.core.atom","stylo.core/compile-styles","styles","garden.core.css","cljs.core.concat","stylo.tailwind.preflight/preflight","cljs.core.sort_by","cljs.core.comp","cljs.core/meta","cljs.core/val","cljs.core.map","p__70805","vec__70806","cljs.core.nth","k","v","cljs.core.into"],"sourcesContent":["(ns stylo.core\n  (:require\n    [garden.core]\n    [clojure.string :as str]\n    [stylo.rule :refer [rule join-rules]]\n    [stylo.tailwind.preflight]\n    [stylo.tailwind.accessibility]\n    [stylo.tailwind.background]\n    [stylo.tailwind.border]\n    [stylo.tailwind.effect]\n    [stylo.tailwind.flex]\n    [stylo.tailwind.grid]\n    [stylo.tailwind.interactivity]\n    [stylo.tailwind.layout]\n    [stylo.tailwind.sizing]\n    [stylo.tailwind.spacing]\n    [stylo.tailwind.svg]\n    [stylo.tailwind.table]\n    [stylo.tailwind.transform]\n    [stylo.tailwind.transition]\n    [stylo.tailwind.typography]\n    [stylo.tailwind.variant]\n    [stylo.tailwind.media])\n  #?(:cljs (:require-macros [stylo.core])))\n\n(defonce styles (atom {}))\n\n#?(:clj\n   (defmacro c [& rules]\n     (when rules\n       (let [class (if (:name (:ns &env))\n                     (str (str/replace (:name (:ns &env)) #\"\\.\" \"_\") \"-\" (:line &env) \"-\" (:column &env))\n                     (str \"c\" (hash rules)))]\n         (swap! styles assoc\n                (keyword (str \".\" class))\n                (with-meta (join-rules rules) {:location [(:name (:ns &env)) (:line &env) (:column &env)]}))\n         (keyword class)))))\n\n\n#?(:clj\n   (defmacro c? [& rules]\n     (garden.core/css\n       (into [(keyword (str \".c\" (hash rules)))] (join-rules rules)))))\n\n\n(defn compile-styles [styles]\n  (garden.core/css\n    (concat\n     stylo.tailwind.preflight/preflight\n      (->> styles\n           (sort-by (comp :location meta val))\n           (map (fn [[k v]] (into [k] v)))))))\n\n#?(:clj\n   (defmacro mount-style\n     []\n     `(aset (or (.getElementById js/document \"stylo\")\n                (let [style# (.createElement js/document \"style\")]\n                  (.setAttribute style# \"id\" \"stylo\")\n                  (.appendChild js/document.head style#)\n                  style#))\n            \"innerHTML\" ~(compile-styles @styles))))\n\n\n(comment\n  (reset! styles {})\n\n\n  @styles\n\n  (c? [:progress-bar [:bg :red-500]] {:font-weight \"500\"})\n\n  (c? [:progress-bar [:bg :red-500]])\n  (c? [:disabled [:hover [:bg :red-500]]])\n  (c? [:bg :red-500] [[:.some-arbitrary-class {:bg :blue-400}]])\n  (c? [:bg :red-500]\n      [:hover [[:.some-arbitrary-class {:bg :blue-400}]]])\n  (c? [:pseudo \":nth-child(2)\" [:hover [:bg :red-500]]])\n\n\n  (c? [[:& {:color \"red\"}]\n       [:&:target {:color \"green\"}]])\n  (c? {:color \"red\"})\n  (c? [:hover [:placeholder :white] [:mb 1]])\n  (c? [:p 1])\n  (c? [:placeholder :white])\n  (c? [:divide-x 2])\n  (c? :sr-only))\n"]}