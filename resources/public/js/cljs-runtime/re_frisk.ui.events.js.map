{"version":3,"sources":["re_frisk/ui/events.cljs"],"mappings":"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","names":["re-frisk.ui.events/event-item","_","tool-state","p__65730","map__65731","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","color","name","app-db-diff","selected?","op-type","item","cljs.core.merge","cljs.core/not","clojure.string/blank?","event","cljs.core.swap_BANG_","cljs.core/assoc","re-frisk.ui.trace/trace-event-item","re-frisk.ui.events/event-list-item","p__65734","map__65735","trace?","and__4115__auto__","cljs.core.not_EQ_","re-frisk.ui.trace/trace-item","re-frisk.ui.events/events-scroller","filtered-events","reagent.core/create-class","this","n","reagent.dom/dom-node","cljs.core/deref","p1__65737#","re-frisk.ui.components.components/scroller","t","cljs.core._EQ_","iter__4529__auto__","s__65740","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__65742","cljs.core/chunk-buffer","i__65741","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__65739","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","re-frisk.ui.events/events-view","re-frame-data","truncate-checkbox-val","reagent.core.atom","checkbox-trace-val","text-val","re-frame-events","colored-and-selected","reagent.ratom/make-reaction","clrs","cljs.core.doall","p1__65745#","cljs.core.map","cljs.core.assoc","cljs.core.get_in","traces-filtered-events","cljs.core.remove","cljs.core.filter","re-frisk.utils/filter-event","p1__65746#","p1__65747#","p1__65748#","re-com.core/v-box","re-com.core/h-box","re-com.core/input-text","cljs.core/reset!","re-frisk.ui.components.components/small-button","re-com.core/checkbox","re-frisk.ui.components.github/link","cljs.core/dissoc","re-frisk.ui.events/event-bar","evnt-key","subs?","G__65753","fexpr__65752","re-com.core/label","p1__65751#","cljs.core/assoc-in","re-frisk.ui.events/event-view","state-atom","re-frisk.ui.components.frisk/expand-by-default","map__65755","duration-ms","handler-duration-ms","fx-duration-ms","re-frisk.ui.trace/subs-details","re-frisk.ui.components.frisk/Root","cljs.core/chunk-first"],"sourcesContent":["(ns re-frisk.ui.events\n  (:require-macros [reagent.ratom :refer [reaction]])\n  (:require\n   [reagent.core :as reagent]\n   [reagent.dom :as rdom]\n   [clojure.string :as string]\n   [re-com.core :as re-com]\n   [re-frisk.ui.components.frisk :as frisk]\n   [re-frisk.ui.components.components :as components]\n   [re-frisk.ui.components.github :as github]\n   [re-frisk.ui.trace :as trace]\n   [re-frisk.utils :as utils]))\n\n(defn event-item [_ tool-state]\n  (fn [{:keys [color name app-db-diff selected? op-type] :as item} _]\n    [:a\n     {:href     \"#\"\n      :class    (str \"list-group-item\" (when selected? \" active\"))\n      :style    (merge {:padding     5 :font-size 13 :border-left-width 2\n                        :white-space :pre :width \"100%\"}\n                       (when (and (nil? app-db-diff) (not selected?))\n                         {:opacity \"0.7\"})\n                       (when-not (string/blank? color)\n                         {:border-left-color (str \"#\" color)}))\n      :on-click (fn [event] (swap! tool-state assoc :selected-event item) (.preventDefault event))}\n     (if op-type\n       [trace/trace-event-item item]\n       [:span name])]))\n\n(defn event-list-item [_ tool-state]\n  (fn [{:keys [trace? op-type] :as item} _]\n    (if (and trace? (not= :event op-type))\n      [trace/trace-item item tool-state]\n      [event-item item tool-state])))\n\n(defn events-scroller [filtered-events tool-state]\n  (reagent/create-class\n   {:display-name \"debugger-messages\"\n    :component-did-update\n    (fn [this]\n      (let [n (rdom/dom-node this)]\n        (when (:scroll-bottom? @tool-state)\n          (set! (.-scrollTop n) (.-scrollHeight n)))))\n    :reagent-render\n    (fn []\n      [components/scroller\n       {:on-scroll #(let [t (.-target %)]\n                      (swap! tool-state assoc\n                             :scroll-bottom?\n                             (= (- (.-scrollHeight t) (.-offsetHeight t)) (.-scrollTop t))))}\n       (for [item @filtered-events]\n         ^{:key (str \"item\" (:indx item))}\n         [event-list-item item tool-state])])}))\n\n(defn events-view [re-frame-data tool-state]\n  (let [truncate-checkbox-val (reagent/atom true)\n        checkbox-trace-val    (reagent/atom true)\n        text-val              (reagent/atom \"\")\n        re-frame-events       (:events re-frame-data)\n        colored-and-selected\n        (reaction\n         (let [clrs (:events-colors @tool-state)]\n           (doall\n            (map #(assoc % :selected? (= (get-in @tool-state [:selected-event :indx]) (:indx %))\n                           :name (if @truncate-checkbox-val (:truncated-name %) (str (first (:event %))))\n                           :color (get clrs (first (:event %))))\n                 @re-frame-events))))\n        traces-filtered-events\n        (reaction\n         (if @checkbox-trace-val\n           @colored-and-selected\n           (remove :trace? @colored-and-selected)))\n        filtered-events\n        (reaction\n         (if (= @text-val \"\")\n           @traces-filtered-events\n           (filter (utils/filter-event @text-val) @traces-filtered-events)))]\n    (fn []\n      [re-com/v-box :size \"1\"\n       :children\n       [;events filter\n        [re-com/h-box\n         :children\n         [[re-com/input-text :style {:height :auto :padding \"0\"} :width \"100%\"\n           :model text-val :change-on-blur? false :placeholder \"Filter events\"\n           :on-change #(reset! text-val %)]\n          [components/small-button {:on-click #(reset! text-val \"\")} \"X\"]]]\n        ;truncate checkbox\n        [re-com/h-box :gap \"5px\"\n         :children\n         [[re-com/checkbox\n           :model truncate-checkbox-val\n           :on-change #(reset! truncate-checkbox-val %)\n           :label \"truncate\"]\n          [re-com/checkbox\n           :model checkbox-trace-val\n           :on-change #(reset! checkbox-trace-val %)\n           :label \"traces\"]]]\n        ;events\n        [events-scroller filtered-events tool-state]\n        ;bottom buttons\n        [re-com/h-box :style {:padding-top 3} :align :center :justify :between :gap \"5px\"\n         :children\n         [[github/link]\n          [components/small-button\n           {:on-click #(do (reset! re-frame-events [])\n                           (swap! tool-state dissoc :selected-event))}\n           \"clear\"]]]]])))\n\n(defn event-bar [tool-state]\n  (let [evnt-key (reaction (first (get-in @tool-state [:selected-event :event])))\n        subs?    (reaction (get-in @tool-state [:selected-event :subs?]))\n        color    (reaction (if @evnt-key (@evnt-key (:events-colors @tool-state)) \"\"))]\n    (fn []\n      [re-com/h-box :style {:background-color \"#4e5d6c\"}\n       :children\n       [[re-com/label :style {:margin \"4px\"}\n         :label (cond @evnt-key \"Event\"\n                      @subs? \"Subscriptions\"\n                      :else \"Event / Trace\")]\n        (when @evnt-key\n          [re-com/h-box\n           :children\n           [[re-com/label :label @evnt-key :style {:margin \"4px\" :color \"#df691a\"}]\n            [re-com/label :label \"#\" :style {:margin \"4px\"}]\n            [:input\n             {:style     {:width \"60px\"} :placeholder \"000000\" :type \"text\" :max-length \"6\"\n              :value     @color\n              :on-change #(swap! tool-state assoc-in\n                                 [:events-colors @evnt-key]\n                                 (-> % .-target .-value))}]]])]])))\n\n(defn event-view [tool-state]\n  (let [state-atom (reagent/atom frisk/expand-by-default)]\n    (fn [_]\n      (let [{:keys [event app-db-diff trace? duration-ms handler-duration-ms\n                    fx-duration-ms subs?] :as item}\n            (:selected-event @tool-state)]\n        (when item\n          (if subs?\n            [trace/subs-details item]\n            [frisk/Root (if trace?\n                          item\n                          (merge {:event       event\n                                  :app-db-diff app-db-diff}\n                                 (when duration-ms\n                                   {:trace {:duration         duration-ms\n                                            :handler-duration handler-duration-ms\n                                            :fx-duration      fx-duration-ms}})))\n             0 state-atom]))))))"]}