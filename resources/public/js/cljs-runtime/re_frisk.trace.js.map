{"version":3,"sources":["re_frisk/trace.cljs"],"mappings":"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","names":["re-frisk.trace/component-name","c","G__65934","re-frisk.trace/operation-name","cljs.core/memoize","cljs.core/last","clojure.string.split","re-frisk.trace/static-fns","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__65936","re-frame.trace/*current-trace*","*current-trace*-temp-val__65937","re-frame.trace/start-trace","end__54191__auto__","re-frame.interop/now","duration__54192__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","reagent.impl.util/*non-reactive*","reagent.impl.component/do-render","rat","goog.object/get","_","reagent.impl.batching/mark-rendered","res","reagent.ratom/run-in-reaction","reagent.impl.batching/queue-render","reagent.impl.component/rat-opts","cljs-ratom","new-trace__54193__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core.dissoc","re-frame.interop/reagent-id","cljs.core.map","re-frisk.trace/normalize-traces","traces","cljs.core.reduce","p__65939","map__65940","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","items","op-type","tags","duration","id","trace","cljs.core._EQ_","cljs.core/namespace","item","G__65943","cljs.core/Keyword","cljs.core.conj","cljs.core/select-keys","re-frisk.utils/truncate-name","cljs.core/first","re-frisk.diff.diff/diff","prev","cljs.core/peek","cljs.core/pop","re-frisk.utils/str-ms","cljs.core.sort_by","p__65944","map__65945","re-frisk.trace/normalize-durations","subs?","subs","handler-duration","fx-duration","map__65948","run-duration","created-duration","disposed-duration","render-duration","p__65950","map__65951","acc","G__65953","cljs.core/+","cljs.core/inc","handler-fx-duration","G__65957"],"sourcesContent":["(ns re-frisk.trace\n  (:require [re-frisk.diff.diff :as diff]\n            [re-frisk.utils :as utils]\n            [re-frame.trace]\n            [reagent.ratom :as ratom]\n            [reagent.impl.batching :as batch]\n            [reagent.impl.util :as util]\n            [re-frame.interop :as interop]\n            [clojure.string :as string]\n            [goog.object :as gob]))\n\n(defn component-name [c]\n  (some-> c .-constructor .-displayName))\n\n(def operation-name (memoize (fn [c] (last (string/split (component-name c) #\" > \")))))\n\n;; from https://github.com/day8/re-frame-10x/blob/master/src/day8/re_frame_10x.cljs#L24\n(def static-fns\n  {:render\n   (fn mp-render []\n     (this-as c\n       (re-frame.trace/with-trace\n        {:op-type   :render\n         :operation (operation-name c)}\n        (if util/*non-reactive*\n          (reagent.impl.component/do-render c)\n          (let [rat        (gob/get c \"cljsRatom\")\n                _          (batch/mark-rendered c)\n                res        (if (nil? rat)\n                             (ratom/run-in-reaction #(reagent.impl.component/do-render c) c \"cljsRatom\"\n                                                    batch/queue-render reagent.impl.component/rat-opts)\n                             (._run rat false))\n                cljs-ratom (gob/get c \"cljsRatom\")]         ;; actually a reaction\n            (re-frame.trace/merge-trace!\n             {:tags {:reaction      (interop/reagent-id cljs-ratom)\n                     :input-signals (when cljs-ratom\n                                      (map interop/reagent-id (gob/get cljs-ratom \"watching\" :none)))}})\n            res)))))})\n\n(defn normalize-traces [traces]\n  (reduce (fn [items {:keys [op-type tags duration id] :as trace}]\n            (let [op-type (if (= (namespace op-type) \"sub\") :sub op-type)\n                  item    {:indx id :trace? true}]\n              (case op-type\n                :re-frame.router/fsm-trigger\n                (conj items (merge item\n                                   (select-keys trace [:id :op-type :operation])))\n                :event\n                (conj items (merge (dissoc item :trace?)\n                                   (assoc (select-keys trace [:id :op-type :operation :duration])\n                                     :event (:event tags)\n                                     :truncated-name (utils/truncate-name (str (first (:event tags))))\n                                     :app-db-diff (diff/diff (:app-db-before tags) (:app-db-after tags)))))\n                :event/handler\n                (let [prev (peek items)]\n                  (if (= (:op-type prev :event))\n                    (conj (pop items) (assoc prev :handler-duration duration))\n                    (conj items (merge item\n                                       (select-keys trace [:id :op-type :operation :duration])))))\n                :event/do-fx\n                (let [prev (peek items)]\n                  (if (= (:op-type prev :event))\n                    (conj (pop items) (assoc prev :fx-duration duration))\n                    (conj items (merge item\n                                       (select-keys trace [:id :op-type :duration])))))\n                (:sub :render)\n                (let [prev  (peek items)\n                      trace (select-keys trace [:id :op-type :operation :duration])\n                      trace (assoc trace :duration-ms (utils/str-ms (:duration trace)))]\n                  (if (:subs? prev)\n                    (conj (pop items) (update prev :subs conj trace))\n                    (conj items (merge item\n                                       {:op-type :subs :subs? true :subs [trace]}))))\n                (conj items (merge item trace)))))\n          []\n          (sort-by :id traces)))\n\n(defn normalize-durations [{:keys [subs? subs op-type handler-duration fx-duration]\n                            :as   trace}]\n  (let [{:keys [duration handler-duration fx-duration\n                run-duration created-duration disposed-duration render-duration]\n         :as trace}\n        (cond\n          subs?\n          (merge trace\n                 (reduce (fn [acc {:keys [duration op-type]}]\n                           (cond-> (update acc :duration + duration)\n                                   (= op-type :sub/run)\n                                   (-> (update :run-count inc)\n                                       (update :run-duration + duration))\n                                   (= op-type :sub/create)\n                                   (-> (update :created-count inc)\n                                       (update :created-duration + duration))\n                                   (= op-type :sub/dispose)\n                                   (-> (update :disposed-count inc)\n                                       (update :disposed-duration + duration))\n                                   (= op-type :render)\n                                   (-> (update :render-count inc)\n                                       (update :render-duration + duration))))\n                         {:duration          0\n                          :run-count         0\n                          :run-duration      0\n                          :render-count      0\n                          :render-duration   0\n                          :created-count     0\n                          :created-duration  0\n                          :disposed-count    0\n                          :disposed-duration 0}\n                         subs))\n          (= op-type :event)\n          (let [handler-fx-duration (+ handler-duration fx-duration)]\n            (assoc trace :handler-fx-duration handler-fx-duration\n                         :handler-fx-duration-ms (utils/str-ms handler-fx-duration)))\n          :else\n          trace)]\n    (cond-> trace\n            duration\n            (assoc :duration-ms (utils/str-ms duration))\n            handler-duration\n            (assoc :handler-duration-ms (utils/str-ms handler-duration))\n            fx-duration\n            (assoc :fx-duration-ms (utils/str-ms fx-duration))\n            run-duration\n            (assoc :run-duration-ms (utils/str-ms run-duration))\n            created-duration\n            (assoc :created-duration-ms (utils/str-ms created-duration))\n            disposed-duration\n            (assoc :disposed-duration-ms (utils/str-ms disposed-duration))\n            render-duration\n            (assoc :render-duration-ms (utils/str-ms render-duration)))))"]}