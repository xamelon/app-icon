{"version":3,"sources":["re_com/typeahead.cljs"],"mappings":"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","names":["p__65205","map__65206","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","re-com.typeahead/make-typeahead-state","args","on-change","rigid?","change-on-blur?","immediate-model-update?","data-source","suggestion-to-string","debounce-delay","model","external-model-value","re-com.util/deref-or-value","G__65208","c-input","cljs.core.async.chan","or__4126__auto__","cljs.core/str","re-com.typeahead/debounce","re-com.typeahead/display-suggestion","p__65210","map__65211","re-com.typeahead/event-updates-model?","state","event","G__65213","cljs.core/Keyword","and__4115__auto__","cljs.core/not","p__65220","map__65221","re-com.typeahead/event-displays-suggestion?","G__65224","p__65226","map__65227","re-com.typeahead/update-model","new-value","cljs.core.assoc","p__65232","map__65235","suggestion","suggestion-string","G__65237","re-com.typeahead/clear-suggestions","cljs.core.dissoc","p__65238","map__65239","re-com.typeahead/activate-suggestion-by-index","suggestions","index","cljs.core.nth","G__65241","p__65242","map__65243","re-com.typeahead/choose-suggestion-by-index","p__65247","map__65250","re-com.typeahead/choose-suggestion-active","suggestion-active-index","G__65253","re-com.typeahead/wrap","count","cljs.core/mod","p__65264","map__65265","re-com.typeahead/activate-suggestion-next","G__65270","cljs.core/seq","cljs.core/count","p__65278","map__65280","re-com.typeahead/activate-suggestion-prev","G__65287","re-com.typeahead/reset-typeahead","G__65291","re-com.typeahead/got-suggestions","p__65298","map__65300","re-com.typeahead/input-text-will-blur","input-text","displaying-suggestion?","re-com.typeahead/change-data-source","re-com.typeahead/external-model-changed","re-com.typeahead/search-data-source!","state-atom","text","temp__5718__auto__","return-value","G__65311","G__65312","p1__65307#","cljs.core.swap_BANG_","cljs.core/assoc","re-com.typeahead/search-data-source-loop!","c-search","c__55638__auto__","cljs.core.async.impl.dispatch/run","f__55639__auto__","switch__55615__auto__","state_65350","state_val_65351","statearr-65354","cljs.core.async.impl.ioc-helpers/take!","inst_65348","cljs.core.async.impl.ioc-helpers/return-chan","inst_65334","inst_65336","cljs.core/deref","inst_65337","inst_65338","statearr-65358","statearr-65360","statearr-65361","inst_65340","inst_65341","statearr-65363","statearr-65365","inst_65343","statearr-65367","inst_65345","statearr-65369","statearr-65372","statearr-65373","state-machine__55616__auto__","ret-value__55617__auto__","result__55618__auto__","cljs.core/keyword-identical?","ex__55619__auto__","e65374","statearr-65375","statearr-65376","cljs.core/first","state__55640__auto__","statearr-65379","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core._EQ_","re-com.typeahead/input-text-on-change!","new-text","map__65382","cljs.core.async.put_BANG_","p1__65380#","G__65384","re-com.typeahead/input-text-on-key-down!","pred__65388","expr__65389","cljs.core/=","js/goog.events.KeyCodes.UP","js/goog.events.KeyCodes.DOWN","js/goog.events.KeyCodes.ENTER","js/goog.events.KeyCodes.ESC","js/goog.events.KeyCodes.TAB","cljs.core/not-empty","re-com.typeahead/typeahead-args-desc","cljs.core/fn?","cljs.core/integer?","re-com.validate/input-status-type?","re-com.validate/input-status-types-list","cljs.core/string?","re-com.validate/css-style?","re-com.validate/html-attr?","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-com.typeahead/typeahead","p__65400","map__65401","js/Error","seq65397","self__4724__auto__","js/goog.DEBUG","re_com.validate.validate_args","re-com.validate/extract-arg-data","map__65404","reagent.core.atom","input-text-model","reagent.core/cursor","p__65408","map__65409","_on-change","_change-on-blur?","_immediate-model-update?","_debounce-delay","render-suggestion","_suggestion-to-string","_rigid?","status","status-icon?","status-tooltip","placeholder","width","height","disabled?","class","style","attr","map__65417","waiting?","external-model","last-data-source","latest-external-model","cljs.core.not_EQ_","re-com.box/v-box","re-com.misc/input-text","cljs.core.partial","re-com.box/box","re-com.misc/throbber","iter__4529__auto__","s__65425","cljs.core/LazySeq","temp__5720__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__65427","cljs.core/chunk-buffer","i__65426","vec__65433","cljs.core/-nth","cljs.core/chunk-append","p1__65396#","cljs.core/chunk-cons","cljs.core/chunk","iter__65424","cljs.core/chunk-rest","vec__65440","cljs.core/cons","cljs.core/rest","i","s","cljs.core.map","cljs.core/vector","cljs.core.range","selected?","in","ms","out","state_65499","state_val_65500","inst_65452","statearr-65501","inst_65447","statearr-65502","statearr-65503","inst_65484","statearr-65505","statearr-65506","inst_65471","inst_65486","statearr-65507","statearr-65508","inst_65464","inst_65456","inst_65455","inst_65465","cljs.core/PersistentVector","inst_65466","inst_65467","statearr-65511","cljs.core.async/ioc-alts!","statearr-65513","inst_65497","cljs.core.async.impl.ioc-helpers/put!","inst_65449","statearr-65517","statearr-65518","inst_65494","statearr-65519","statearr-65520","inst_65469","inst_65478","inst_65479","statearr-65521","statearr-65522","statearr-65523","inst_65492","statearr-65524","inst_65470","statearr-65525","inst_65481","statearr-65527","statearr-65528","inst_65490","statearr-65529","inst_65472","statearr-65530","statearr-65531","statearr-65532","statearr-65533","e65534","statearr-65535","statearr-65536","statearr-65537","cljs.core.async/timeout","cljs.core/chunk-first"],"sourcesContent":["(ns re-com.typeahead\n  (:require-macros [re-com.core :refer [handler-fn]]\n                   [cljs.core.async.macros :refer [alt! go-loop]])\n  (:require [cljs.core.async :refer [chan timeout <! put!]]\n            [re-com.misc     :refer [throbber input-text]]\n            [re-com.util     :refer [deref-or-value px]]\n            [re-com.popover  :refer [popover-tooltip]] ;; need?\n            [re-com.box      :refer [h-box v-box box gap line flex-child-style align-style]] ;; need?\n            [re-com.validate :refer [input-status-type? input-status-types-list regex? string-or-hiccup? css-style? html-attr? number-or-string?\n                                     string-or-atom? throbber-size? throbber-sizes-list] :refer-macros [validate-args-macro]]\n            [reagent.core    :as    reagent]\n            [goog.events.KeyCodes]))\n\n;; TODO\n;; ability to focus & blur the input-text would be nice... this is also missing from input-text\n;; the typeahead should blur the input-text after a selection is chosen\n\n(declare debounce display-suggestion)\n(defn- make-typeahead-state\n  \"Return an initial value for the typeahead state, given `args`.\"\n  [{:as args :keys [on-change rigid? change-on-blur? immediate-model-update? data-source suggestion-to-string debounce-delay model]}]\n  (let [external-model-value (deref-or-value model)]\n    (cond-> (let [c-input (chan)]\n              {:input-text \"\"\n               :external-model (deref-or-value model)\n               :model          (deref-or-value model)\n               :waiting? false\n               :suggestions []\n               :displaying-suggestion? false\n               :suggestion-to-string (or suggestion-to-string str)\n               :data-source data-source\n               :change-on-blur? change-on-blur?\n               :immediate-model-update? immediate-model-update?\n               :on-change  on-change\n               :rigid?     rigid?\n               :c-input    c-input\n               :c-search   (debounce c-input debounce-delay)})\n      external-model-value\n      (display-suggestion external-model-value))))\n\n;; ------------------------------------------------------------------------------------\n;; State predicates:  state -> value? -> boolean\n;; ------------------------------------------------------------------------------------\n\n(defn- event-updates-model?\n  \"Should `event` update the `typeahead` `model`?\"\n  [{:as state :keys [change-on-blur? rigid? immediate-model-update?]} event]\n  (let [change-on-blur?         (deref-or-value change-on-blur?)\n        immediate-model-update? (deref-or-value immediate-model-update?)\n        rigid?                  (deref-or-value rigid?)]\n    (case event\n      :input-text-blurred   (and change-on-blur? (not rigid?))\n      :suggestion-activated (not change-on-blur?)\n      :input-text-changed   (and (not rigid?) (or (not change-on-blur?) immediate-model-update?))\n      false)))\n\n(defn- event-displays-suggestion?\n  \"Should `event` cause the `input-text` value to be used to show the active suggestion?\"\n  [{:as state :keys [change-on-blur?]} event]\n  (let [change-on-blur? (deref-or-value change-on-blur?)]\n    (case event\n      :suggestion-activated (not change-on-blur?)\n      false)))\n\n;; ------------------------------------------------------------------------------------\n;; State update helpers: state -> value? -> next-state\n;;   all pure, _except_ that they may call `on-change`\n;; ------------------------------------------------------------------------------------\n\n(defn- update-model\n  \"Change the `typeahead` `model` value to `new-value`\"\n  [{:as state :keys [on-change]} new-value]\n  (when on-change (on-change new-value))\n  (assoc state :model new-value))\n\n(defn- display-suggestion\n  \"Change the `input-text` `model` to the string representation of `suggestion`\"\n  [{:as state :keys [suggestion-to-string]} suggestion]\n  (let [suggestion-string (suggestion-to-string suggestion)]\n    (cond-> state\n      suggestion-string (assoc :input-text suggestion-string\n                               :displaying-suggestion? true))))\n\n(defn- clear-suggestions\n  [state]\n  (-> state\n      (dissoc :suggestions :suggestion-active-index)))\n\n(defn- activate-suggestion-by-index\n  \"Make the suggestion at `index` the active suggestion\"\n  [{:as state :keys [suggestions]} index]\n  (let [suggestion (nth suggestions index)]\n    (cond-> state\n      :always (assoc :suggestion-active-index index)\n      (event-updates-model?       state :suggestion-activated) (update-model suggestion)\n      (event-displays-suggestion? state :suggestion-activated) (display-suggestion suggestion))))\n\n(defn- choose-suggestion-by-index\n  \"Choose the suggestion at `index`\"\n  [{:as state :keys [suggestions]} index]\n  (let [suggestion (nth suggestions index)]\n    (-> state\n        (activate-suggestion-by-index index)\n        (update-model suggestion)\n        (display-suggestion suggestion)\n        clear-suggestions)))\n\n(defn- choose-suggestion-active\n  [{:as state :keys [suggestion-active-index]}]\n  (cond-> state\n    suggestion-active-index (choose-suggestion-by-index suggestion-active-index)))\n\n(defn- wrap [index count] (mod (+ count index) count))\n\n(defn- activate-suggestion-next\n  [{:as state :keys [suggestions suggestion-active-index]}]\n  (cond-> state\n    (seq suggestions)\n    (activate-suggestion-by-index (-> suggestion-active-index (or -1) inc (wrap (count suggestions))))))\n\n(defn- activate-suggestion-prev\n  [{:as state :keys [suggestions suggestion-active-index]}]\n  (cond-> state\n    (seq suggestions)\n    (activate-suggestion-by-index (-> suggestion-active-index (or 0) dec (wrap (count suggestions))))))\n\n(defn- reset-typeahead\n  [state]\n  (cond-> state\n    :always clear-suggestions\n    :always (assoc :waiting? false :input-text \"\" :displaying-suggestion? false)\n    (event-updates-model? state :input-text-changed) (update-model nil)))\n\n(defn- got-suggestions\n  \"Update state when new suggestions are available\"\n  [state suggestions]\n  (-> state\n      (assoc :suggestions suggestions\n             :waiting? false\n             :suggestion-active-index nil)))\n\n(defn- input-text-will-blur\n  \"Update state when the `input-text` is about to lose focus.\"\n  [{:keys [input-text displaying-suggestion? model] :as state}]\n  (cond\n    (and (not displaying-suggestion?)\n         (event-updates-model? state :input-text-blurred))\n    (update-model state input-text)\n    :else (-> state\n              ;; if nothing was actually selected, then view should be the unchanged value\n              (assoc :input-text input-text)\n              clear-suggestions)))\n\n(defn- change-data-source\n  \"Update `state` given a new `data-source`. Resets the typeahead since any existing suggestions\n  came from the old `data-source`.\"\n  [state data-source]\n  (-> state\n      reset-typeahead\n      (assoc :data-source data-source)))\n\n(defn- external-model-changed\n  \"Update state when the external model value has changed.\"\n  [state new-value]\n  (-> state\n      (update-model new-value)\n      (display-suggestion new-value)\n      (assoc :external-model new-value)\n      clear-suggestions))\n\n;; ------------------------------------------------------------------------------------\n;; Functions with side-effects\n;; ------------------------------------------------------------------------------------\n\n(defn- search-data-source!\n  \"Call the `data-source` fn with `text`, and then call `got-suggestions` with the result\n  (asynchronously, if `data-source` does not return a truthy value).\"\n  [data-source state-atom text]\n  (if-let [return-value (data-source text #(swap! state-atom got-suggestions %1))]\n    (swap! state-atom got-suggestions return-value)\n    (swap! state-atom assoc :waiting? true)))\n\n(defn- search-data-source-loop!\n  \"For every value arriving on the `c-search` channel, call `search-data-source!`.\"\n  [state-atom c-search]\n  (go-loop []\n    (let [new-text (<! c-search)\n          data-source (:data-source @state-atom)]\n      (if (= \"\" new-text)\n        (do\n          (swap! state-atom reset-typeahead)\n          (search-data-source! data-source state-atom \"\"))\n        (search-data-source! data-source state-atom new-text))\n      (recur))))\n\n(defn- input-text-on-change!\n  \"Update state in response to `input-text` `on-change`, and put text on the `c-input` channel\"\n  [state-atom new-text]\n  (let [{:as state :keys [input-text c-input]} @state-atom]\n    (if (= new-text input-text) state ;; keypresses that do not change the value still call on-change, ignore these\n        (do\n          (put! c-input new-text)\n          (swap! state-atom\n                 #(cond-> %\n                    :always (assoc :input-text new-text :displaying-suggestion? false)\n                    (event-updates-model? state :input-text-changed) (update-model new-text)))))))\n\n(defn- input-text-on-key-down!\n  [state-atom event]\n  (condp = (.-which event)\n    goog.events.KeyCodes.UP     (swap! state-atom activate-suggestion-prev)\n    goog.events.KeyCodes.DOWN   (swap! state-atom activate-suggestion-next)\n    goog.events.KeyCodes.ENTER  (swap! state-atom choose-suggestion-active)\n    goog.events.KeyCodes.ESC    (swap! state-atom got-suggestions [])\n    ;; tab requires special treatment\n    ;; trap it IFF there are suggestions, otherwise let the input defocus\n    goog.events.KeyCodes.TAB\n    (if (not-empty (:suggestions @state-atom))\n      (do (swap! state-atom activate-suggestion-next)\n          (.preventDefault event))\n      (swap! state-atom input-text-will-blur))\n    true))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: typeahead\n;; ------------------------------------------------------------------------------------\n\n(def typeahead-args-desc\n  [{:name :data-source             :required true                   :type \"fn\"                   :validate-fn fn?                :description [:span [:code \":data-source\"] \" supplies suggestion objects. This can either accept a single string argument (the search term), or a string and a callback. For the first case, the fn should return a collection of suggestion objects (which can be anything). For the second case, the fn should return \"[:code \"nil\" ]\", and eventually result in a call to the callback with a collection of suggestion objects.\"]}\n   {:name :on-change               :required false :default nil     :type \"string -> nil\"        :validate-fn fn?                :description [:span [:code \":change-on-blur?\"] \" controls when it is called. It is passed a suggestion object.\"] }\n   {:name :change-on-blur?         :required false :default true    :type \"boolean | atom\"                                       :description [:span \"when true, invoke \" [:code \":on-change\"] \" when the user chooses a suggestion, otherwise invoke it on every change (navigating through suggestions with the mouse or keyboard, or if \"[:code \"rigid?\"]\" is also \"[:code \"false\" ]\", invoke it on every character typed.)\"] }\n   {:name :immediate-model-update? :required false :default false   :type \"boolean | atom\"                                       :description [:span \"update model with currently entered text on every keystroke (similar to \" [:code \":change-on-blur?\"] \" but no changes to model if mouse is over suggestions)\"]}\n   {:name :model                   :required false :default nil     :type \"object | atom\"                                        :description \"the initial value of the typeahead (should match the suggestion objects returned by \" [:code \":data-source\"] \").\"}\n   {:name :debounce-delay          :required false :default 250     :type \"integer\"              :validate-fn integer?           :description [:span \"after receiving input, the typeahead will wait this many milliseconds without receiving new input before calling \" [:code \":data-source\"] \".\"]}\n   {:name :render-suggestion       :required false                  :type \"render fn\"            :validate-fn fn?                :description \"override the rendering of the suggestion items by passing a fn that returns hiccup forms. The fn will receive two arguments: the search term, and the suggestion object.\"}\n   {:name :suggestion-to-string    :required false                  :type \"suggestion -> string\" :validate-fn fn?                :description \"when a suggestion is chosen, the input-text value will be set to the result of calling this fn with the suggestion object.\"}\n   {:name :rigid?                  :required false :default true    :type \"boolean | atom\"                                       :description [:span \"If \"[:code \"false\"]\" the user will be allowed to choose arbitrary text input rather than a suggestion from \" [:code \":data-source\"]\". In this case, a string will be supplied in lieu of a suggestion object.\" ]}\n\n   ;; the rest of the arguments are forwarded to the wrapped `input-text`\n   {:name :status                  :required false                  :type \"keyword\"              :validate-fn input-status-type? :description [:span \"validation status. \" [:code \"nil/omitted\"] \" for normal status or one of: \" input-status-types-list]}\n   {:name :status-icon?            :required false :default false   :type \"boolean\"                                              :description [:span \"when true, display an icon to match \" [:code \":status\"] \" (no icon for nil)\"]}\n   {:name :status-tooltip          :required false                  :type \"string\"               :validate-fn string?            :description \"displayed in status icon's tooltip\"}\n   {:name :placeholder             :required false                  :type \"string\"               :validate-fn string?            :description \"background text shown when empty\"}\n   {:name :width                   :required false :default \"250px\" :type \"string\"               :validate-fn string?            :description \"standard CSS width setting for this input\"}\n   {:name :height                  :required false                  :type \"string\"               :validate-fn string?            :description \"standard CSS height setting for this input\"}\n   {:name :disabled?               :required false :default false   :type \"boolean | atom\"                                       :description \"if true, the user can't interact (input anything)\"}\n   {:name :class                   :required false                  :type \"string\"               :validate-fn string?            :description \"CSS class names, space separated (applies to the textbox)\"}\n   {:name :style                   :required false                  :type \"CSS style map\"        :validate-fn css-style?         :description \"CSS styles to add or override (applies to the textbox)\"}\n   {:name :attr                    :required false                  :type \"HTML attr map\"        :validate-fn html-attr?         :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to \" [:span.bold \"the outer container\"] \", rather than the textbox)\"]}])\n\n(defn typeahead\n  \"typeahead reagent component\"\n  [& {:keys [] :as args}]\n  {:pre [(validate-args-macro typeahead-args-desc args \"typeahead\")]}\n  (let [{:as state :keys [c-search c-input]} (make-typeahead-state args)\n        state-atom (reagent/atom state)\n        input-text-model (reagent/cursor state-atom [:input-text])]\n    (search-data-source-loop! state-atom c-search)\n    (fn\n      [& {:as   args\n          :keys [data-source _on-change _change-on-blur? _immediate-model-update? model _debounce-delay render-suggestion _suggestion-to-string _rigid?\n                 ;; forwarded to wrapped `input-text`:\n                 status status-icon? status-tooltip placeholder width height disabled? class style attr]}]\n      {:pre [(validate-args-macro typeahead-args-desc args \"typeahead\")]}\n      (let [{:as state :keys [suggestions waiting? suggestion-active-index external-model]} @state-atom\n            last-data-source (:data-source state)\n            latest-external-model (deref-or-value model)\n            width (or width \"250px\")]\n        (when (not= last-data-source data-source)\n          (swap! state-atom change-data-source data-source))\n        (when (not= latest-external-model external-model)\n          (swap! state-atom external-model-changed latest-external-model))\n        [v-box\n         :class    \"rc-typeahead\"\n         :attr     attr\n         :width    width\n         :children [[input-text\n                     :model          input-text-model\n                     :class          class\n                     :style          style\n                     :disabled?      disabled?\n                     :status-icon?   status-icon?\n                     :status         status\n                     :status-tooltip status-tooltip\n                     :width          width\n                     :height         height\n                     :placeholder    placeholder\n                     :on-change      (partial input-text-on-change! state-atom)\n                     :change-on-blur? false\n                     :attr {:on-key-down (partial input-text-on-key-down! state-atom)\n                            :on-focus #()\n                            ;; on-blur should behave the same as tabbing off\n                            :on-blur #(swap! state-atom input-text-will-blur)}]\n                    (if (or (not-empty suggestions) waiting?)\n                      [box\n                       :style {:position \"relative\"}\n                       :child [v-box\n                               :class \"rc-typeahead-suggestions-container\"\n                               :children [(when waiting?\n                                            [box\n                                             :align :center\n                                             :child [throbber :size :small :class \"rc-typeahead-throbber\"]])\n                                          (for [[i s] (map vector (range) suggestions)\n                                                :let [selected? (= suggestion-active-index i)]]\n                                            ^{:key i}\n                                            [box\n                                             :child (if render-suggestion\n                                                      (render-suggestion s)\n                                                      s)\n                                             :class (str \"rc-typeahead-suggestion\"\n                                                         (when selected? \" active\"))\n                                             :attr {:on-mouse-over #(swap! state-atom activate-suggestion-by-index i)\n                                                    :on-mouse-down #(do (.preventDefault %) (swap! state-atom choose-suggestion-by-index i))}])]]])]]))))\n\n(defn- debounce\n  \"Return a channel which will receive a value from the `in` channel only\n  if no further value is received on the `in` channel in the next `ms` milliseconds.\"\n  [in ms]\n  (let [out (chan)]\n    (go-loop [last-val nil]\n      (let [val (if (nil? last-val) (<! in) last-val)\n            timer (timeout ms)]\n        (let [v (alt!\n                  in ([val _] val)\n                  timer (do (>! out val) nil))]\n          (recur v))))\n    out))\n"]}