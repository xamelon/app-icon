{"version":3,"sources":["re_com/misc.cljs"],"mappings":"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","names":["re-com.misc/throbber-args-desc","re-com.validate/throbber-size?","re-com.validate/throbber-sizes-list","cljs.core/string?","re-com.validate/css-style?","re-com.validate/html-attr?","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-com.misc/throbber","p__63145","map__63146","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/Error","seq63144","self__4724__auto__","cljs.core/seq","size","color","class","style","attr","args","js/goog.DEBUG","re_com.validate.validate_args","re-com.validate/extract-arg-data","seg","re-com.box/box","cljs.core.merge","G__63149","cljs.core/Keyword","re-com.misc/input-text-args-desc","re-com.validate/nillable-string-or-atom?","cljs.core/fn?","re-com.validate/input-status-type?","re-com.validate/input-status-types-list","re-com.validate/number-or-string?","re-com.validate/regex?","cljs.core/keyword?","re-com.misc/input-text-base","p__63151","map__63152","seq63150","model","input-type","external-model","reagent.core.atom","re-com.util/deref-or-value","internal-model","cljs.core/deref","p__63156","map__63157","on-change","status","status-icon?","status-tooltip","placeholder","width","height","rows","change-on-blur?","validation-regex","disabled?","latest-ext-model","showing?","cljs.core.not_EQ_","cljs.core/reset!","re-com.box/h-box","G__63164","and__4115__auto__","re-com.box/flex-child-style","cljs.core._EQ_","G__63180","or__4126__auto__","event","new-val","cljs.core/not","cljs.core/re-find","G__63197","G__63176","G__63183","G__63191","icon-class","G__63198","re-com.popover/popover-tooltip","re-com.box/align-style","re-com.misc/input-text","seq63204","re-com.misc/input-password","seq63207","re-com.misc/input-textarea","seq63220","re-com.misc/checkbox-args-desc","re-com.validate/string-or-hiccup?","re-com.misc/checkbox","p__63228","map__63229","seq63227","label","label-class","label-style","cursor","callback-fn","G__63231","cljs.core/boolean","re-com.misc/radio-button-args-desc","re-com.misc/radio-button","p__63240","map__63241","seq63239","value","re-com.misc/slider-args-desc","re-com.misc/slider","p__63256","map__63258","seq63254","min","max","step","G__63265","js/Number","re-com.misc/progress-bar-args-desc","re-com.misc/progress-bar","p__63279","map__63282","seq63275","striped?","bar-class"],"sourcesContent":["(ns re-com.misc\n  (:require-macros [re-com.core :refer [handler-fn]])\n  (:require [re-com.util     :refer [deref-or-value px]]\n            [re-com.popover  :refer [popover-tooltip]]\n            [re-com.box      :refer [h-box v-box box gap line flex-child-style align-style]]\n            [re-com.validate :refer [input-status-type? input-status-types-list regex? string-or-hiccup? css-style? html-attr?\n                                     number-or-string? string-or-atom? nillable-string-or-atom? throbber-size? throbber-sizes-list] :refer-macros [validate-args-macro]]\n            [reagent.core    :as    reagent]))\n\n;; ------------------------------------------------------------------------------------\n;;  Component: throbber\n;; ------------------------------------------------------------------------------------\n\n(def throbber-args-desc\n  [{:name :size  :required false :default :regular :type \"keyword\"       :validate-fn throbber-size? :description [:span \"one of \" throbber-sizes-list]}\n   {:name :color :required false :default \"#999\"   :type \"string\"        :validate-fn string?        :description \"CSS color\"}\n   {:name :class :required false                   :type \"string\"        :validate-fn string?        :description \"CSS class names, space separated (applies to the throbber, not the wrapping div)\"}\n   {:name :style :required false                   :type \"CSS style map\" :validate-fn css-style?     :description \"CSS styles to add or override (applies to the throbber, not the wrapping div)\"}\n   {:name :attr  :required false                   :type \"HTML attr map\" :validate-fn html-attr?     :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the throbber, not the wrapping div)\"]}])\n\n(defn throbber\n  \"Render an animated throbber using CSS\"\n  [& {:keys [size color class style attr] :as args}]\n  {:pre [(validate-args-macro throbber-args-desc args \"throbber\")]}\n  (let [seg (fn [] [:li (when color {:style {:background-color color}})])]\n    [box\n     :class \"rc-throbber-wrapper\"\n     :align :start\n     :child [:ul\n             (merge {:class (str \"rc-throbber loader \"\n                                 (case size :regular \"\"\n                                            :smaller \"smaller \"\n                                            :small \"small \"\n                                            :large \"large \"\n                                            \"\")\n                                 class)\n                     :style style}\n                    attr)\n             [seg] [seg] [seg] [seg]\n             [seg] [seg] [seg] [seg]]])) ;; Each :li element in [seg] represents one of the eight circles in the throbber\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: input-text\n;; ------------------------------------------------------------------------------------\n\n(def input-text-args-desc\n  [{:name :model            :required true                   :type \"string/nil | atom\" :validate-fn nillable-string-or-atom? :description \"text of the input (can be atom or value/nil)\"}\n   {:name :on-change        :required true                   :type \"string -> nil\"     :validate-fn fn?                      :description [:span [:code \":change-on-blur?\"] \" controls when it is called. Passed the current input string\"] }\n   {:name :status           :required false                  :type \"keyword\"           :validate-fn input-status-type?       :description [:span \"validation status. \" [:code \"nil/omitted\"] \" for normal status or one of: \" input-status-types-list]}\n   {:name :status-icon?     :required false :default false   :type \"boolean\"                                                 :description [:span \"when true, display an icon to match \" [:code \":status\"] \" (no icon for nil)\"]}\n   {:name :status-tooltip   :required false                  :type \"string\"            :validate-fn string?                  :description \"displayed in status icon's tooltip\"}\n   {:name :placeholder      :required false                  :type \"string\"            :validate-fn string?                  :description \"background text shown when empty\"}\n   {:name :width            :required false :default \"250px\" :type \"string\"            :validate-fn string?                  :description \"standard CSS width setting for this input\"}\n   {:name :height           :required false                  :type \"string\"            :validate-fn string?                  :description \"standard CSS height setting for this input\"}\n   {:name :rows             :required false :default 3       :type \"integer | string\"  :validate-fn number-or-string?        :description \"ONLY applies to 'input-textarea': the number of rows of text to show\"}\n   {:name :change-on-blur?  :required false :default true    :type \"boolean | atom\"                                          :description [:span \"when true, invoke \" [:code \":on-change\"] \" function on blur, otherwise on every change (character by character)\"] }\n   {:name :validation-regex :required false                  :type \"regex\"             :validate-fn regex?                   :description \"user input is only accepted if it would result in a string that matches this regular expression\"}\n   {:name :disabled?        :required false :default false   :type \"boolean | atom\"                                          :description \"if true, the user can't interact (input anything)\"}\n   {:name :class            :required false                  :type \"string\"            :validate-fn string?                  :description \"CSS class names, space separated (applies to the textbox, not the wrapping div)\"}\n   {:name :style            :required false                  :type \"CSS style map\"     :validate-fn css-style?               :description \"CSS styles to add or override (applies to the textbox, not the wrapping div)\"}\n   {:name :attr             :required false                  :type \"HTML attr map\"     :validate-fn html-attr?               :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the textbox, not the wrapping div)\"]}\n   {:name :input-type       :required false                  :type \"keyword\"           :validate-fn keyword?                 :description [:span \"ONLY applies to super function 'base-input-text': either \" [:code \":input\"] \", \" [:code \":password\"] \" or \" [:code \":textarea\"]]}])\n\n;; Sample regex's:\n;;  - #\"^(-{0,1})(\\d*)$\"                   ;; Signed integer\n;;  - #\"^(\\d{0,2})$|^(\\d{0,2}\\.\\d{0,1})$\"  ;; Specific numeric value ##.#\n;;  - #\"^.{0,8}$\"                          ;; 8 chars max\n;;  - #\"^[0-9a-fA-F]*$\"                    ;; Hex number\n;;  - #\"^(\\d{0,2})()()$|^(\\d{0,1})(:{0,1})(\\d{0,2})$|^(\\d{0,2})(:{0,1})(\\d{0,2})$\" ;; Time input\n\n(defn- input-text-base\n  \"Returns markup for a basic text input label\"\n  [& {:keys [model input-type] :as args}]\n  {:pre [(validate-args-macro input-text-args-desc args \"input-text\")]}\n  (let [external-model (reagent/atom (deref-or-value model))  ;; Holds the last known external value of model, to detect external model changes\n        internal-model (reagent/atom (if (nil? @external-model) \"\" @external-model))] ;; Create a new atom from the model to be used internally (avoid nil)\n    (fn\n      [& {:keys [model on-change status status-icon? status-tooltip placeholder width height rows change-on-blur? validation-regex disabled? class style attr]\n          :or   {change-on-blur? true}\n          :as   args}]\n      {:pre [(validate-args-macro input-text-args-desc args \"input-text\")]}\n      (let [latest-ext-model (deref-or-value model)\n            disabled?        (deref-or-value disabled?)\n            change-on-blur?  (deref-or-value change-on-blur?)\n            showing?         (reagent/atom false)]\n        (when (not= @external-model latest-ext-model) ;; Has model changed externally?\n          (reset! external-model latest-ext-model)\n          (reset! internal-model latest-ext-model))\n        [h-box\n         :class    \"rc-input-text \"\n         :align    :start\n         :width    (if width width \"250px\")\n         :children [[:div\n                     {:class (str \"rc-input-text-inner \"          ;; form-group\n                                  (case status\n                                    :success \"has-success \"\n                                    :warning \"has-warning \"\n                                    :error \"has-error \"\n                                    \"\")\n                                  (when (and status status-icon?) \"has-feedback\"))\n                      :style (flex-child-style \"auto\")}\n                     [(if (= input-type :password) :input input-type)\n                      (merge\n                        {:class       (str \"form-control \" class)\n                         :type        (case input-type\n                                        :input \"text\"\n                                        :password \"password\"\n                                        nil)\n                         :rows        (when (= input-type :textarea) (or rows 3))\n                         :style       (merge\n                                        (flex-child-style \"none\")\n                                        {:height        height\n                                         :padding-right \"12px\"} ;; override for when icon exists\n                                        style)\n                         :placeholder placeholder\n                         :value       @internal-model\n                         :disabled    disabled?\n                         :on-change   (handler-fn\n                                        (let [new-val (-> event .-target .-value)]\n                                          (when (and\n                                                  on-change\n                                                  (not disabled?)\n                                                  (if validation-regex (re-find validation-regex new-val) true))\n                                            (reset! internal-model new-val)\n                                            (when-not change-on-blur?\n                                              (reset! external-model @internal-model)\n                                              (on-change @internal-model)))))\n                         :on-blur     (handler-fn\n                                        (when (and\n                                                on-change\n                                                change-on-blur?\n                                                (not= @internal-model @external-model))\n                                          (reset! external-model @internal-model)\n                                          (on-change @internal-model)))\n                         :on-key-up   (handler-fn\n                                        (if disabled?\n                                          (.preventDefault event)\n                                          (case (.-which event)\n                                            13 (when on-change\n                                                 (reset! external-model @internal-model)\n                                                 (on-change @internal-model))\n                                            27 (reset! internal-model @external-model)\n                                            true)))}\n                        attr)]]\n                    (when (and status-icon? status)\n                      (let [icon-class (case status :success \"zmdi-check-circle\" :warning \"zmdi-alert-triangle\" :error \"zmdi-alert-circle zmdi-spinner\" :validating \"zmdi-hc-spin zmdi-rotate-right zmdi-spinner\")]\n                        (if status-tooltip\n                         [popover-tooltip\n                          :label status-tooltip\n                          :position :right-center\n                          :status status\n                          ;:width    \"200px\"\n                          :showing? showing?\n                          :anchor (if (= :validating status)\n                                    [throbber\n                                     :size  :regular\n                                     :class \"smaller\"\n                                     :attr  {:on-mouse-over (handler-fn (when (and status-icon? status) (reset! showing? true)))\n                                             :on-mouse-out  (handler-fn (reset! showing? false))}]\n                                    [:i {:class         (str \"zmdi zmdi-hc-fw \" icon-class \" form-control-feedback\")\n                                         :style         {:position \"static\"\n                                                         :height   \"auto\"\n                                                         :opacity  (if (and status-icon? status) \"1\" \"0\")}\n                                         :on-mouse-over (handler-fn (when (and status-icon? status) (reset! showing? true)))\n                                         :on-mouse-out  (handler-fn (reset! showing? false))}])\n                          :style (merge (flex-child-style \"none\")\n                                        (align-style :align-self :center)\n                                        {:font-size   \"130%\"\n                                         :margin-left \"4px\"})]\n                         (if (= :validating status)\n                           [throbber :size :regular :class \"smaller\"]\n                           [:i {:class (str \"zmdi zmdi-hc-fw \" icon-class \" form-control-feedback\")\n                                :style (merge (flex-child-style \"none\")\n                                              (align-style :align-self :center)\n                                              {:position    \"static\"\n                                               :font-size   \"130%\"\n                                               :margin-left \"4px\"\n                                               :opacity     (if (and status-icon? status) \"1\" \"0\")\n                                               :height      \"auto\"})\n                                :title status-tooltip}]))))]]))))\n\n\n(defn input-text\n  [& args]\n  (apply input-text-base :input-type :input args))\n\n\n(defn input-password\n  [& args]\n  (apply input-text-base :input-type :password args))\n\n\n(defn input-textarea\n  [& args]\n  (apply input-text-base :input-type :textarea args))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: checkbox\n;; ------------------------------------------------------------------------------------\n\n(def checkbox-args-desc\n  [{:name :model       :required true                 :type \"boolean | atom\"                                  :description \"holds state of the checkbox when it is called\"}\n   {:name :on-change   :required true                 :type \"boolean -> nil\"   :validate-fn fn?               :description \"called when the checkbox is clicked. Passed the new value of the checkbox\"}\n   {:name :label       :required false                :type \"string | hiccup\"  :validate-fn string-or-hiccup? :description \"the label shown to the right\"}\n   {:name :disabled?   :required false :default false :type \"boolean | atom\"                                  :description \"if true, user interaction is disabled\"}\n   {:name :label-class :required false                :type \"string\"           :validate-fn string?           :description \"CSS class names (applies to the label)\"}\n   {:name :label-style :required false                :type \"CSS style map\"    :validate-fn css-style?        :description \"CSS style map (applies to the label)\"}\n   {:name :class       :required false                :type \"string\"           :validate-fn string?           :description \"CSS class names, space separated (applies to the checkbox, not the wrapping div)\"}\n   {:name :style       :required false                :type \"CSS style map\"    :validate-fn css-style?        :description \"CSS style map (applies to the checkbox, not the wrapping div)\"}\n   {:name :attr        :required false                :type \"HTML attr map\"    :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the checkbox, not the wrapping div)\"]}])\n\n;; TODO: when disabled?, should the text appear \"disabled\".\n(defn checkbox\n  \"I return the markup for a checkbox, with an optional RHS label\"\n  [& {:keys [model on-change label disabled? label-class label-style class style attr]\n      :as   args}]\n  {:pre [(validate-args-macro checkbox-args-desc args \"checkbox\")]}\n  (let [cursor      \"default\"\n        model       (deref-or-value model)\n        disabled?   (deref-or-value disabled?)\n        callback-fn #(when (and on-change (not disabled?))\n                      (on-change (not model)))]  ;; call on-change with either true or false\n    [h-box\n     :class    \"rc-checkbox-wrapper noselect\"\n     :align    :start\n     :children [[:input\n                 (merge\n                   {:class     (str \"rc-checkbox \" class)\n                    :type      \"checkbox\"\n                    :style     (merge (flex-child-style \"none\")\n                                      {:cursor cursor}\n                                      style)\n                    :disabled  disabled?\n                    :checked   (boolean model)\n                    :on-change (handler-fn (callback-fn))}\n                   attr)]\n                (when label\n                  [:span\n                   {:class    label-class\n                    :style    (merge (flex-child-style \"none\")\n                                     {:padding-left \"8px\"\n                                      :cursor       cursor}\n                                     label-style)\n                    :on-click (handler-fn (callback-fn))}\n                   label])]]))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: radio-button\n;; ------------------------------------------------------------------------------------\n\n(def radio-button-args-desc\n  [{:name :model       :required true                 :type \"anything | atom\"                                 :description [:span \"selected value of the radio button group. See also \" [:code \":value\"]] }\n   {:name :value       :required false                :type \"anything\"                                        :description [:span \"if \" [:code \":model\"]  \" equals \" [:code \":value\"] \" then this radio button is selected\"] }\n   {:name :on-change   :required true                 :type \"anything -> nil\"  :validate-fn fn?               :description [:span \"called when the radio button is clicked. Passed \" [:code \":value\"]]}\n   {:name :label       :required false                :type \"string | hiccup\"  :validate-fn string-or-hiccup? :description \"the label shown to the right\"}\n   {:name :disabled?   :required false :default false :type \"boolean | atom\"                                  :description \"if true, the user can't click the radio button\"}\n   {:name :label-class :required false                :type \"string\"           :validate-fn string?           :description \"CSS class names (applies to the label)\"}\n   {:name :label-style :required false                :type \"CSS style map\"    :validate-fn css-style?        :description \"CSS style map (applies to the label)\"}\n   {:name :class       :required false                :type \"string\"           :validate-fn string?           :description \"CSS class names, space separated (applies to the radio-button, not the wrapping div)\"}\n   {:name :style       :required false                :type \"CSS style map\"    :validate-fn css-style?        :description \"CSS style map (applies to the radio-button, not the wrapping div)\"}\n   {:name :attr        :required false                :type \"HTML attr map\"    :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the radio-button, not the wrapping div)\"]}])\n\n(defn radio-button\n  \"I return the markup for a radio button, with an optional RHS label\"\n  [& {:keys [model value on-change label disabled? label-class label-style class style attr]\n      :as   args}]\n  {:pre [(validate-args-macro radio-button-args-desc args \"radio-button\")]}\n  (let [cursor      \"default\"\n        model       (deref-or-value model)\n        disabled?   (deref-or-value disabled?)\n        callback-fn #(when (and on-change (not disabled?))\n                      (on-change value))]  ;; call on-change with the :value arg\n    [h-box\n     :class    \"rc-radio-button-wrapper noselect\"\n     :align    :start\n     :children [[:input\n                 (merge\n                   {:class     (str \"rc-radio-button \" class)\n                    :style     (merge\n                                 (flex-child-style \"none\")\n                                 {:cursor cursor}\n                                 style)\n                    :type      \"radio\"\n                    :disabled  disabled?\n                    :checked   (= model value)\n                    :on-change (handler-fn (callback-fn))}\n                   attr)]\n                (when label\n                  [:span\n                   {:class    label-class\n                    :style    (merge (flex-child-style \"none\")\n                                     {:padding-left \"8px\"\n                                      :cursor       cursor}\n                                     label-style)\n                    :on-click (handler-fn (callback-fn))}\n                   label])]]))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: slider\n;; ------------------------------------------------------------------------------------\n\n(def slider-args-desc\n  [{:name :model     :required true                   :type \"double | string | atom\" :validate-fn number-or-string? :description \"current value of the slider\"}\n   {:name :on-change :required true                   :type \"double -> nil\"          :validate-fn fn?               :description \"called when the slider is moved. Passed the new value of the slider\"}\n   {:name :min       :required false :default 0       :type \"double | string | atom\" :validate-fn number-or-string? :description \"the minimum value of the slider\"}\n   {:name :max       :required false :default 100     :type \"double | string | atom\" :validate-fn number-or-string? :description \"the maximum value of the slider\"}\n   {:name :step      :required false :default 1       :type \"double | string | atom\" :validate-fn number-or-string? :description \"step value between min and max\"}\n   {:name :width     :required false :default \"400px\" :type \"string\"                 :validate-fn string?           :description \"standard CSS width setting for the slider\"}\n   {:name :disabled? :required false :default false   :type \"boolean | atom\"                                        :description \"if true, the user can't change the slider\"}\n   {:name :class     :required false                  :type \"string\"                 :validate-fn string?           :description \"CSS class names, space separated (applies to the slider, not the wrapping div)\"}\n   {:name :style     :required false                  :type \"CSS style map\"          :validate-fn css-style?        :description \"CSS styles to add or override (applies to the slider, not the wrapping div)\"}\n   {:name :attr      :required false                  :type \"HTML attr map\"          :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the slider, not the wrapping div)\"]}])\n\n(defn slider\n  \"Returns markup for an HTML5 slider input\"\n  [& {:keys [model min max step width on-change disabled? class style attr]\n      :or   {min 0 max 100}\n      :as   args}]\n  {:pre [(validate-args-macro slider-args-desc args \"slider\")]}\n  (let [model     (deref-or-value model)\n        min       (deref-or-value min)\n        max       (deref-or-value max)\n        step      (deref-or-value step)\n        disabled? (deref-or-value disabled?)]\n    [box\n     :class \"rc-slider-wrapper\"\n     :align :start\n     :child [:input\n             (merge\n               {:class     (str \"rc-slider \" class)\n                :type      \"range\"\n                ;:orient    \"vertical\" ;; Make Firefox slider vertical (doesn't work because React ignores it, I think)\n                :style     (merge\n                             (flex-child-style \"none\")\n                             {;:-webkit-appearance \"slider-vertical\"   ;; TODO: Make a :orientation (:horizontal/:vertical) option\n                              ;:writing-mode       \"bt-lr\"             ;; Make IE slider vertical\n                              :width  (or width \"400px\")\n                              :cursor (if disabled? \"not-allowed\" \"default\")}\n                             style)\n                :min       min\n                :max       max\n                :step      step\n                :value     model\n                :disabled  disabled?\n                :on-change (handler-fn (on-change (js/Number (-> event .-target .-value))))}\n               attr)]]))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: progress-bar\n;; ------------------------------------------------------------------------------------\n\n(def progress-bar-args-desc\n  [{:name :model     :required true                  :type \"double | string | atom\" :validate-fn number-or-string? :description \"current value of the slider. A number between 0 and 100\"}\n   {:name :width     :required false :default \"100%\" :type \"string\"                 :validate-fn string?           :description \"a CSS width\"}\n   {:name :striped?  :required false :default false  :type \"boolean\"                                               :description \"when true, the progress section is a set of animated stripes\"}\n   {:name :bar-class :required false                 :type \"string\"                 :validate-fn string?           :description \"CSS class name(s) for the actual progress bar itself, space separated\"}\n   {:name :class     :required false                 :type \"string\"                 :validate-fn string?           :description \"CSS class names, space separated (applies to the progress-bar, not the wrapping div)\"}\n   {:name :style     :required false                 :type \"CSS style map\"          :validate-fn css-style?        :description \"CSS styles to add or override (applies to the progress-bar, not the wrapping div)\"}\n   {:name :attr      :required false                 :type \"HTML attr map\"          :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the progress-bar, not the wrapping div)\"]}])\n\n(defn progress-bar\n  \"Render a bootstrap styled progress bar\"\n  [& {:keys [model width striped? class bar-class style attr]\n      :or   {width \"100%\"}\n      :as   args}]\n  {:pre [(validate-args-macro progress-bar-args-desc args \"progress-bar\")]}\n  (let [model (deref-or-value model)]\n    [box\n     :class \"rc-progress-bar-wrapper\"\n     :align :start\n     :child [:div\n             (merge\n               {:class (str \"rc-progress-bar progress \" class)\n                :style (merge (flex-child-style \"none\")\n                              {:width width}\n                              style)}\n               attr)\n             [:div\n              {:class (str \"progress-bar \" (when striped? \"progress-bar-striped active \") bar-class)\n               :role  \"progressbar\"\n               :style {:width      (str model \"%\")\n                       :transition \"none\"}}                 ;; Default BS transitions cause the progress bar to lag behind\n              (str model \"%\")]]]))\n"]}