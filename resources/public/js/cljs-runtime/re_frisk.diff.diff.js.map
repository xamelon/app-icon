{"version":3,"sources":["re_frisk/diff/diff.cljs"],"mappings":";AAQA,AAAA,AAEA,AAAA,AAAOA,AAASC;AAAhB,AACE,AAAI,AAACC,AAAKD;AACR,AAACE,AAAKF;;AACN,AAAA,AAAAG,AAAAC,AAACC;AAAD,AAAe,AAAU,AAAAD,AAAA;AAAV;;AAAA,AAAAD;;AAAwBH;;;AAE3C,AAAA,AAAOM,AAAWC,AAAEC;AAApB,AACE,AAAA,AAACC,AACK,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AAo7E2C,AAAA6B,AAAAlC;AAp7E3CM,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAA,AAAAK,AAAAN,AAAAK,AAAMU;AAAN,AAAA,AAAA,AAAAR,AAAAJ,AACE,AAAMe,AAAM,AAACC,AAAI5B,AAAEwB;AACbK,AAAM,AAACD,AAAI3B,AAAEuB;AADnB,AAEE,AACE,AAACM,AAAEH,AAAME;AADX;;AAAA,AAEE,AAAAE,AAAKJ;AAAL,AAAA,AAAAI;AAAWF;;AAAXE;;;AAFF,AAEqBP,AAAI,AAACQ,AAAAA,AAAAA,AAAKL,AAAAA,AAAME,AAAAA;;AAFrC,AAGEF;AAHF,AAAA,AAAA,AAGSH,AAAcG;;AAHvB,AAIEE;AAJF,AAISL,AAAIK;;AAJb;;;;;;;AAHJ,AAAA,AAAAf,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAhB;;AAAA,AAAAa,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAS,AAAAjB,AAAMoB;AAAN,AAAA,AAAAF,AACE,AAAMK,AAAM,AAACC,AAAI5B,AAAEwB;AACbK,AAAM,AAACD,AAAI3B,AAAEuB;AADnB,AAEE,AACE,AAACM,AAAEH,AAAME;AADX;;AAAA,AAEE,AAAAE,AAAKJ;AAAL,AAAA,AAAAI;AAAWF;;AAAXE;;;AAFF,AAEqBP,AAAI,AAACQ,AAAAA,AAAAA,AAAKL,AAAAA,AAAME,AAAAA;;AAFrC,AAGEF;AAHF,AAAA,AAAA,AAGSH,AAAcG;;AAHvB,AAIEE;AAJF,AAISL,AAAIK;;AAJb;;;;;AAHJ,AAAAV,AAAA,AAAAI,AAAAnB;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAD,AAAU,AAACsB,AAAU,AAACC,AAAI,AAAClC,AAAQQ,AAAI,AAAC0B,AAAI,AAAClC,AAAQS;;;AAS7D,AAAA,AAAOgC,AAAUjC,AAAEC;AAAnB,AAAA,AAAA,AAAA,AACY,AAACiC,AAAelC,AAAEC,AACpB,AAACiC,AAAejC,AAAED;;AAE5B,AAAA,AAAOmC,AAAWnC,AAAEC;AAApB,AAAA,AAAA,AAAA,AACWD,AAASC;;AAEpB,AAAA,AAAM+B,AAAMhC,AAAEC;AAAd,AACE,AACE,AAAC6B,AAAE9B,AAAEC;AADP;;AAAA,AAEE,AAAK,AAACP,AAAKM,AAAG,AAACN,AAAKO;AAAI,AAACF,AAAUC,AAAEC;;AAFvC,AAGE,AAAK,AAACmC,AAAQpC,AAAG,AAACoC,AAAQnC;AAAI,AAACF,AAAUC,AAAEC;;AAH7C,AAIE,AAAK,AAACoC,AAAKrC,AAAG,AAACqC,AAAKpC;AAAI,AAACgC,AAASjC,AAAEC;;AAJtC,AAKQ,AAACkC,AAAUnC,AAAEC","names":["re-frisk.diff.diff/mv-keys","coll","cljs.core/map?","cljs.core/keys","p1__65792#","p2__65791#","cljs.core.keep_indexed","re-frisk.diff.diff/diff-coll","a","b","cljs.core.into","iter__4529__auto__","s__65797","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__65799","cljs.core/chunk-buffer","i__65798","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__65796","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","key","clojure.set.union","cljs.core/set","val-a","cljs.core.get","val-b","cljs.core._EQ_","and__4115__auto__","re-frisk.diff.diff/diff","re-frisk.diff.diff/diff-set","clojure.set.difference","re-frisk.diff.diff/diff-rest","cljs.core/vector?","cljs.core/set?","cljs.core/chunk-first"],"sourcesContent":["(ns re-frisk.diff.diff\n  (:require [clojure.set :as set]))\n\n;; clojure.data/diff is hard to work with:\n;; (diff {:a [0 1 2]} {:a [0 1]}) => ({:a [nil nil 2]} nil {:a [0 1]})\n;; (data/diff {:a [2]} {:a [1]}) => ({:a [2]} {:a [1]} nil)\n;; ... so roll our own\n\n(declare diff)\n\n(defn- mv-keys [coll]\n  (if (map? coll)\n    (keys coll)\n    (keep-indexed #(when-not (nil? %2) %1) coll)))\n\n(defn- diff-coll [a b]\n  (into {}\n        (for [key (set/union (set (mv-keys a)) (set (mv-keys b)))]\n          (let [val-a (get a key)\n                val-b (get b key)]\n            (cond\n              (= val-a val-b) nil\n              (and val-a val-b) [key (diff val-a val-b)]\n              val-a [key {:deleted val-a}]\n              val-b [key val-b])))))\n\n(defn- diff-set [a b]\n  {:deleted (set/difference a b)\n   :added (set/difference b a)})\n\n(defn- diff-rest [a b]\n  {:before a :after b})\n\n(defn diff [a b]\n  (cond\n    (= a b) nil\n    (and (map? a) (map? b)) (diff-coll a b)\n    (and (vector? a) (vector? b)) (diff-coll a b)\n    (and (set? a) (set? b)) (diff-set a b)\n    :else (diff-rest a b)))"]}