{"version":3,"sources":["re_com/input_time.cljs"],"mappings":"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","names":["re-com.input-time/time->mins","time","cljs.core/rem","re-com.input-time/time->hrs","cljs.core/quot","re-com.input-time/to-int","s","val","js/parseInt","js/isNaN","p__63232","vec__63236","cljs.core.nth","re-com.input-time/triple->time","hr","_","mi","re-com.input-time/triple-seeking-re","re-com.input-time/extract-triple-from-text","text","cljs.core/re-matches","cljs.core/rest","cljs.core.filter","cljs.core.comp","cljs.core/not","cljs.core/nil?","re-com.input-time/text->time","cljs.core.map","re-com.input-time/time->text","hrs","mins","re-com.util/pad-zero-number","re-com.input-time/valid-text?","cljs.core._EQ_","cljs.core/count","re-com.input-time/valid-time?","re-com.input-time/validate-arg-times","model","minimum","maximum","js/Error","re-com.input-time/force-valid-time","min","max","previous","re-com.input-time/on-new-keypress","event","text-model","current-text","cljs.core/reset!","re-com.input-time/lose-focus-if-enter","ev","re-com.input-time/on-defocus","callback","previous-val","cljs.core/deref","and__4115__auto__","cljs.core.not_EQ_","re-com.input-time/input-time-args-desc","re-com.validate/number-or-string?","cljs.core/fn?","cljs.core/string?","re-com.validate/css-style?","re-com.validate/html-attr?","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-com.input-time/input-time","p__63273","map__63274","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq63268","self__4724__auto__","cljs.core/seq","args","js/goog.DEBUG","re_com.validate.validate_args","re-com.validate/extract-arg-data","re-com.util/deref-or-value","deref-model","reagent.core.atom","previous-model","p__63284","map__63285","on-change","disabled?","show-icon?","hide-border?","width","height","class","style","attr","cljs.core.merge","new-val","re-com.box/h-box"],"sourcesContent":["(ns re-com.input-time\n  (:require-macros [re-com.core :refer [handler-fn]])\n  (:require [reagent.core    :as    reagent]\n            [re-com.validate :refer [css-style? html-attr? number-or-string?] :refer-macros [validate-args-macro]]\n            [re-com.text     :refer [label]]\n            [re-com.box      :refer [h-box gap]]\n            [re-com.util     :refer [pad-zero-number deref-or-value]]))\n\n\n(defn- time->mins\n  [time]\n  (rem time 100))\n\n\n(defn- time->hrs\n  [time]\n  (quot time 100))\n\n(defn- to-int\n  \"Parse the string 's' to a valid int. On parse failure, return 0\"\n  [s]\n  (let [val (js/parseInt s)]\n    (if (js/isNaN val) 0 val)))\n\n(defn- triple->time\n  \"Return a time integer from a triple int vector of form  [H  _  M]\"\n  [[hr _ mi]]\n  (+ (* hr 100) mi))                                        ;; a four digit integer:  HHMM\n\n\n;; This regular expression matchs all valid forms of time entry, including partial\n;; forms which happen during user entry.\n;; It is composed of 3 'or' options, separated by '|',  and within each, is a sub-re which\n;; attempts to match the HH ':' MM parts.\n;; So any attempt to match against this re, using \"re-matches\" will return\n;; a vector of 10 items:\n;;   - the 1st item will be the entire string matched\n;;   - followed by 3 groups of 3.\n(def ^{:private true}\n  triple-seeking-re #\"^(\\d{0,2})()()$|^(\\d{0,1})(:{0,1})(\\d{0,2})$|^(\\d{0,2})(:{0,1})(\\d{0,2})$\")\n\n(defn- extract-triple-from-text\n  [text]\n  (->> text\n       (re-matches triple-seeking-re)                       ;; looks for different ways of matching triples   H : M\n       (rest)                                               ;; get rid of the first value. It is the entire matched string.\n       (filter (comp not nil?))))                           ;; of the 9 items, there should be only 3 non-nil matches coresponding to  H : M\n\n\n(defn text->time\n  \"return as a time int, the contents of 'text'\"\n  [text]\n  (->> text\n       extract-triple-from-text\n       (map to-int)                                         ;; make them ints (or 0)\n       triple->time))                                       ;; turn the triple of values into a single int\n\n\n(defn time->text\n  \"return a string of format HH:MM for 'time'\"\n  [time]\n  (let [hrs  (time->hrs  time)\n        mins (time->mins time)]\n    (str (pad-zero-number hrs 2) \":\" (pad-zero-number mins 2))))\n\n(defn valid-text?\n  \"Return true if text passes basic time validation.\n   Can't do to much validation because user input might not be finished.\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n   So we only really check against the triple-extracting regular expression\"\n  [text]\n  (= 3 (count (extract-triple-from-text text))))\n\n(defn valid-time?\n  [time]\n  (cond\n    (nil? time) false                                       ;; can't be nil\n    (> 0 time) false                                        ;; must be a poistive number\n    (< 60 (time->mins time)) false                          ;; too many mins\n    :else true))\n\n(defn- validate-arg-times\n  [model minimum maximum]\n  (assert (and (number? model) (valid-time? model)) (str \"[input-time] given an invalid :model - \" model))\n  (assert (and (number? minimum) (valid-time? minimum)) (str \"[input-time] given an invalid :minimum - \" minimum))\n  (assert (and (number? maximum) (valid-time? maximum)) (str \"[input-time] given an invalid :maximum - \" maximum))\n  (assert (<= minimum maximum) (str \"[input-time] :minimum \" minimum \" > :maximum  \" maximum))\n  true)\n\n(defn- force-valid-time\n  \"Validate the time supplied.\n   Return either the time or, if it is invalid, return something valid\"\n  [time min max previous]\n  (cond\n    (nil? time) previous\n    (not (valid-time? time)) previous\n    (< time min) min\n    (< max time) max\n    :else time))\n\n(defn- on-new-keypress\n  \"Called each time the <input> field gets a keypress, or paste operation.\n   Rests  the text-model only if the new text is valid\"\n  [event text-model]\n  (let [current-text (-> event .-target .-value)]           ;; gets the current input field text\n    (when (valid-text? current-text)\n      (reset! text-model current-text))))\n\n(defn- lose-focus-if-enter\n  \"When Enter is pressed, force the component to lose focus\"\n  [ev]\n  (when (= (.-keyCode ev) 13)\n    (-> ev .-target .blur)\n    true))\n\n(defn- on-defocus\n  \"Called when the field looses focus.\n   Re-validate what has been entered, comparing to mins and maxs.\n   Invoke the callback as necessary\"\n  [text-model min max callback previous-val]\n  (let [time (text->time @text-model)\n        time (force-valid-time time min max previous-val)]\n    (reset! text-model (time->text time))\n    (when (and callback (not= time previous-val))\n      (callback time))))\n\n(def input-time-args-desc\n  [{:name :model        :required true                   :type \"integer | string | atom\" :validate-fn number-or-string? :description \"a time in integer form. e.g. '09:30am' is 930\"}\n   {:name :on-change    :required true                   :type \"integer -> nil\"          :validate-fn fn?               :description \"called when user entry completes and value is new. Passed new value as integer\"}\n   {:name :minimum      :required false :default 0       :type \"integer | string\"        :validate-fn number-or-string? :description \"user can't enter a time less than this value\"}\n   {:name :maximum      :required false :default 2359    :type \"integer | string\"        :validate-fn number-or-string? :description \"user can't enter a time more than this value\"}\n   {:name :disabled?    :required false :default false   :type \"boolean | atom\"                                         :description \"when true, user input is disabled\"}\n   {:name :show-icon?   :required false :default false   :type \"boolean\"                                                :description \"when true, a clock icon will be displayed to the right of input field\"}\n   {:name :hide-border? :required false :default false   :type \"boolean\"                                                :description \"when true, input filed is displayed without a border\"}\n   {:name :width        :required false                  :type \"string\"                  :validate-fn string?           :description \"standard CSS width setting for width of the input box (excluding the icon if present)\"}\n   {:name :height       :required false                  :type \"string\"                  :validate-fn string?           :description \"standard CSS height setting\"}\n   {:name :class        :required false                  :type \"string\"                  :validate-fn string?           :description \"CSS class names, space separated (applies to the textbox, not the wrapping div)\"}\n   {:name :style        :required false                  :type \"CSS style map\"           :validate-fn css-style?        :description \"CSS style. e.g. {:color \\\"red\\\" :width \\\"50px\\\"} (applies to the textbox, not the wrapping div)\" }\n   {:name :attr         :required false                  :type \"HTML attr map\"           :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the textbox, not the wrapping div)\"]}])\n\n(defn input-time\n  \"I return the markup for an input box which will accept and validate times.\n   Parameters - refer input-time-args above\"\n  [& {:keys [model minimum maximum] :as args\n      :or   {minimum 0 maximum 2359}}]\n  {:pre [(validate-args-macro input-time-args-desc args \"input-time\")\n         (validate-arg-times (deref-or-value model) minimum maximum)]}\n  (let [deref-model    (deref-or-value model)\n        text-model     (reagent/atom (time->text deref-model))\n        previous-model (reagent/atom deref-model)]\n    (fn\n      [& {:keys [model on-change minimum maximum disabled? show-icon? hide-border? width height class style attr] :as args\n          :or   {minimum 0 maximum 2359}}]\n      {:pre [(validate-args-macro input-time-args-desc args \"input-time\")\n             (validate-arg-times (deref-or-value model) minimum maximum)]}\n      (let [style (merge (when hide-border? {:border \"none\"})\n                         style)\n            new-val (deref-or-value model)\n            new-val (if (< new-val minimum) minimum new-val)\n            new-val (if (> new-val maximum) maximum new-val)]\n        ;; if the model is different to that currently shown in text, then reset the text to match\n        ;; other than that we want to keep the current text, because the user is probably typing\n        (when (not= @previous-model new-val)\n          (reset! text-model (time->text new-val))\n          (reset! previous-model new-val))\n\n        [h-box\n         :class    \"rc-input-time\"\n         :style    {:height height}\n         :children [[:input\n                     (merge\n                       {:type      \"text\"\n                        :class     (str \"time-entry \" class)\n                        :style     (merge {:width width}\n                                          style)\n                        :value     @text-model\n                        :disabled  (deref-or-value disabled?)\n                        :on-change (handler-fn (on-new-keypress event text-model))\n                        :on-blur   (handler-fn (on-defocus text-model minimum maximum on-change @previous-model))\n                        :on-key-up (handler-fn (lose-focus-if-enter event))}\n                       attr)]\n                    (when show-icon?\n                      [:div.time-icon\n                       [:i.zmdi.zmdi-hc-fw-rc.zmdi-time\n                        {:style {:position \"static\" :margin \"auto\"}}]])]]))))\n"]}