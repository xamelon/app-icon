{"version":3,"sources":["stylo/rule.cljc"],"mappings":";AAGA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAUS;AAAVR,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAe;AAAKE,AAAIC;AAAT,AAAYD;;AAAPA;AAAIC;;;;AAAAA;;AAAJD,AAAIC;;;AAAJD;AAAIC;AAAJD,AAAIC;;;;;AAAxB,AAAAP,AAAAL,AAAAE,AAAAC,AAAAC;;;AAGA,AAAAM,AAAA,AAAA;AAEGC,AAAIE;AAFP,AAAA,AAAA,AAAA,AAAA,AAGQF,AAAE,AAACG,AAAOD;;AADfF;AAAIE;;;;AAAAA;;AAAJF,AAAIE;;;AAAJF;AAAIE;AAAJF,AAAIE;;;;;;AAIP,AAAA,AAAME,AACHC;AADH,AAIO,AAACG,AACC,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAME;AAAN,AAAAD,AAAAD,AAAA,AAAA,AAAeL;AAAf,AACE,AAAMQ,AAAM,AAACC,AAAOC,AAAM,AAACC,AAAIC,AAAOZ;AAChCa,AAAS,AAACJ,AAAOK,AAAO,AAAA,AAAAC,AAACJ;AAAD,AAAM,AAAA,AAAAI,AAACC;AAAUhB;AAD/C,AAEE,AAAAiB,AAAA,AAASV;AAATU,AAAA,AAAAA,AACE,AAACC,AAAIV,AAAO,AAAAS,AAACE,AAAKX;AADpB,AAAA,AAEE,AAACU,AAAIL;AAAU,AAAAI,AAACG,AAAKP;;AAFvBI;;AANNjB,AACA,AAACC,AAASC;;AAWjB,AAWA,AAAA,AAAMmB,AACHC;AADH,AAGO,AAAA,AAAAC,AAACC,AAMD,AAACzB;AAND,AACG,AACE,AAAK,AAAAwB,AAACE,AAAe,AAAAF,AAACG,AAAOD;AAD/BF;;AAAA,AAEE,AAAAA,AAACE;AAAe,AAAAF,AAACI,AAAMjC;;AAFzB,AAGE,AAAA6B,AAACK;AAHH,AAAA,AAAA,AAAAL;;AAAA,AAIQ,AAAAA,AAAC7B;;;;;AANZ4B","names":["js/stylo","js/stylo.rule","js/stylo.rule.rule","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__69152","cljs.core/MultiFn","cljs.core.symbol","stylo.rule/rule","k","_","types","cljs.core.pr_str","stylo.rule/merge-by-selector","exps","cljs.core/group-by","cljs.core/first","cljs.core.mapv","p__69154","vec__69155","cljs.core.nth","selector","style","cljs.core.reduce","cljs.core/merge","cljs.core.map","cljs.core/second","children","cljs.core/concat","p1__69153#","cljs.core.drop","G__69158","cljs.core/seq","cljs.core.conj","cljs.core.into","stylo.rule/join-rules","rules","p1__69163#","cljs.core.mapcat","cljs.core/sequential?","cljs.core/every?","cljs.core.apply","cljs.core/map?"],"sourcesContent":["(ns stylo.rule)\n\n\n(defmulti rule (fn [k & _] k) :default ::default)\n\n\n(defmethod rule\n  ::default\n  [k & types]\n  [[:& {k (pr-str types)}]])\n\n\n(defn merge-by-selector\n  [exps]\n  (->> exps\n       (group-by first)\n       (mapv\n         (fn [[selector exps]]\n           (let [style (reduce merge (map second exps))\n                 children (reduce concat (map #(drop 2 %) exps))]\n             (cond-> [selector]\n               (seq style) (conj style)\n               (seq children) (into children)))))))\n\n\n\n(comment\n  (-> [[:& {:color \"red\"}]\n       [:& {:background \"blue\"}]\n       [:&:hover {:display \"none\"}]\n       [:&:hover {} [:&:first {:display \"grid\"}]]\n       [:&:hover {} [:&:last {:display \"flex\"}]]\n       [:&:hover {:display \"none\"}]\n       [:&:disabled {} [:&:hover {:display \"block\"}]]]\n      (merge-by-selector)))\n\n\n(defn join-rules\n  [rules]\n  (->> rules\n       (mapcat\n         #(cond\n            (and (sequential? %) (every? sequential? %)) %\n            (sequential? %) (apply rule %)\n            (map? %) [[:& %]]\n            :else (rule %)))\n       (merge-by-selector)))\n"]}