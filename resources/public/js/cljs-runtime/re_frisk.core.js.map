{"version":3,"sources":["re_frisk/core.cljs"],"mappings":"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","names":["js/re-frisk","js/re-frisk.core","js/re-frisk.core.initialized","re-frisk.core/initialized","cljs.core.atom","js/re-frisk.core.prev-event","re-frisk.core/prev-event","js/re-frisk.core.re-frame-data","re-frisk.core/re-frame-data","reagent.core.atom","re-frisk.core/update-db-and-subs","cljs.core/deref","cljs.core/reset!","re-frame.subs/query->reaction","re-frame.db/app-db","re-frisk.core/trace-cb","traces","cljs.core.swap_BANG_","cljs.core/concat","re-frisk.trace/normalize-traces","cljs.core.map","re-frisk.trace/normalize-durations","re-frisk.utils/call-and-chill","re-frisk.core/post-event-callback","value","queue","app-db","indx","cljs.core/count","diff","re-frisk.diff.diff/diff","cljs.core/conj","re-frisk.utils/truncate-name","cljs.core/first","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-frisk.core/enable-re-frisk!","p__65970","vec__65972","cljs.core.nth","seq65969","self__4724__auto__","cljs.core/seq","opts","re-frisk.db/tool-state","cljs.core/assoc","re-frame.trace/is-trace-enabled?","re-frame.trace/register-trace-cb","cljs.core._EQ_","re_frame.core.add_post_event_callback","js/setTimeout","re-frisk.ui.views/mount-internal","re-frisk.core/enable","p__65976","vec__65977","seq65975","re_frisk.core.enable_re_frisk_BANG_"],"sourcesContent":["(ns re-frisk.core\n  (:require [re-frame.core :as re-frame]\n            [re-frame.db :as db]\n            [re-frame.subs :as subs]\n            [re-frisk.db :as data]\n            [re-frisk.ui.views :as ui.views]\n            [re-frisk.diff.diff :as diff]\n            [reagent.core :as reagent]\n            [re-frisk.utils :as utils]\n            [re-frame.trace]\n            [re-frisk.trace :as trace]))\n\n(defonce initialized (atom false))\n(defonce prev-event (atom {}))\n\n(defonce re-frame-data\n         {:app-db (reagent/atom \"not connected\")\n          :events (reagent/atom [])\n          :subs   (reagent/atom \"not connected\")})\n\n(defn update-db-and-subs []\n  (reset! (:subs re-frame-data) @subs/query->reaction)\n  (reset! (:app-db re-frame-data) @db/app-db))\n\n(defn trace-cb [traces]\n  (swap! (:events re-frame-data)\n         concat (->> traces\n                    (trace/normalize-traces)\n                    (map trace/normalize-durations)))\n  (utils/call-and-chill update-db-and-subs 500))\n\n(defn- post-event-callback [value queue]\n  (let [app-db @db/app-db\n        indx (count @(:events re-frame-data))\n        ;;This diff may be expensive\n        diff (diff/diff (:app-db @prev-event) app-db)]\n    (reset! prev-event {:app-db app-db})\n    (swap! (:events re-frame-data) conj {:event          value\n                                         :app-db-diff    diff\n                                         :indx           indx\n                                         :queue          queue\n                                         :truncated-name (utils/truncate-name (str (first value)))})\n    (utils/call-and-chill update-db-and-subs 500)))\n\n(defn enable-re-frisk! [& [opts]]\n  (when-not @initialized\n    (reset! initialized true)\n    (swap! data/tool-state assoc :opts opts)\n    (if (re-frame.trace/is-trace-enabled?)\n      (re-frame.trace/register-trace-cb :re-frisk-trace trace-cb)\n      (when-not (= (:events? opts) false)\n        (reset! prev-event {:app-db @db/app-db})\n        (re-frame/add-post-event-callback post-event-callback)))\n    (js/setTimeout ui.views/mount-internal 100 re-frame-data)))\n\n(defn enable [& [opts]]\n  (enable-re-frisk! opts))"]}