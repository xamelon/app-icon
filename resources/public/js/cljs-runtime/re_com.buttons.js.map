{"version":3,"sources":["re_com/buttons.cljs"],"mappings":"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","names":["re-com.buttons/button-args-desc","re-com.validate/string-or-hiccup?","cljs.core/fn?","re-com.validate/position?","re-com.validate/position-options-list","cljs.core/string?","re-com.validate/css-style?","re-com.validate/html-attr?","re-com.buttons/button","showing?","reagent.core.atom","p__62464","map__62465","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/Error","label","on-click","tooltip","tooltip-position","disabled?","class","style","attr","args","js/goog.DEBUG","re_com.validate.validate_args","re-com.validate/extract-arg-data","cljs.core/reset!","re-com.util/deref-or-value","the-button","cljs.core.merge","re-com.box/flex-child-style","event","and__4115__auto__","cljs.core/not","re-com.box/box","re-com.popover/popover-tooltip","or__4126__auto__","re-com.buttons/md-circle-icon-button-args-desc","re-com.validate/button-size?","re-com.validate/button-sizes-list","re-com.buttons/md-circle-icon-button","p__62472","map__62473","md-icon-name","size","emphasise?","G__62482","cljs.core/Keyword","re-com.buttons/md-icon-button-args-desc","re-com.buttons/md-icon-button","p__62486","map__62487","G__62490","re-com.buttons/info-button-args-desc","re-com.buttons/info-button","p__62495","map__62496","info","position","width","cljs.core.swap_BANG_","re-com.buttons/row-button-args-desc","re-com.buttons/row-button","p__62501","map__62502","mouse-over-row?","re-com.buttons/hyperlink-args-desc","re-com.buttons/hyperlink","p__62505","map__62506","re-com.buttons/hyperlink-href-args-desc","re-com.validate/string-or-atom?","re-com.buttons/hyperlink-href","p__62511","map__62512","href","target"],"sourcesContent":["(ns re-com.buttons\n  (:require-macros [re-com.core :refer [handler-fn]])\n  (:require [re-com.util     :refer [deref-or-value px]]\n            [re-com.validate :refer [position? position-options-list button-size? button-sizes-list\n                                     string-or-hiccup? css-style? html-attr? string-or-atom?] :refer-macros [validate-args-macro]]\n            [re-com.popover  :refer [popover-tooltip]]\n            [re-com.box      :refer [h-box v-box box gap line flex-child-style]]\n            [reagent.core    :as    reagent]))\n\n;; ------------------------------------------------------------------------------------\n;;  Component: button\n;; ------------------------------------------------------------------------------------\n\n(def button-args-desc\n  [{:name :label            :required true                         :type \"string | hiccup\" :validate-fn string-or-hiccup? :description \"label for the button\"}\n   {:name :on-click         :required false                        :type \"-> nil\"          :validate-fn fn?               :description \"a function which takes no params and returns nothing. Called when the button is clicked\"}\n   {:name :tooltip          :required false                        :type \"string | hiccup\" :validate-fn string-or-hiccup? :description \"what to show in the tooltip\"}\n   {:name :tooltip-position :required false :default :below-center :type \"keyword\"         :validate-fn position?         :description [:span \"relative to this anchor. One of \" position-options-list]}\n   {:name :disabled?        :required false :default false         :type \"boolean | atom\"                                 :description \"if true, the user can't click the button\"}\n   {:name :class            :required false                        :type \"string\"          :validate-fn string?           :description \"CSS class names, space separated (applies to the button, not the wrapping div)\"}\n   {:name :style            :required false                        :type \"CSS style map\"   :validate-fn css-style?        :description \"CSS styles (applies to the button, not the wrapping div)\"}\n   {:name :attr             :required false                        :type \"HTML attr map\"   :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the button, not the wrapping div)\"]}])\n\n(defn button\n  \"Returns the markup for a basic button\"\n  []\n  (let [showing? (reagent/atom false)]\n    (fn\n      [& {:keys [label on-click tooltip tooltip-position disabled? class style attr]\n          :or   {class \"btn-default\"}\n          :as   args}]\n      {:pre [(validate-args-macro button-args-desc args \"button\")]}\n      (when-not tooltip (reset! showing? false)) ;; To prevent tooltip from still showing after button drag/drop\n      (let [disabled? (deref-or-value disabled?)\n            the-button [:button\n                        (merge\n                          {:class    (str \"rc-button btn \" class)\n                           :style    (merge\n                                       (flex-child-style \"none\")\n                                       style)\n                           :disabled disabled?\n                           :on-click (handler-fn\n                                       (when (and on-click (not disabled?))\n                                         (on-click event)))}\n                          (when tooltip\n                            {:on-mouse-over (handler-fn (reset! showing? true))\n                             :on-mouse-out  (handler-fn (reset! showing? false))})\n                          attr)\n                        label]]\n        (when disabled?\n          (reset! showing? false))\n        [box\n         :class \"rc-button-wrapper display-inline-flex\"\n         :align :start\n         :child (if tooltip\n                  [popover-tooltip\n                   :label    tooltip\n                   :position (or tooltip-position :below-center)\n                   :showing? showing?\n                   :anchor   the-button]\n                  the-button)]))))\n\n\n;;--------------------------------------------------------------------------------------------------\n;; Component: md-circle-icon-button\n;;--------------------------------------------------------------------------------------------------\n\n(def md-circle-icon-button-args-desc\n  [{:name :md-icon-name     :required true  :default \"zmdi-plus\"   :type \"string\"          :validate-fn string?           :description [:span \"the name of the icon.\" [:br] \"For example, \" [:code \"\\\"zmdi-plus\\\"\"] \" or \" [:code \"\\\"zmdi-undo\\\"\"]] }\n   {:name :on-click         :required false                        :type \"-> nil\"          :validate-fn fn?               :description \"a function which takes no params and returns nothing. Called when the button is clicked\"}\n   {:name :size             :required false :default :regular      :type \"keyword\"         :validate-fn button-size?      :description [:span \"one of \" button-sizes-list]}\n   {:name :tooltip          :required false                        :type \"string | hiccup\" :validate-fn string-or-hiccup? :description \"what to show in the tooltip\"}\n   {:name :tooltip-position :required false :default :below-center :type \"keyword\"         :validate-fn position?         :description [:span \"relative to this anchor. One of \" position-options-list]}\n   {:name :emphasise?       :required false :default false         :type \"boolean\"                                        :description \"if true, use emphasised styling so the button really stands out\"}\n   {:name :disabled?        :required false :default false         :type \"boolean\"                                        :description \"if true, the user can't click the button\"}\n   {:name :class            :required false                        :type \"string\"          :validate-fn string?           :description \"CSS class names, space separated (applies to the button, not the wrapping div)\"}\n   {:name :style            :required false                        :type \"CSS style map\"   :validate-fn css-style?        :description \"CSS styles to add or override (applies to the button, not the wrapping div)\"}\n   {:name :attr             :required false                        :type \"HTML attr map\"   :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the button, not the wrapping div)\"]}])\n\n(defn md-circle-icon-button\n  \"a circular button containing a material design icon\"\n  []\n  (let [showing? (reagent/atom false)]\n    (fn\n      [& {:keys [md-icon-name on-click size tooltip tooltip-position emphasise? disabled? class style attr]\n          :or   {md-icon-name \"zmdi-plus\"}\n          :as   args}]\n      {:pre [(validate-args-macro md-circle-icon-button-args-desc args \"md-circle-icon-button\")]}\n      (when-not tooltip (reset! showing? false)) ;; To prevent tooltip from still showing after button drag/drop\n      (let [the-button [:div\n                        (merge\n                          {:class    (str\n                                       \"rc-md-circle-icon-button noselect \"\n                                       (case size\n                                         :smaller \"rc-circle-smaller \"\n                                         :larger \"rc-circle-larger \"\n                                         \" \")\n                                       (when emphasise? \"rc-circle-emphasis \")\n                                       (when disabled? \"rc-circle-disabled \")\n                                       class)\n                           :style    (merge\n                                       {:cursor (when-not disabled? \"pointer\")}\n                                       style)\n                           :on-click (handler-fn\n                                       (when (and on-click (not disabled?))\n                                         (on-click event)))}\n                          (when tooltip\n                            {:on-mouse-over (handler-fn (reset! showing? true))\n                             :on-mouse-out  (handler-fn (reset! showing? false))})\n                          attr)\n                        [:i {:class (str \"zmdi zmdi-hc-fw-rc \" md-icon-name)}]]]\n        [box\n         :class \"rc-md-circle-icon-button-wrapper display-inline-flex\"\n         :align :start\n         :child (if tooltip\n                  [popover-tooltip\n                   :label    tooltip\n                   :position (or tooltip-position :below-center)\n                   :showing? showing?\n                   :anchor   the-button]\n                  the-button)]))))\n\n\n;;--------------------------------------------------------------------------------------------------\n;; Component: md-icon-button\n;;--------------------------------------------------------------------------------------------------\n\n(def md-icon-button-args-desc\n  [{:name :md-icon-name     :required true  :default \"zmdi-plus\"   :type \"string\"          :validate-fn string?           :description [:span \"the name of the icon.\" [:br] \"For example, \" [:code \"\\\"zmdi-plus\\\"\"] \" or \" [:code \"\\\"zmdi-undo\\\"\"]]}\n   {:name :on-click         :required false                        :type \"-> nil\"          :validate-fn fn?               :description \"a function which takes no params and returns nothing. Called when the button is clicked\"}\n   {:name :size             :required false :default :regular      :type \"keyword\"         :validate-fn button-size?      :description [:span \"one of \" button-sizes-list]}\n   {:name :tooltip          :required false                        :type \"string | hiccup\" :validate-fn string-or-hiccup? :description \"what to show in the tooltip\"}\n   {:name :tooltip-position :required false :default :below-center :type \"keyword\"         :validate-fn position?         :description [:span \"relative to this anchor. One of \" position-options-list]}\n   {:name :emphasise?       :required false :default false         :type \"boolean\"                                        :description \"if true, use emphasised styling so the button really stands out\"}\n   {:name :disabled?        :required false :default false         :type \"boolean\"                                        :description \"if true, the user can't click the button\"}\n   {:name :class            :required false                        :type \"string\"          :validate-fn string?           :description \"CSS class names, space separated (applies to the button, not the wrapping div)\"}\n   {:name :style            :required false                        :type \"CSS style map\"   :validate-fn css-style?        :description \"CSS styles to add or override (applies to the button, not the wrapping div)\"}\n   {:name :attr             :required false                        :type \"HTML attr map\"   :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the button, not the wrapping div)\"]}])\n\n(defn md-icon-button\n  \"a square button containing a material design icon\"\n  []\n  (let [showing? (reagent/atom false)]\n    (fn\n      [& {:keys [md-icon-name on-click size tooltip tooltip-position emphasise? disabled? class style attr]\n          :or   {md-icon-name \"zmdi-plus\"}\n          :as   args}]\n      {:pre [(validate-args-macro md-icon-button-args-desc args \"md-icon-button\")]}\n      (when-not tooltip (reset! showing? false)) ;; To prevent tooltip from still showing after button drag/drop\n      (let [the-button [:div\n                        (merge\n                          {:class    (str\n                                       \"rc-md-icon-button noselect \"\n                                       (case size\n                                         :smaller \"rc-icon-smaller \"\n                                         :larger \"rc-icon-larger \"\n                                         \" \")\n                                       (when emphasise? \"rc-icon-emphasis \")\n                                       (when disabled? \"rc-icon-disabled \")\n                                       class)\n                           :style    (merge\n                                       {:cursor (when-not disabled? \"pointer\")}\n                                       style)\n                           :on-click (handler-fn\n                                       (when (and on-click (not disabled?))\n                                         (on-click event)))}\n                          (when tooltip\n                            {:on-mouse-over (handler-fn (reset! showing? true))\n                             :on-mouse-out  (handler-fn (reset! showing? false))})\n                          attr)\n                        [:i {:class (str \"zmdi zmdi-hc-fw-rc \" md-icon-name)}]]]\n        [box\n         :class \"rc-md-icon-button-wrapper display-inline-flex\"\n         :align :start\n         :child (if tooltip\n                  [popover-tooltip\n                   :label    tooltip\n                   :position (or tooltip-position :below-center)\n                   :showing? showing?\n                   :anchor   the-button]\n                  the-button)]))))\n\n\n;;--------------------------------------------------------------------------------------------------\n;; Component: info-button\n;;--------------------------------------------------------------------------------------------------\n\n(def info-button-args-desc\n  [{:name :info     :required true                        :type \"string | hiccup\" :validate-fn string-or-hiccup? :description \"what's shown in the popover\"}\n   {:name :position :required false :default :right-below :type \"keyword\"         :validate-fn position?         :description [:span \"relative to this anchor. One of \" position-options-list]}\n   {:name :width    :required false :default \"250px\"      :type \"string\"          :validate-fn string?           :description \"width in px\"}\n   {:name :class    :required false                       :type \"string\"          :validate-fn string?           :description \"CSS class names, space separated (applies to the button, not the popover wrapper)\"}\n   {:name :style    :required false                       :type \"CSS style map\"   :validate-fn css-style?        :description \"CSS styles to add or override (applies to the button, not the popover wrapper)\"}\n   {:name :attr     :required false                       :type \"HTML attr map\"   :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the button, not the popover wrapper)\"]}])\n\n(defn info-button\n  \"A tiny light grey button, with an 'i' in it. Meant to be unobrusive.\n  When pressed, displays a popup assumidly containing helpful information.\n  Primarily designed to be nestled against the label of an input field, explaining the purpose of that field.\n  Create a very small \\\"i\\\" icon via SVG\"\n  []\n  (let [showing? (reagent/atom false)]\n    (fn\n      [& {:keys [info position width class style attr] :as args}]\n      {:pre [(validate-args-macro info-button-args-desc args \"info-button\")]}\n      [popover-tooltip\n       :label     info\n       :status    :info\n       :position  (or position :right-below)\n       :width     (or width \"250px\")\n       :showing?  showing?\n       :on-cancel #(swap! showing? not)\n       :anchor    [:div\n                   (merge\n                     {:class    (str \"rc-info-button noselect \" class)\n                      :style    (merge {:cursor \"pointer\"} style)\n                      :on-click (handler-fn (swap! showing? not))}\n                     attr)\n                   [:svg {:width \"11\" :height \"11\"}\n                    [:circle {:cx \"5.5\" :cy \"5.5\" :r \"5.5\"}]\n                    [:circle {:cx \"5.5\" :cy \"2.5\" :r \"1.4\" :fill \"white\"}]\n                    [:line   {:x1 \"5.5\" :y1 \"5.2\" :x2 \"5.5\" :y2 \"9.7\" :stroke \"white\" :stroke-width \"2.5\"}]]]])))\n\n\n;;--------------------------------------------------------------------------------------------------\n;; Component: row-button\n;;--------------------------------------------------------------------------------------------------\n\n(def row-button-args-desc\n  [{:name :md-icon-name     :required true  :default \"zmdi-plus\"   :type \"string\"          :validate-fn string?           :description [:span \"the name of the icon.\" [:br] \"For example, \" [:code \"\\\"zmdi-plus\\\"\"] \" or \" [:code \"\\\"zmdi-undo\\\"\"]]}\n   {:name :on-click         :required false                        :type \"-> nil\"          :validate-fn fn?               :description \"a function which takes no params and returns nothing. Called when the button is clicked\"}\n   {:name :mouse-over-row?  :required false :default false         :type \"boolean\"                                        :description \"true if the mouse is hovering over the row\"}\n   {:name :tooltip          :required false                        :type \"string | hiccup\" :validate-fn string-or-hiccup? :description \"what to show in the tooltip\"}\n   {:name :tooltip-position :required false :default :below-center :type \"keyword\"         :validate-fn position?         :description [:span \"relative to this anchor. One of \" position-options-list]}\n   {:name :disabled?        :required false :default false         :type \"boolean\"                                        :description \"if true, the user can't click the button\"}\n   {:name :class            :required false                        :type \"string\"          :validate-fn string?           :description \"CSS class names, space separated (applies to the button, not the wrapping div)\"}\n   {:name :style            :required false                        :type \"CSS style map\"   :validate-fn css-style?        :description \"CSS styles to add or override (applies to the button, not the wrapping div)\"}\n   {:name :attr             :required false                        :type \"HTML attr map\"   :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the button, not the wrapping div)\"]}])\n\n(defn row-button\n  \"a small button containing a material design icon\"\n  []\n  (let [showing? (reagent/atom false)]\n    (fn\n      [& {:keys [md-icon-name on-click mouse-over-row? tooltip tooltip-position disabled? class style attr]\n          :or   {md-icon-name \"zmdi-plus\"}\n          :as   args}]\n      {:pre [(validate-args-macro row-button-args-desc args \"row-button\")]}\n      (when-not tooltip (reset! showing? false)) ;; To prevent tooltip from still showing after button drag/drop\n      (let [the-button [:div\n                        (merge\n                          {:class    (str\n                                       \"rc-row-button noselect \"\n                                       (when mouse-over-row? \"rc-row-mouse-over-row \")\n                                       (when disabled? \"rc-row-disabled \")\n                                       class)\n                           :style    style\n                           :on-click (handler-fn\n                                       (when (and on-click (not disabled?))\n                                         (on-click event)))}\n                          (when tooltip\n                            {:on-mouse-over (handler-fn (reset! showing? true))\n                             :on-mouse-out  (handler-fn (reset! showing? false))}) ;; Need to return true to ALLOW default events to be performed\n                          attr)\n                        [:i {:class (str \"zmdi zmdi-hc-fw-rc \" md-icon-name)}]]]\n        [box\n         :class \"rc-row-button-wrapper display-inline-flex\"\n         :align :start\n         :child (if tooltip\n                  [popover-tooltip\n                   :label    tooltip\n                   :position (or tooltip-position :below-center)\n                   :showing? showing?\n                   :anchor   the-button]\n                  the-button)]))))\n\n\n;;--------------------------------------------------------------------------------------------------\n;; Component: hyperlink\n;;--------------------------------------------------------------------------------------------------\n\n(def hyperlink-args-desc\n  [{:name :label            :required true                         :type \"string | hiccup | atom\" :validate-fn string-or-hiccup? :description \"label/hiccup for the button\"}\n   {:name :on-click         :required false                        :type \"-> nil\"                 :validate-fn fn?               :description \"a function which takes no params and returns nothing. Called when the button is clicked\"}\n   {:name :tooltip          :required false                        :type \"string | hiccup\"        :validate-fn string-or-hiccup? :description \"what to show in the tooltip\"}\n   {:name :tooltip-position :required false :default :below-center :type \"keyword\"                :validate-fn position?         :description [:span \"relative to this anchor. One of \" position-options-list]}\n   {:name :disabled?        :required false :default false         :type \"boolean | atom\"                                        :description \"if true, the user can't click the button\"}\n   {:name :class            :required false                        :type \"string\"                 :validate-fn string?           :description \"CSS class names, space separated (applies to the hyperlink, not the wrapping div)\"}\n   {:name :style            :required false                        :type \"CSS style map\"          :validate-fn css-style?        :description \"CSS styles to add or override (applies to the hyperlink, not the wrapping div)\"}\n   {:name :attr             :required false                        :type \"HTML attr map\"          :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the hyperlink, not the wrapping div)\"]}])\n\n(defn hyperlink\n  \"Renders an underlined text hyperlink component.\n   This is very similar to the button component above but styled to looks like a hyperlink.\n   Useful for providing button functionality for less important functions, e.g. Cancel\"\n  []\n  (let [showing? (reagent/atom false)]\n    (fn\n      [& {:keys [label on-click tooltip tooltip-position disabled? class style attr] :as args}]\n      {:pre [(validate-args-macro hyperlink-args-desc args \"hyperlink\")]}\n      (when-not tooltip (reset! showing? false)) ;; To prevent tooltip from still showing after button drag/drop\n      (let [label      (deref-or-value label)\n            disabled?  (deref-or-value disabled?)\n            the-button [box\n                        :align :start\n                        :child [:a\n                                (merge\n                                  {:class    (str \"rc-hyperlink noselect \" class)\n                                   :style    (merge\n                                               (flex-child-style \"none\")\n                                               {:cursor (if disabled? \"not-allowed\" \"pointer\")\n                                                :color  (when disabled? \"grey\")}\n                                               style)\n                                   :on-click (handler-fn\n                                               (when (and on-click (not disabled?))\n                                                 (on-click event)))}\n                                  (when tooltip\n                                    {:on-mouse-over (handler-fn (reset! showing? true))\n                                     :on-mouse-out  (handler-fn (reset! showing? false))})\n                                  attr)\n                                label]]]\n        [box\n         :class \"rc-hyperlink-wrapper display-inline-flex\"\n         :align :start\n         :child (if tooltip\n                  [popover-tooltip\n                   :label    tooltip\n                   :position (or tooltip-position :below-center)\n                   :showing? showing?\n                   :anchor   the-button]\n                  the-button)]))))\n\n\n;;--------------------------------------------------------------------------------------------------\n;; Component: hyperlink-href\n;;--------------------------------------------------------------------------------------------------\n\n(def hyperlink-href-args-desc\n  [{:name :label            :required true                         :type \"string | hiccup | atom\" :validate-fn string-or-hiccup? :description \"label/hiccup for the button\"}\n   {:name :href             :required true                         :type \"string | atom\"          :validate-fn string-or-atom?   :description \"if specified, the link target URL\"}\n   {:name :target           :required false :default \"_self\"       :type \"string | atom\"          :validate-fn string-or-atom?   :description \"one of \\\"_self\\\" or \\\"_blank\\\"\"}\n   {:name :tooltip          :required false                        :type \"string | hiccup\"        :validate-fn string-or-hiccup? :description \"what to show in the tooltip\"}\n   {:name :tooltip-position :required false :default :below-center :type \"keyword\"                :validate-fn position?         :description [:span \"relative to this anchor. One of \" position-options-list]}\n   {:name :class            :required false                        :type \"string\"                 :validate-fn string?           :description \"CSS class names, space separated (applies to the hyperlink, not the wrapping div)\"}\n   {:name :style            :required false                        :type \"CSS style map\"          :validate-fn css-style?        :description \"CSS styles to add or override (applies to the hyperlink, not the wrapping div)\"}\n   {:name :attr             :required false                        :type \"HTML attr map\"          :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the hyperlink, not the wrapping div)\"]}])\n\n(defn hyperlink-href\n  \"Renders an underlined text hyperlink component.\n   This is very similar to the button component above but styled to looks like a hyperlink.\n   Useful for providing button functionality for less important functions, e.g. Cancel\"\n  []\n  (let [showing? (reagent/atom false)]\n    (fn\n      [& {:keys [label href target tooltip tooltip-position class style attr] :as args}]\n      {:pre [(validate-args-macro hyperlink-href-args-desc args \"hyperlink-href\")]}\n      (when-not tooltip (reset! showing? false)) ;; To prevent tooltip from still showing after button drag/drop\n      (let [label      (deref-or-value label)\n            href       (deref-or-value href)\n            target     (deref-or-value target)\n            the-button [:a\n                        (merge {:class  (str \"rc-hyperlink-href noselect \" class)\n                                :style  (merge (flex-child-style \"none\")\n                                               style)\n                                :href   href\n                                :target target}\n                               (when tooltip\n                                 {:on-mouse-over (handler-fn (reset! showing? true))\n                                  :on-mouse-out  (handler-fn (reset! showing? false))})\n                               attr)\n                        label]]\n\n        [box\n         :class \"rc-hyperlink-href-wrapper display-inline-flex\"\n         :align :start\n         :child (if tooltip\n                  [popover-tooltip\n                   :label    tooltip\n                   :position (or tooltip-position :below-center)\n                   :showing? showing?\n                   :anchor   the-button]\n                  the-button)]))))\n"]}