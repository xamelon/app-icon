{"version":3,"sources":["re_frisk/filter/filter_matcher.cljs"],"mappings":";AAGA,AAAA,AAAOA,AAAYC,AAAEC;AAArB,AACE,AAACC,AAAEF,AAAEC;;AAEP,AAAA,AAAOE,AAAqBH,AAAEC;AAA9B,AACE,AAAK,AAASA,AAAG,AAACG,AAAiBH,AAAED;;AAEvC,AAAA,AAAOK,AAAYL,AAAEC;AAArB,AACE,AAACK,AAAc,AAAKL,AAAGD;;AAEzB,AAAA,AAAOO,AAAaP,AAAEC;AAAtB,AACE,AAAM,AAAA,AAACO,AAAUR;AAAS,AAACD,AAAW,AAAA,AAAOC,AAAGC;;AAAhD,AACM,AAAA,AAACO,AAAUR;AAAkB,AAACG,AAAoB,AAAA,AAAgBH,AAAGC;;AAD3E,AAEM,AAAA,AAACO,AAAUR;AAAS,AAACK,AAAW,AAAA,AAAOL,AAAGC;;AAFhD,AAGY,AAAO,AAAAQ,AAAW,AAAA,AAAqCT;;;;;;AAErE,AAAA,AAAMU,AAAOC,AAAOC;;AAApB,AACE,AAAM,AAACC,AAAOF;AAAd;;AAAA,AACM,AAACE,AAAOD;AADd;;AAAA,AAEM,AAAA,AAACV,AAAE,AAACY,AAAMH;AAAW,AAACJ,AAAY,AAACQ,AAAMJ,AAAQ,AAACK,AAAKJ;;AAF7D,AAGY,AAAI,AAACL,AAAY,AAACQ,AAAMJ,AAAQ,AAACI,AAAMH;AACrC,AAAO,AAACK,AAAKN;AAAQ,AAACM,AAAKL;;;;;AAC3B,AAAOD;AAAO,AAACM,AAAKL","names":["re-frisk.filter.filter-matcher/match-expr","f","p","cljs.core._EQ_","re-frisk.filter.filter-matcher/match-string-prefix","clojure.string/starts-with?","re-frisk.filter.filter-matcher/match-free","clojure.string/includes?","re-frisk.filter.filter-matcher/match-value","cljs.core/contains?","js/Error","re-frisk.filter.filter-matcher/match","filter","path","cljs.core/empty?","cljs.core/count","cljs.core/first","cljs.core/last","cljs.core/rest"],"sourcesContent":["(ns re-frisk.filter.filter-matcher\n  (:require [clojure.string :as str]))\n\n(defn- match-expr [f p]\n  (= f p))\n\n(defn- match-string-prefix [f p]\n  (and (string? p) (str/starts-with? p f)))\n\n(defn- match-free [f p]\n  (str/includes? (str p) f))\n\n(defn- match-value [f p]\n  (cond (contains? f :expr) (match-expr (:expr f) p)\n        (contains? f :string-prefix) (match-string-prefix (:string-prefix f) p)\n        (contains? f :free) (match-free (:free f) p)\n        :else (throw (js/Error. (str \"Unknown kind of filter-path: \" f)))))\n\n(defn match [filter path]\n  (cond (empty? filter) nil\n        (empty? path) nil\n        (= (count filter) 1) (match-value (first filter) (last path))\n        :else (if (match-value (first filter) (first path))\n                (recur (rest filter) (rest path))\n                (recur filter (rest path)))))\n"]}