{"version":3,"sources":["re_com/dropdown.cljs"],"mappings":"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","names":["re-com.dropdown/move-to-new-choice","choices","id-fn","id","offset","current-index","re_com.util.position_for_id","new-index","cljs.core._EQ_","cljs.core/count","cljs.core/mod","and__4115__auto__","G__62896","cljs.core.nth","re-com.dropdown/choices-with-group-headings","opts","group-fn","groups","cljs.core.partition_by","group-headers","cljs.core.map","cljs.core/first","p1__62897#","cljs.core/PersistentHashMap","cljs.core.gensym","re-com.dropdown/filter-choices","label-fn","filter-text","lower-filter-text","clojure.string/lower-case","filter-fn","opt","group","label","cljs.core.filter","re-com.dropdown/filter-choices-regex","re","e62903","js/RegExp","js/Object","e","cljs.core.partial","or__4126__auto__","re-com.dropdown/filter-choices-by-keyword","keyword","value","re-com.dropdown/show-selected-item","node","item-offset-top","item-offset-bottom","parent","parent-height","parent-visible-top","parent-visible-bottom","new-scroll-top","x__4214__auto__","y__4215__auto__","re-com.dropdown/make-group-heading","m","re-com.dropdown/choice-item","on-click","internal-model","mouse-over?","reagent.core.atom","reagent.core/create-class","this","reagent.dom/dom-node","selected","cljs.core/deref","class","event","cljs.core/reset!","re-com.dropdown/make-choice-item","render-fn","callback","markup","re-com.dropdown/filter-text-box-base","filter-box?","key-handler","drop-showing?","set-filter-text","G__62927","re-com.dropdown/filter-text-box","p1__62938#","p1__62939#","cljs.core/with-meta","re-com.dropdown/dropdown-top","ignore-click","cljs.core.atom","tab-index","placeholder","dropdown-click","title?","_","reagent.core/set-state","reagent.core/current-component","text","G__62941","re_com.util.item_for_id","re-com.dropdown/fn-or-vector-of-maps?","v","cljs.core/fn?","re-com.validate/vector-of-maps?","re-com.dropdown/load-choices*","choices-state","regex-filter?","p__62945","map__62946","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","result","error","args","cljs.core.swap_BANG_","cljs.core/assoc","G__62948","G__62949","p1__62943#","G__62950","p1__62944#","re-com.dropdown/load-choices","debounce-delay","debounce?","temp__5720__auto__","timer","js/clearTimeout","js/setTimeout","re-com.dropdown/single-dropdown-args-desc","cljs.core/ifn?","cljs.core/string?","re-com.validate/number-or-string?","cljs.core/number?","re-com.validate/css-style?","re-com.validate/html-attr?","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-com.dropdown/single-dropdown","p__62956","map__62957","js/Error","seq62955","self__4724__auto__","cljs.core/seq","model","js/goog.DEBUG","re_com.validate.validate_args","re-com.validate/extract-arg-data","external-model","re-com.util/deref-or-value","choices-fn?","load-choices","p__62959","map__62960","p__62964","map__62965","on-change","disabled?","width","max-height","style","attr","p1__62951#","p1__62952#","latest-ext-model","cljs.core.not_EQ_","changeable?","cljs.core/not","G__62967","cancel","filtered-choices","press-enter","press-escape","press-tab","G__62968","press-up","press-down","press-home","press-end","G__62985","cljs.core.merge","re-com.box/flex-child-style","re-com.box/align-style","p1__62953#","vec__62986","p1__62954#","group-names","group-opt-lists","make-a-choice","make-choices","make-h-then-choices","h","cljs.core/cons","has-no-group-names?","cljs.core/concat"],"sourcesContent":["(ns re-com.dropdown\n  (:require-macros [re-com.core :refer [handler-fn]])\n  (:require [re-com.util     :refer [deref-or-value position-for-id item-for-id]]\n            [re-com.box      :refer [align-style flex-child-style]]\n            [re-com.validate :refer [vector-of-maps? css-style? html-attr? number-or-string?] :refer-macros [validate-args-macro]]\n            [clojure.string  :as    string]\n            [reagent.core    :as    reagent]\n            [reagent.dom     :as    rdom]))\n\n;;  Inspiration: http://alxlit.name/bootstrap-chosen\n;;  Alternative: http://silviomoreto.github.io/bootstrap-select\n\n(defn- move-to-new-choice\n  \"In a vector of maps (where each map has an :id), return the id of the choice offset posititions away\n   from id (usually +1 or -1 to go to next/previous). Also accepts :start and :end\"\n  [choices id-fn id offset]\n  (let [current-index (position-for-id id choices :id-fn id-fn)\n        new-index     (cond\n                        (= offset :start)    0\n                        (= offset :end)      (dec (count choices))\n                        (nil? current-index) 0\n                        :else                (mod (+ current-index offset) (count choices)))]\n    (when (and new-index (pos? (count choices)))\n      (id-fn (nth choices new-index)))))\n\n\n(defn- choices-with-group-headings\n  \"If necessary, inserts group headings entries into the choices\"\n  [opts group-fn]\n  (let [groups         (partition-by group-fn opts)\n        group-headers  (->> groups\n                            (map first)\n                            (map group-fn)\n                            (map #(hash-map :id (gensym) :group %)))]\n    [group-headers groups]))\n\n\n(defn- filter-choices\n  \"Filter a list of choices based on a filter string using plain string searches (case insensitive). Less powerful\n   than regex's but no confusion with reserved characters\"\n  [choices group-fn label-fn filter-text]\n  (let [lower-filter-text (string/lower-case filter-text)\n        filter-fn         (fn [opt]\n                            (let [group (if (nil? (group-fn opt)) \"\" (group-fn opt))\n                                  label (str (label-fn opt))]\n                              (or\n                                (>= (.indexOf (string/lower-case group) lower-filter-text) 0)\n                                (>= (.indexOf (string/lower-case label) lower-filter-text) 0))))]\n    (filter filter-fn choices)))\n\n\n(defn- filter-choices-regex\n  \"Filter a list of choices based on a filter string using regex's (case insensitive). More powerful but can cause\n   confusion for users entering reserved characters such as [ ] * + . ( ) etc.\"\n  [choices group-fn label-fn filter-text]\n  (let [re        (try\n                    (js/RegExp. filter-text \"i\")\n                    (catch js/Object e nil))\n        filter-fn (partial (fn [re opt]\n                             (when-not (nil? re)\n                               (or (.test re (group-fn opt)) (.test re (label-fn opt)))))\n                           re)]\n    (filter filter-fn choices)))\n\n\n(defn filter-choices-by-keyword\n  \"Filter a list of choices extra data within the choices vector\"\n  [choices keyword value]\n  (let [filter-fn (fn [opt] (>= (.indexOf (keyword opt) value) 0))]\n    (filter filter-fn choices)))\n\n\n(defn show-selected-item\n  [node]\n  (let [item-offset-top       (.-offsetTop node)\n        item-offset-bottom    (+ item-offset-top (.-clientHeight node))\n        parent                (.-parentNode node)\n        parent-height         (.-clientHeight parent)\n        parent-visible-top    (.-scrollTop parent)\n        parent-visible-bottom (+ parent-visible-top parent-height)\n        new-scroll-top        (cond\n                                (> item-offset-bottom parent-visible-bottom) (max (- item-offset-bottom parent-height) 0)\n                                (< item-offset-top parent-visible-top)       item-offset-top)]\n    (when new-scroll-top (set! (.-scrollTop parent) new-scroll-top))))\n\n\n(defn- make-group-heading\n  \"Render a group heading\"\n  [m]\n  ^{:key (:id m)} [:li.group-result\n                   (:group m)])\n\n\n(defn- choice-item\n  \"Render a choice item and set up appropriate mouse events\"\n  [id label on-click internal-model]\n  (let [mouse-over? (reagent/atom false)]\n    (reagent/create-class\n      {:component-did-mount\n       (fn [this]\n         (let [node (rdom/dom-node this)\n               selected (= @internal-model id)]\n           (when selected (show-selected-item node))))\n\n       :component-did-update\n       (fn [this]\n         (let [node (rdom/dom-node this)\n               selected (= @internal-model id)]\n           (when selected (show-selected-item node))))\n\n       :display-name \"choice-item\"\n\n       :reagent-render\n       (fn\n         [id label on-click internal-model]\n         (let [selected (= @internal-model id)\n               class (if selected\n                       \"highlighted\"\n                       (when @mouse-over? \"mouseover\"))]\n           [:li\n            {:class         (str \"active-result group-option \" class)\n             :on-mouse-over (handler-fn (reset! mouse-over? true))\n             :on-mouse-out  (handler-fn (reset! mouse-over? false))\n             :on-mouse-down (handler-fn (on-click id))}\n            label]))})))\n\n\n(defn make-choice-item\n  [id-fn render-fn callback internal-model opt]\n  (let [id (id-fn opt)\n        markup (render-fn opt)]\n    ^{:key (str id)} [choice-item id markup callback internal-model]))\n\n\n(defn- filter-text-box-base\n  \"Base function (before lifecycle metadata) to render a filter text box\"\n  [filter-box? filter-text key-handler drop-showing? set-filter-text]\n  [:div.chosen-search\n   [:input\n    {:type          \"text\"\n     :auto-complete \"off\"\n     :style         (when-not filter-box? {:position \"absolute\" ;; When no filter box required, use it but hide it off screen\n                                           :width    \"0px\"      ;; The rest of these styles make the textbox invisible\n                                           :padding  \"0px\"\n                                           :border   \"none\"})\n     :value         @filter-text\n     :on-change     (handler-fn (set-filter-text (-> event .-target .-value)))\n     :on-key-down   (handler-fn (when-not (key-handler event)\n                                  (.preventDefault event))) ;; When key-handler returns false, preventDefault\n     :on-blur       (handler-fn (reset! drop-showing? false))}]])\n\n\n(def ^:private filter-text-box\n  \"Render a filter text box\"\n  (with-meta filter-text-box-base\n             {:component-did-mount #(let [node (.-firstChild (rdom/dom-node %))]\n                                     (.focus node))\n              :component-did-update #(let [node (.-firstChild (rdom/dom-node %))]\n                                      (.focus node))}))\n\n(defn- dropdown-top\n  \"Render the top part of the dropdown, with the clickable area and the up/down arrow\"\n  []\n  (let [ignore-click (atom false)]\n    (fn\n      [internal-model choices id-fn label-fn tab-index placeholder dropdown-click key-handler filter-box? drop-showing? title?]\n      (let [_    (reagent/set-state (reagent/current-component) {:filter-box? filter-box?})\n            text (if @internal-model\n                   (label-fn (item-for-id @internal-model choices :id-fn id-fn))\n                   placeholder)]\n        [:a.chosen-single.chosen-default\n         {:href          \"javascript:\"   ;; Required to make this anchor appear in the tab order\n          :tab-index     tab-index\n          :on-click      (handler-fn\n                           (if @ignore-click\n                             (reset! ignore-click false)\n                             (dropdown-click)))\n          :on-mouse-down (handler-fn\n                           (when @drop-showing?\n                             (reset! ignore-click true)))   ;; TODO: Hmmm, have a look at calling preventDefault (and stopProp?) and removing the ignore-click stuff\n          :on-key-down   (handler-fn\n                           (key-handler event)\n                           (when (= (.-which event) 13)     ;; Pressing enter on an anchor also triggers click event, which we don't want\n                             (reset! ignore-click true)))}  ;; TODO: Hmmm, have a look at calling preventDefault (and stopProp?) and removing the ignore-click stuff\n         [:span (when title?\n                  {:title text})\n          text]\n         [:div [:b]]])))) ;; This odd bit of markup produces the visual arrow on the right\n\n(defn- fn-or-vector-of-maps? ;; Would normally move this to re-com.validate but this is very specific to this component\n  [v]\n  (or (fn? v)\n      (vector-of-maps? v)))\n\n(defn- load-choices*\n  \"Load choices if choices is callback.\"\n  [choices-state choices text regex-filter?]\n  (let [id (inc (:id @choices-state))\n        callback (fn [{:keys [result error] :as args}]\n                   (when (= id (:id @choices-state))\n                     (swap! choices-state assoc\n                            :loading? false\n                            :error error\n                            :choices result)))]\n    (swap! choices-state assoc\n           :loading? true\n           :error nil\n           :id id\n           :timer nil)\n    (choices {:filter-text   text\n              :regex-filter? regex-filter?}\n             #(callback {:result %})\n             #(callback {:error %}))))\n\n(defn- load-choices\n  \"Load choices or schedule lodaing depending on debounce?\"\n  [choices-state choices debounce-delay text regex-filter? debounce?]\n  (when (fn? choices)\n    (when-let [timer (:timer @choices-state)]\n      (js/clearTimeout timer))\n    (if debounce?\n      (let [timer (js/setTimeout #(load-choices* choices-state choices text regex-filter?) debounce-delay)]\n        (swap! choices-state assoc :timer timer))\n      (load-choices* choices-state choices text regex-filter?))))\n\n;;--------------------------------------------------------------------------------------------------\n;; Component: single-dropdown\n;;--------------------------------------------------------------------------------------------------\n\n(def single-dropdown-args-desc\n  [{:name :choices       :required true                   :type \"vector of choices | atom | (opts, done, fail) -> nil\" :validate-fn fn-or-vector-of-maps? :description [:span \"Each is expected to have an id, label and, optionally, a group, provided by \" [:code \":id-fn\"] \", \" [:code \":label-fn\"] \" & \" [:code \":group-fn\"] \". May also be a callback \" [:code \"(opts, done, fail)\"] \" where opts is map of \" [:code \":filter-text\"] \" and \" [:code \":regex-filter?.\"]]}\n   {:name :model         :required true                   :type \"the id of a choice | atom\"                                    :description [:span \"the id of the selected choice. If nil, \" [:code \":placeholder\"] \" text is shown\"]}\n   {:name :on-change     :required true                   :type \"id -> nil\"                     :validate-fn fn?               :description [:span \"called when a new choice is selected. Passed the id of new choice\"] }\n   {:name :id-fn         :required false :default :id     :type \"choice -> anything\"            :validate-fn ifn?              :description [:span \"given an element of \" [:code \":choices\"] \", returns its unique identifier (aka id)\"]}\n   {:name :label-fn      :required false :default :label  :type \"choice -> string\"              :validate-fn ifn?              :description [:span \"given an element of \" [:code \":choices\"] \", returns its displayable label.\"]}\n   {:name :group-fn      :required false :default :group  :type \"choice -> anything\"            :validate-fn ifn?              :description [:span \"given an element of \" [:code \":choices\"] \", returns its group identifier\"]}\n   {:name :render-fn     :required false                  :type \"choice -> string | hiccup\"     :validate-fn ifn?              :description [:span \"given an element of \" [:code \":choices\"] \", returns the markup that will be rendered for that choice. Defaults to the label if no custom markup is required.\"]}\n   {:name :disabled?     :required false :default false   :type \"boolean | atom\"                                               :description \"if true, no user selection is allowed\"}\n   {:name :filter-box?   :required false :default false   :type \"boolean\"                                                      :description \"if true, a filter text field is placed at the top of the dropdown\"}\n   {:name :regex-filter? :required false :default false   :type \"boolean | atom\"                                               :description \"if true, the filter text field will support JavaScript regular expressions. If false, just plain text\"}\n   {:name :placeholder   :required false                  :type \"string\"                        :validate-fn string?           :description \"background text when no selection\"}\n   {:name :title?        :required false :default false   :type \"boolean\"                                                      :description \"if true, allows the title for the selected dropdown to be displayed via a mouse over. Handy when dropdown width is small and text is truncated\"}\n   {:name :width         :required false :default \"100%\"  :type \"string\"                        :validate-fn string?           :description \"the CSS width. e.g.: \\\"500px\\\" or \\\"20em\\\"\"}\n   {:name :max-height    :required false :default \"240px\" :type \"string\"                        :validate-fn string?           :description \"the maximum height of the dropdown part\"}\n   {:name :tab-index     :required false                  :type \"integer | string\"              :validate-fn number-or-string? :description \"component's tabindex. A value of -1 removes from order\"}\n   {:name :debounce-delay :required false                 :type \"integer\"                       :validate-fn number?           :description [:span \"delay to debounce loading requests when using callback \" [:code \":choices\"]]}\n   {:name :class         :required false                  :type \"string\"                        :validate-fn string?           :description \"CSS class names, space separated (applies to the outer container)\"}\n   {:name :style         :required false                  :type \"CSS style map\"                 :validate-fn css-style?        :description \"CSS styles to add or override (applies to the outer container)\"}\n   {:name :attr          :required false                  :type \"HTML attr map\"                 :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the outer container)\"]}])\n\n(defn single-dropdown\n  \"Render a single dropdown component which emulates the bootstrap-choosen style. Sample choices object:\n     [{:id \\\"AU\\\" :label \\\"Australia\\\"      :group \\\"Group 1\\\"}\n      {:id \\\"US\\\" :label \\\"United States\\\"  :group \\\"Group 1\\\"}\n      {:id \\\"GB\\\" :label \\\"United Kingdom\\\" :group \\\"Group 1\\\"}\n      {:id \\\"AF\\\" :label \\\"Afghanistan\\\"    :group \\\"Group 2\\\"}]\"\n  [& {:keys [choices model regex-filter? debounce-delay]\n      :or {debounce-delay 250}\n      :as args}]\n  {:pre [(validate-args-macro single-dropdown-args-desc args \"single-dropdown\")]}\n  (let [external-model (reagent/atom (deref-or-value model))  ;; Holds the last known external value of model, to detect external model changes\n        internal-model (reagent/atom @external-model)         ;; Create a new atom from the model to be used internally\n        drop-showing?  (reagent/atom false)\n        filter-text    (reagent/atom \"\")\n        choices-fn?    (fn? choices)\n        choices-state (reagent/atom {:loading? choices-fn?\n                                     ; loading error\n                                     :error nil\n                                     :choices []\n                                     ; request id to ignore handling response when new request was already made\n                                     :id 0\n                                     ; to debounce requests\n                                     :timer nil})\n        load-choices (partial load-choices choices-state choices debounce-delay)\n        set-filter-text (fn [text {:keys [regex-filter?] :as args} debounce?]\n                          (load-choices text regex-filter? debounce?)\n                          (reset! filter-text text))]\n    (load-choices \"\" regex-filter? false)\n    (fn [& {:keys [choices model on-change id-fn label-fn group-fn render-fn disabled? filter-box? regex-filter? placeholder title? width max-height tab-index debounce-delay class style attr]\n            :or {id-fn :id label-fn :label group-fn :group render-fn label-fn}\n            :as args}]\n      {:pre [(validate-args-macro single-dropdown-args-desc args \"single-dropdown\")]}\n      (let [choices          (if choices-fn? (:choices @choices-state) (deref-or-value choices))\n            disabled?        (deref-or-value disabled?)\n            regex-filter?    (deref-or-value regex-filter?)\n            latest-ext-model (reagent/atom (deref-or-value model))\n            _                (when (not= @external-model @latest-ext-model) ;; Has model changed externally?\n                               (reset! external-model @latest-ext-model)\n                               (reset! internal-model @latest-ext-model))\n            changeable?      (and on-change (not disabled?))\n            callback         #(do\n                               (reset! internal-model %)\n                               (when (and changeable? (not= @internal-model @latest-ext-model))\n                                 (on-change @internal-model))\n                               (swap! drop-showing? not) ;; toggle to allow opening dropdown on Enter key\n                               (set-filter-text \"\" args false))\n            cancel           #(do\n                               (reset! drop-showing? false)\n                               (set-filter-text \"\" args false)\n                               (reset! internal-model @external-model))\n            dropdown-click   #(when-not disabled?\n                               (swap! drop-showing? not))\n            filtered-choices (if choices-fn?\n                               choices\n                               (if regex-filter?\n                                 (filter-choices-regex choices group-fn label-fn @filter-text)\n                                 (filter-choices choices group-fn label-fn @filter-text)))\n            press-enter      (fn []\n                               (if disabled?\n                                 (cancel)\n                                 (callback @internal-model))\n                               true)\n            press-escape      (fn []\n                                (cancel)\n                                true)\n            press-tab         (fn []\n                                (if disabled?\n                                  (cancel)\n                                  (do  ;; Was (callback @internal-model) but needed a customised version\n                                    (when changeable? (on-change @internal-model))\n                                    (reset! drop-showing? false)\n                                    (set-filter-text \"\" args false)))\n                                (reset! drop-showing? false)\n                                true)\n            press-up          (fn []\n                                (if @drop-showing?  ;; Up arrow\n                                  (reset! internal-model (move-to-new-choice filtered-choices id-fn @internal-model -1))\n                                  (reset! drop-showing? true))\n                                true)\n            press-down        (fn []\n                                (if @drop-showing?  ;; Down arrow\n                                  (reset! internal-model (move-to-new-choice filtered-choices id-fn @internal-model 1))\n                                  (reset! drop-showing? true))\n                                true)\n            press-home        (fn []\n                                (reset! internal-model (move-to-new-choice filtered-choices id-fn @internal-model :start))\n                                true)\n            press-end         (fn []\n                                (reset! internal-model (move-to-new-choice filtered-choices id-fn @internal-model :end))\n                                true)\n            key-handler      #(if disabled?\n                               false\n                               (case (.-which %)\n                                 13 (press-enter)\n                                 27 (press-escape)\n                                 9  (press-tab)\n                                 38 (press-up)\n                                 40 (press-down)\n                                 36 (press-home)\n                                 35 (press-end)\n                                 filter-box?))]  ;; Use this boolean to allow/prevent the key from being processed by the text box\n        [:div\n         (merge\n           {:class (str \"rc-dropdown chosen-container chosen-container-single noselect \" (when @drop-showing? \"chosen-container-active chosen-with-drop \") class)\n            :style (merge (flex-child-style (if width \"0 0 auto\" \"auto\"))\n                          (align-style :align-self :start)\n                          {:width width}\n                          style)}\n           attr)          ;; Prevent user text selection\n         [dropdown-top internal-model choices id-fn label-fn tab-index placeholder dropdown-click key-handler filter-box? drop-showing? title?]\n         (when (and @drop-showing? (not disabled?))\n           [:div.chosen-drop\n            [filter-text-box filter-box? filter-text key-handler drop-showing? #(set-filter-text % args true)]\n            [:ul.chosen-results\n             (when max-height {:style {:max-height max-height}})\n             (cond\n               (and choices-fn? (:loading? @choices-state))\n               [:li.loading (str \"Loading...\")]\n               (and choices-fn? (:error @choices-state))\n               [:li.error (:error @choices-state)]\n               (-> filtered-choices count pos?)\n               (let [[group-names group-opt-lists] (choices-with-group-headings filtered-choices group-fn)\n                     make-a-choice                 (partial make-choice-item id-fn render-fn callback internal-model)\n                     make-choices                  #(map make-a-choice %1)\n                     make-h-then-choices           (fn [h opts]\n                                                     (cons (make-group-heading h)\n                                                           (make-choices opts)))\n                     has-no-group-names?           (nil? (:group (first group-names)))]\n                 (if (and (= 1 (count group-opt-lists)) has-no-group-names?)\n                   (make-choices (first group-opt-lists)) ;; one group means no headings\n                   (apply concat (map make-h-then-choices group-names group-opt-lists))))\n               :else\n               [:li.no-results (str \"No results match \\\"\" @filter-text \"\\\"\")])]])]))))\n"]}