{
"version":3,
"file":"goog.i18n.timezone.js",
"lineCount":125,
"mappings":"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",
"sources":["goog/i18n/timezone.js"],
"sourcesContent":["// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Functions to provide timezone information for use with\n * date/time format.\n */\n\ngoog.provide('goog.i18n.TimeZone');\n\ngoog.require('goog.array');\n/**\n * @suppress {extraRequire} goog.date.DateLike represents a Date or a\n * goog.Date object. It is a parameter in the following methods:\n * - getDaylightAdjustment\n * - getGMTString\n * - getLongName\n * - getOffset\n * - getRFCTimeZoneString\n * - getShortName\n * - getUTCString\n * - isDaylightTime\n * - getLongNameGMT\n * - getGenericLocation\n * Lint warns that this require is unnecessary but the closure compiler needs\n * it in order to accept a Date or a goog.Date object as a goog.date.DateLike\n * parameter in any of these methods.\n */\ngoog.require('goog.date.DateLike');\ngoog.require('goog.object');\ngoog.require('goog.string');\n\n\n\n/**\n * TimeZone class implemented a time zone resolution and name information\n * source for client applications. The time zone object is initiated from\n * a time zone information object. Application can initiate a time zone\n * statically, or it may choose to initiate from a data obtained from server.\n * Each time zone information array is small, but the whole set of data\n * is too much for client application to download. If end user is allowed to\n * change time zone setting, dynamic retrieval should be the method to use.\n * In case only time zone offset is known, there is a decent fallback\n * that only use the time zone offset to create a TimeZone object.\n *\n * @constructor\n * @final\n */\ngoog.i18n.TimeZone = function() {\n  /**\n   * The standard time zone id.\n   * @type {string}\n   * @private\n   */\n  this.timeZoneId_;\n\n\n  /**\n   * The standard, non-daylight time zone offset, in minutes WEST of UTC.\n   * @type {number}\n   * @private\n   */\n  this.standardOffset_;\n\n\n  /**\n   * An array of strings that can have 2 or 4 elements.  The first two elements\n   * are the long and short names for standard time in this time zone, and the\n   * last two elements (if present) are the long and short names for daylight\n   * time in this time zone.\n   * @type {Array<string>}\n   * @private\n   */\n  this.tzNames_;\n\n\n  /**\n   * An object of 2 to 4 elements. The STD_* are always available, while the\n   * DST_* are only available when daylight saving time is available for this\n   * time zone.\n   * <ul>\n   * <li>STD_LONG_NAME_GMT: long GMT name for standard time</li>\n   * <li>STD_GENERIC_LOCATION: generic location for standard time</li>\n   * <li>DST_LONG_NAME_GMT: long GMT for daylight saving time</li>\n   * <li>DST_GENERIC_LOCATION: generic location for daylight saving time</li>\n   * </ul>\n   * @type {{\n   *   STD_LONG_NAME_GMT: string,\n   *   STD_GENERIC_LOCATION: string,\n   *   DST_LONG_NAME_GMT: (string|undefined),\n   *   DST_GENERIC_LOCATION: (string|undefined)\n   * }}\n   * @private\n   */\n  this.tzNamesExt_;\n\n\n  /**\n   * This array specifies the Daylight Saving Time transitions for this time\n   * zone.  This is a flat array of numbers which are interpreted in pairs:\n   * [time1, adjustment1, time2, adjustment2, ...] where each time is a DST\n   * transition point given as a number of hours since 00:00 UTC, January 1,\n   * 1970, and each adjustment is the adjustment to apply for times after the\n   * DST transition, given as minutes EAST of UTC.\n   * @type {Array<number>}\n   * @private\n   */\n  this.transitions_;\n};\n\n\n/**\n * The number of milliseconds in an hour.\n * @type {number}\n * @private\n */\ngoog.i18n.TimeZone.MILLISECONDS_PER_HOUR_ = 3600 * 1000;\n\n\n/**\n * Indices into the array of time zone names.\n * @enum {number}\n */\ngoog.i18n.TimeZone.NameType = {\n  STD_SHORT_NAME: 0,\n  STD_LONG_NAME: 1,\n  DLT_SHORT_NAME: 2,\n  DLT_LONG_NAME: 3\n};\n\n\n/**\n * This factory method creates a time zone instance.  It takes either an object\n * containing complete time zone information, or a single number representing a\n * constant time zone offset.  If the latter form is used, DST functionality is\n * not available.\n *\n * @param {number|Object} timeZoneData If this parameter is a number, it should\n *     indicate minutes WEST of UTC to be used as a constant time zone offset.\n *     Otherwise, it should be an object with these four fields:\n *     <ul>\n *     <li>id: A string ID for the time zone.\n *     <li>std_offset: The standard time zone offset in minutes EAST of UTC.\n *     <li>names: An array of four names (standard short name, standard long\n *           name, daylight short name, daylight long, name)\n *     <li>names_ext: A hash of four fields (standard long name gmt, daylight\n *           long name gmt, standard generic location, daylight generic\n *           location)\n *     <li>transitions: An array of numbers which are interpreted in pairs:\n *           [time1, adjustment1, time2, adjustment2, ...] where each time is\n *           a DST transition point given as a number of hours since 00:00 UTC,\n *           January 1, 1970, and each adjustment is the adjustment to apply\n *           for times after the DST transition, given as minutes EAST of UTC.\n *     </ul>\n * @return {!goog.i18n.TimeZone} A goog.i18n.TimeZone object for the given\n *     time zone data.\n */\ngoog.i18n.TimeZone.createTimeZone = function(timeZoneData) {\n  if (typeof timeZoneData == 'number') {\n    return goog.i18n.TimeZone.createSimpleTimeZone_(timeZoneData);\n  }\n  var tz = new goog.i18n.TimeZone();\n  tz.timeZoneId_ = timeZoneData['id'];\n  tz.standardOffset_ = -timeZoneData['std_offset'];\n  tz.tzNames_ = timeZoneData['names'];\n  tz.tzNamesExt_ = timeZoneData['names_ext'];\n  tz.transitions_ = timeZoneData['transitions'];\n  return tz;\n};\n\n\n/**\n * This factory method creates a time zone object with a constant offset.\n * @param {number} timeZoneOffsetInMinutes Offset in minutes WEST of UTC.\n * @return {!goog.i18n.TimeZone} A time zone object with the given constant\n *     offset.  Note that the time zone ID of this object will use the POSIX\n *     convention, which has a reversed sign (\"Etc/GMT+8\" means UTC-8 or PST).\n * @private\n */\ngoog.i18n.TimeZone.createSimpleTimeZone_ = function(timeZoneOffsetInMinutes) {\n  var tz = new goog.i18n.TimeZone();\n  tz.standardOffset_ = timeZoneOffsetInMinutes;\n  tz.timeZoneId_ =\n      goog.i18n.TimeZone.composePosixTimeZoneID_(timeZoneOffsetInMinutes);\n  var str = goog.i18n.TimeZone.composeUTCString_(timeZoneOffsetInMinutes);\n  var strGMT = goog.i18n.TimeZone.composeGMTString_(timeZoneOffsetInMinutes);\n  tz.tzNames_ = [str, str];\n  tz.tzNamesExt_ = {STD_LONG_NAME_GMT: strGMT, STD_GENERIC_LOCATION: strGMT};\n  tz.transitions_ = [];\n  return tz;\n};\n\n\n/**\n * Generate a GMT-relative string for a constant time zone offset.\n * @param {number} offset The time zone offset in minutes WEST of UTC.\n * @return {string} The GMT string for this offset, which will indicate\n *     hours EAST of UTC.\n * @private\n */\ngoog.i18n.TimeZone.composeGMTString_ = function(offset) {\n  var parts = ['GMT'];\n  parts.push(offset <= 0 ? '+' : '-');\n  offset = Math.abs(offset);\n  parts.push(\n      goog.string.padNumber(Math.floor(offset / 60) % 100, 2), ':',\n      goog.string.padNumber(offset % 60, 2));\n  return parts.join('');\n};\n\n\n/**\n * Generate a POSIX time zone ID for a constant time zone offset.\n * @param {number} offset The time zone offset in minutes WEST of UTC.\n * @return {string} The POSIX time zone ID for this offset, which will indicate\n *     hours WEST of UTC.\n * @private\n */\ngoog.i18n.TimeZone.composePosixTimeZoneID_ = function(offset) {\n  if (offset == 0) {\n    return 'Etc/GMT';\n  }\n  var parts = ['Etc/GMT', offset < 0 ? '-' : '+'];\n  offset = Math.abs(offset);\n  parts.push(Math.floor(offset / 60) % 100);\n  offset = offset % 60;\n  if (offset != 0) {\n    parts.push(':', goog.string.padNumber(offset, 2));\n  }\n  return parts.join('');\n};\n\n\n/**\n * Generate a UTC-relative string for a constant time zone offset.\n * @param {number} offset The time zone offset in minutes WEST of UTC.\n * @return {string} The UTC string for this offset, which will indicate\n *     hours EAST of UTC.\n * @private\n */\ngoog.i18n.TimeZone.composeUTCString_ = function(offset) {\n  if (offset == 0) {\n    return 'UTC';\n  }\n  var parts = ['UTC', offset < 0 ? '+' : '-'];\n  offset = Math.abs(offset);\n  parts.push(Math.floor(offset / 60) % 100);\n  offset = offset % 60;\n  if (offset != 0) {\n    parts.push(':', offset);\n  }\n  return parts.join('');\n};\n\n\n/**\n * Convert the contents of time zone object to a timeZoneData object, suitable\n * for passing to goog.i18n.TimeZone.createTimeZone.\n * @return {!Object} A timeZoneData object (see the documentation for\n *     goog.i18n.TimeZone.createTimeZone).\n */\ngoog.i18n.TimeZone.prototype.getTimeZoneData = function() {\n  return {\n    'id': this.timeZoneId_,\n    'std_offset': -this.standardOffset_,  // note createTimeZone flips the sign\n    'names': goog.array.clone(this.tzNames_),  // avoid aliasing the array\n    'names_ext': goog.object.clone(this.tzNamesExt_),   // avoid aliasing\n    'transitions': goog.array.clone(this.transitions_)  // avoid aliasing\n  };\n};\n\n\n/**\n * Return the DST adjustment to the time zone offset for a given time.\n * While Daylight Saving Time is in effect, this number is positive.\n * Otherwise, it is zero.\n * @param {goog.date.DateLike} date The time to check.\n * @return {number} The DST adjustment in minutes EAST of UTC.\n */\ngoog.i18n.TimeZone.prototype.getDaylightAdjustment = function(date) {\n  var timeInMs = Date.UTC(\n      date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(),\n      date.getUTCHours(), date.getUTCMinutes());\n  var timeInHours = timeInMs / goog.i18n.TimeZone.MILLISECONDS_PER_HOUR_;\n  var index = 0;\n  while (index < this.transitions_.length &&\n         timeInHours >= this.transitions_[index]) {\n    index += 2;\n  }\n  return (index == 0) ? 0 : this.transitions_[index - 1];\n};\n\n\n/**\n * Return the GMT representation of this time zone object.\n * @param {goog.date.DateLike} date The date for which time to retrieve\n *     GMT string.\n * @return {string} GMT representation string.\n */\ngoog.i18n.TimeZone.prototype.getGMTString = function(date) {\n  return goog.i18n.TimeZone.composeGMTString_(this.getOffset(date));\n};\n\n/**\n * Return the UTC representation of this time zone object.\n * @param {!goog.date.DateLike} date The date for which time to retrieve\n *     UTC string.\n * @return {string} UTC representation string.\n */\ngoog.i18n.TimeZone.prototype.getUTCString = function(date) {\n  return goog.i18n.TimeZone.composeUTCString_(this.getOffset(date));\n};\n\n\n/**\n * Get the long time zone name for a given date/time.\n * @param {goog.date.DateLike} date The time for which to retrieve\n *     the long time zone name.\n * @return {string} The long time zone name.\n */\ngoog.i18n.TimeZone.prototype.getLongName = function(date) {\n  return this.tzNames_[this.isDaylightTime(date) ?\n                           goog.i18n.TimeZone.NameType.DLT_LONG_NAME :\n                           goog.i18n.TimeZone.NameType.STD_LONG_NAME];\n};\n\n\n/**\n * Get the time zone offset in minutes WEST of UTC for a given date/time.\n * @param {goog.date.DateLike} date The time for which to retrieve\n *     the time zone offset.\n * @return {number} The time zone offset in minutes WEST of UTC.\n */\ngoog.i18n.TimeZone.prototype.getOffset = function(date) {\n  return this.standardOffset_ - this.getDaylightAdjustment(date);\n};\n\n\n/**\n * Get the RFC representation of the time zone for a given date/time.\n * @param {goog.date.DateLike} date The time for which to retrieve the\n *     RFC time zone string.\n * @return {string} The RFC time zone string.\n */\ngoog.i18n.TimeZone.prototype.getRFCTimeZoneString = function(date) {\n  var offset = -this.getOffset(date);\n  var parts = [offset < 0 ? '-' : '+'];\n  offset = Math.abs(offset);\n  parts.push(\n      goog.string.padNumber(Math.floor(offset / 60) % 100, 2),\n      goog.string.padNumber(offset % 60, 2));\n  return parts.join('');\n};\n\n\n/**\n * Get the short time zone name for given date/time.\n * @param {goog.date.DateLike} date The time for which to retrieve\n *     the short time zone name.\n * @return {string} The short time zone name.\n */\ngoog.i18n.TimeZone.prototype.getShortName = function(date) {\n  return this.tzNames_[this.isDaylightTime(date) ?\n                           goog.i18n.TimeZone.NameType.DLT_SHORT_NAME :\n                           goog.i18n.TimeZone.NameType.STD_SHORT_NAME];\n};\n\n\n/**\n * Return the time zone ID for this time zone.\n * @return {string} The time zone ID.\n */\ngoog.i18n.TimeZone.prototype.getTimeZoneId = function() {\n  return this.timeZoneId_;\n};\n\n\n/**\n * Check if Daylight Saving Time is in effect at a given time in this time zone.\n * @param {goog.date.DateLike} date The time to check.\n * @return {boolean} True if Daylight Saving Time is in effect.\n */\ngoog.i18n.TimeZone.prototype.isDaylightTime = function(date) {\n  return this.getDaylightAdjustment(date) > 0;\n};\n\n\n/**\n * Get the long GMT time zone name for a given date/time.\n * @param {!goog.date.DateLike} date The time for which to retrieve\n *     the long GMT time zone name.\n * @return {string} The long GMT time zone name.\n */\ngoog.i18n.TimeZone.prototype.getLongNameGMT = function(date) {\n  if (this.isDaylightTime(date)) {\n    return (this.tzNamesExt_.DST_LONG_NAME_GMT !== undefined) ?\n        this.tzNamesExt_.DST_LONG_NAME_GMT :\n        this.tzNamesExt_['DST_LONG_NAME_GMT'];\n  } else {\n    return (this.tzNamesExt_.STD_LONG_NAME_GMT !== undefined) ?\n        this.tzNamesExt_.STD_LONG_NAME_GMT :\n        this.tzNamesExt_['STD_LONG_NAME_GMT'];\n  }\n};\n\n\n/**\n * Get the generic location time zone name for a given date/time.\n * @param {!goog.date.DateLike} date The time for which to retrieve\n *     the generic location time zone name.\n * @return {string} The generic location time zone name.\n */\ngoog.i18n.TimeZone.prototype.getGenericLocation = function(date) {\n  if (this.isDaylightTime(date)) {\n    return (this.tzNamesExt_.DST_GENERIC_LOCATION !== undefined) ?\n        this.tzNamesExt_.DST_GENERIC_LOCATION :\n        this.tzNamesExt_['DST_GENERIC_LOCATION'];\n  } else {\n    return (this.tzNamesExt_.STD_GENERIC_LOCATION !== undefined) ?\n        this.tzNamesExt_.STD_GENERIC_LOCATION :\n        this.tzNamesExt_['STD_GENERIC_LOCATION'];\n  }\n};\n"],
"names":["goog","provide","require","i18n","TimeZone","goog.i18n.TimeZone","timeZoneId_","standardOffset_","tzNames_","tzNamesExt_","transitions_","MILLISECONDS_PER_HOUR_","NameType","STD_SHORT_NAME","STD_LONG_NAME","DLT_SHORT_NAME","DLT_LONG_NAME","createTimeZone","goog.i18n.TimeZone.createTimeZone","timeZoneData","createSimpleTimeZone_","tz","goog.i18n.TimeZone.createSimpleTimeZone_","timeZoneOffsetInMinutes","composePosixTimeZoneID_","str","composeUTCString_","strGMT","composeGMTString_","STD_LONG_NAME_GMT","STD_GENERIC_LOCATION","goog.i18n.TimeZone.composeGMTString_","offset","parts","push","Math","abs","string","padNumber","floor","join","goog.i18n.TimeZone.composePosixTimeZoneID_","goog.i18n.TimeZone.composeUTCString_","prototype","getTimeZoneData","goog.i18n.TimeZone.prototype.getTimeZoneData","array","clone","object","getDaylightAdjustment","goog.i18n.TimeZone.prototype.getDaylightAdjustment","date","timeInMs","Date","UTC","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","timeInHours","index","length","getGMTString","goog.i18n.TimeZone.prototype.getGMTString","getOffset","getUTCString","goog.i18n.TimeZone.prototype.getUTCString","getLongName","goog.i18n.TimeZone.prototype.getLongName","isDaylightTime","goog.i18n.TimeZone.prototype.getOffset","getRFCTimeZoneString","goog.i18n.TimeZone.prototype.getRFCTimeZoneString","getShortName","goog.i18n.TimeZone.prototype.getShortName","getTimeZoneId","goog.i18n.TimeZone.prototype.getTimeZoneId","goog.i18n.TimeZone.prototype.isDaylightTime","getLongNameGMT","goog.i18n.TimeZone.prototype.getLongNameGMT","DST_LONG_NAME_GMT","undefined","getGenericLocation","goog.i18n.TimeZone.prototype.getGenericLocation","DST_GENERIC_LOCATION"]
}
