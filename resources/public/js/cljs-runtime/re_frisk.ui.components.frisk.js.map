{"version":3,"sources":["re_frisk/ui/components/frisk.cljs"],"mappings":"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","names":["re-frisk.ui.components.frisk/debounce-pending","cljs.core.atom","re-frisk.ui.components.frisk/debounce","key","delay","f","old-timeout","G__65562","cljs.core/deref","new-timeout","js/setTimeout","cljs.core.swap_BANG_","cljs.core/assoc","js/clearTimeout","p__65563","map__65564","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","re-frisk.ui.components.frisk/ExpandButton","expanded?","path","emit-fn","G__65566","G__65567","re-frisk.ui.components.frisk/styles","re-frisk.ui.components.frisk/ExpandAllButton","data","re-frisk.ui.components.frisk/CollapseAllButton","re-frisk.ui.components.frisk/edit-debounce-ms","p1__65568#","re-frisk.ui.components.frisk/FilterEditBox","filter","G__65569","G__65570","G__65571","re-frisk.ui.components.frisk/FilterReset","p__65573","map__65575","re-frisk.ui.components.frisk/node-clicked","event","all","G__65578","G__65579","G__65580","re-frisk.ui.components.frisk/NilText","cljs.core.pr_str","re-frisk.ui.components.frisk/StringText","re-frisk.ui.components.frisk/KeywordText","re-frisk.ui.components.frisk/NumberText","re-frisk.ui.components.frisk/is-prefix","needle","haystack","cljs.core/count","cljs.core._EQ_","cljs.core.subvec","p__65586","map__65587","p1__65583#","re-frisk.ui.components.frisk/Node","swappable","node","matching-paths","val","cljs.core.merge","e","G__65589","G__65590","G__65591","cljs.core/Keyword","cljs.core/name","G__65593","G__65594","G__65595","cljs.core.keyword","cljs.core/object?","G__65598","G__65599","G__65600","js/Number","re-frisk.ui.components.frisk/is-expanded","expanded-paths","expanded-matching-paths","or__4126__auto__","p__65605","map__65607","vec__65608","cljs.core.nth","re-frisk.ui.components.frisk/KeyValNode","k","v","re-frisk.ui.components.frisk/DataFrisk","cljs.core.conj","p__65613","map__65614","re-frisk.ui.components.frisk/MapNode","cljs.core/empty?","cljs.core/keys","cljs.core.map_indexed","i","x","cljs.core.assoc","p__65624","map__65625","re-frisk.ui.components.frisk/ListVecNode","cljs.core/vector?","p__65634","map__65635","re-frisk.ui.components.frisk/SetNode","p__65647","map__65648","cljs.core/map?","cljs.core/set?","cljs.core/seq?","cljs.core/native-satisfies?","cljs.core/IDeref","re-frisk.ui.components.frisk/conj-to-set","coll","re-frisk.ui.components.frisk/expand-all-paths","root-value","remaining","cljs.core/seq","vec__65667","seq__65668","first__65669","cljs.core/first","cljs.core/next","current","rest","current-node","G__65670","cljs.core.concat","cljs.core.map","p__65671","vec__65672","cljs.core/coll?","re-frisk.ui.components.frisk/apply-filter","state","id","re-frisk.filter.filter-parser/parse","cljs.core.get_in","cljs.core/assoc-in","re-frisk.ui.components.frisk/emit-fn-factory","state-atom","args","G__65683","js/Error","cljs.core/update-in","cljs.core/disj","cljs.core/second","vec__65687","value","cljs.core/reset!","var_args","G__65695","re-frisk.ui.components.frisk/walk-paths","re_frisk.ui.components.frisk.walk_paths","prefix","clojure.set/union","p__65699","vec__65700","re-frisk.ui.components.frisk/matching-paths","filter'","cljs.core/set","p1__65707#","cljs.core.filter","re-frisk.filter.filter-matcher/match","re-frisk.ui.components.frisk/prefixes","cljs.core.reductions","cljs.core/conj","re-frisk.ui.components.frisk/expanded-matching-paths","paths","re-frisk.ui.components.frisk/Root","data-frisk","cljs.core/IAtom","matching","expanded-matching","re-com.core/v-box","re-frisk.ui.components.components/scroller","re-frisk.ui.components.frisk/expand-by-default","p1__65718#","p2__65719#","cljs.core.reduce","cljs.core.range"],"sourcesContent":["(ns re-frisk.ui.components.frisk\n  (:require [clojure.set :as set]\n            [re-frisk.filter.filter-parser :as filter-parser]\n            [re-frisk.filter.filter-matcher :as filter-matcher]\n            [re-com.core :as re-com]\n            [re-frisk.ui.components.components :as components]))\n\n;;original idea Odin Hole Standal https://github.com/Odinodin/data-frisk-reagent\n(declare DataFrisk)\n\n(def debounce-pending (atom {}))\n(defn debounce [key delay f]\n  (let [old-timeout (key @debounce-pending)\n        new-timeout (js/setTimeout f delay)]\n    (swap! debounce-pending assoc key new-timeout)\n    (js/clearTimeout old-timeout)))\n\n(defn ExpandButton [{:keys [expanded? path emit-fn]}]\n  [:button {:style {:border 0\n                    :backgroundColor \"transparent\" :width \"20px\" :height \"20px\"}\n            :on-click #(emit-fn (if expanded? :contract :expand) path)}\n   [:svg {:viewBox \"0 0 100 100\"\n          :width \"100%\" :height \"100%\"\n          :style {:transition \"all 0.2s ease\"\n                  :transform (when expanded? \"rotate(90deg)\")}}\n    [:polygon {:points \"0,0 0,100 100,50\" :stroke \"gray\" :color \"gray\"}]]])\n\n(def styles\n  {:shell {:backgroundColor \"#FAFAFA\"\n           :fontFamily \"Consolas,Monaco,Courier New,monospace\"\n           :fontSize \"12px\"\n           :z-index 9999}\n   :strings {:color \"#4Ebb4E\"}\n   :keywords {:color \"purple\"}\n   :numbers {:color \"blue\"}\n   :nil {:color \"red\"}\n   :shell-visible-button {:backgroundColor \"#4EE24E\"}})\n\n(defn ExpandAllButton [emit-fn data]\n  [:button {:on-click #(emit-fn :expand-all data)\n            :style {:padding \"0px\"\n                    :borderTopLeftRadius \"2px\"\n                    :borderBottomLeftRadius \"2px\"\n                    :cursor \"pointer\"\n                    :border \"1px solid darkgray\"\n                    :backgroundColor \"white\"}}\n   \"Expand all\"])\n\n(defn CollapseAllButton [emit-fn data]\n  [:button {:on-click #(emit-fn :collapse-all)\n            :style {:padding \"0px\"\n                    :cursor \"pointer\"\n                    :borderTopRightRadius \"2px\"\n                    :borderBottomRightRadius \"2px\"\n                    :borderTop \"1px solid darkgray\"\n                    :borderBottom \"1px solid darkgray\"\n                    :borderRight \"1px solid darkgray\"\n                    :borderLeft \"0\"\n                    :backgroundColor \"white\"}}\n   \"Collapse all\"])\n\n(def edit-debounce-ms 400)\n\n(defn FilterEditBox [emit-fn filter]\n  [:input {:type \"text\"\n           :style {:flex 1 :margin-left 5}\n           :value filter\n           :placeholder \"Type here to find keys...\"\n           :on-change #(emit-fn :filter-change (.. % -target -value)\n                                edit-debounce-ms)}])\n\n(defn FilterReset [emit-fn]\n  [:button {:style {:margin-right 5 :width 25}\n            :on-click #(emit-fn :filter-change \"\" 0)} \"X\"])\n\n(defn node-clicked [{:keys [event emit-fn path] :as all}]\n  (.stopPropagation event)\n  (emit-fn :filter-change (str path) 0))\n\n(defn NilText []\n  [:span {:style (:nil styles)} (pr-str nil)])\n\n(defn StringText [data]\n  [:span {:style (:strings styles)} (pr-str data)])\n\n(defn KeywordText [data]\n  [:span {:style (:keywords styles)} (str data)])\n\n(defn NumberText [data]\n  [:span {:style (:numbers styles)} data])\n\n(defn is-prefix [needle haystack]\n  (and (< (count needle) (count haystack))\n       (= needle (subvec haystack 0 (count needle)))))\n\n(defn Node [{:keys [data path emit-fn swappable node matching-paths] :as val}]\n  [:span {:style {:padding-top \"5px\"}}\n   (when node\n     [:span {:style {:padding-left \"20px\"}}\n      [Node node]])\n   [:span\n    {:on-click #(node-clicked {:event % :emit-fn emit-fn :path path})\n     :style (merge (when node {:padding-left \"10px\"})\n                   (when (get matching-paths path)\n                     {:background-color \"#fff9db\"}))}\n    (cond\n     (nil? data)\n     [NilText]\n\n     (string? data)\n     (if swappable\n       [:input {:type \"text\"\n                :default-value (str data)\n                :on-change\n                (fn string-changed [e]\n                  (emit-fn :changed path (.. e -target -value)))}]\n       [StringText data])\n\n     (keyword? data)\n     (if swappable\n       [:input {:type \"text\"\n                :default-value (name data)\n                :on-change\n                (fn keyword-changed [e]\n                  (emit-fn :changed path (keyword (.. e -target -value))))}]\n       [KeywordText data])\n\n     (object? data)\n     \"Object\"\n\n     (number? data)\n     (if swappable\n       [:input {:type \"number\"\n                :default-value data\n                :on-change\n                (fn number-changed [e]\n                  (emit-fn :changed path (js/Number (.. e -target -value))))}]\n       [NumberText data])\n     :else\n     (str data))]])\n\n;; A path is expanded if it is explicitly expanded or if it is a part of\n;; current selection\n(defn is-expanded [expanded-paths expanded-matching-paths path]\n  (or (get expanded-paths path)\n      (get expanded-matching-paths path)))\n\n(defn KeyValNode [{[k v] :data :keys [path expanded-paths matching-paths expanded-matching-paths emit-fn swappable]}]\n  [:div {:style {:display \"flex\"}}\n   [DataFrisk {:node {:data k\n                      :emit-fn emit-fn\n                      :path (conj path k)\n                      :matching-paths matching-paths}\n               :data v\n               :swappable swappable\n               :path (conj path k)\n               :expanded-paths expanded-paths\n               :matching-paths matching-paths\n               :expanded-matching-paths expanded-matching-paths\n               :emit-fn emit-fn}]])\n\n(defn MapNode [{:keys [data path expanded-paths matching-paths expanded-matching-paths emit-fn node] :as all}]\n  (let [expanded? (is-expanded expanded-paths expanded-matching-paths path)]\n    [:div {:style {:display \"flex\" :padding-top \"3px\"}}\n     [:div {:style {:flex \"0 1 auto\"}}\n      (if (empty? data)\n        [:div {:style {:width \"20px\"}}]\n        [ExpandButton {:expanded? expanded?\n                       :path path\n                       :emit-fn emit-fn}])]\n     [:div {:style {:flex 1}}\n      (when node\n        [Node node])\n      [:span \" {\"]\n      [:span (str (count (keys data)) \" keys\")]\n      [:span \"}\"]\n      (when expanded?\n        (map-indexed (fn [i x] ^{:key i}\n                       [:div {:style {:flex 1}}\n                        [KeyValNode (assoc all :data x)]])\n                     data))]]))\n\n(defn ListVecNode [{:keys [data path expanded-paths matching-paths expanded-matching-paths emit-fn swappable node]}]\n  (let [expanded? (is-expanded expanded-paths expanded-matching-paths path)]\n    [:div {:style {:display \"flex\" :padding-top \"3px\"}}\n     [:div {:style {:flex \"0 1 auto\"}}\n      (if (empty? data)\n        [:div {:style {:width \"20px\"}}]\n        [ExpandButton {:expanded? expanded?\n                       :path path\n                       :emit-fn emit-fn}])]\n     [:div {:style {:flex 1}}\n      (when node\n        [Node node])\n      [:span (if (vector? data) \" [\" \" (\")\n        (str (count data) \" items\")]\n      [:span (if (vector? data) \"]\" \")\")]\n      (when expanded?\n        (map-indexed (fn [i x] ^{:key i} [:div {:style {:flex 1}}\n                                          [DataFrisk {:data x\n                                                      :swappable swappable\n                                                      :path (conj path i)\n                                                      :expanded-paths expanded-paths\n                                                      :matching-paths matching-paths\n                                                      :expanded-matching-paths expanded-matching-paths\n                                                      :emit-fn emit-fn}]]) data))]]))\n\n(defn SetNode [{:keys [data path expanded-paths matching-paths expanded-matching-paths emit-fn swappable node]}]\n  (let [expanded? (is-expanded expanded-paths expanded-matching-paths path)]\n    [:div {:style {:display \"flex\" :padding-top \"3px\"}}\n     [:div {:style {:flex \"0 1 auto\"}}\n      (if (empty? data)\n        [:div {:style {:width \"20px\"}}]\n        [ExpandButton {:expanded? expanded?\n                       :path path\n                       :emit-fn emit-fn}])]\n     [:div {:style {:flex 1}}\n      (when node\n        [Node node])\n      [:span \" #{\"\n        (str (count data) \" items\")]\n      [:span \"}\"]\n      (when expanded?\n        (map-indexed (fn [i x] ^{:key i} [:div {:style {:flex 1}}\n                                          [DataFrisk {:data x\n                                                      :swappable swappable\n                                                      :path (conj path x)\n                                                      :expanded-paths expanded-paths\n                                                      :matching-paths matching-paths\n                                                      :expanded-matching-paths expanded-matching-paths\n                                                      :emit-fn emit-fn}]]) data))]]))\n\n(defn DataFrisk [{:keys [data] :as all}]\n  (cond (map? data) [MapNode all]\n        (set? data) [SetNode all]\n        (or (seq? data) (vector? data)) [ListVecNode all]\n        (satisfies? IDeref data) [DataFrisk (assoc all :data @data)]\n        :else [Node all]))\n\n(defn conj-to-set [coll x]\n  (conj (or coll #{}) x))\n\n(defn expand-all-paths [root-value]\n  (loop [remaining [{:path [] :node root-value}]\n         expanded-paths #{}]\n    (if (seq remaining)\n      (let [[current & rest] remaining\n            current-node (if (satisfies? IDeref (:node current)) @(:node current) (:node current))]\n        (cond (map? current-node)\n              (recur\n                (concat rest (map (fn [[k v]] {:path (conj (:path current) k)\n                                               :node v})\n                                  current-node))\n                (conj expanded-paths (:path current)))\n              (or (seq? current-node) (vector? current-node))\n              (recur\n                (concat rest (map-indexed (fn [i node] {:path (conj (:path current) i)\n                                                        :node node})\n                                          current-node))\n                (conj expanded-paths (:path current)))\n              :else\n              (recur\n                rest\n                (if (coll? current-node)\n                  (conj expanded-paths (:path current))\n                  expanded-paths))))\n      expanded-paths)))\n\n(defn apply-filter [state id]\n  (let [filter (filter-parser/parse (get-in state [:data-frisk id :raw-filter]))]\n    (assoc-in state [:data-frisk id :filter] filter)))\n\n(defn emit-fn-factory [state-atom id swappable]\n  (fn [event & args]\n    (case event\n      :expand (swap! state-atom update-in [:data-frisk id :expanded-paths] conj-to-set (first args))\n      :expand-all (swap! state-atom assoc-in [:data-frisk id :expanded-paths] (expand-all-paths (first args)))\n      :contract (swap! state-atom update-in [:data-frisk id :expanded-paths] disj (first args))\n      :collapse-all (swap! state-atom assoc-in [:data-frisk id :expanded-paths] #{})\n      :filter-change\n      (do\n        (swap! state-atom assoc-in [:data-frisk id :raw-filter] (first args))\n        (debounce :filter-change (second args)\n                  #(swap! state-atom apply-filter id)))\n      :changed (let [[path value] args]\n                 (if (seq path)\n                   (swap! swappable assoc-in path value)\n                   (reset! swappable value))))))\n\n(defn walk-paths\n  ([data]\n   (walk-paths [] data))\n  ([prefix data]\n   (conj\n    (cond (map? data)\n          (apply set/union\n                 (map (fn [[k v]] (walk-paths (conj prefix k) v)) data))\n          (set? data)\n          (apply set/union\n                 (map (fn [v] (walk-paths (conj prefix v) v)) data))\n          (or (seq? data) (vector? data))\n          (apply set/union\n                 (map-indexed\n                  (fn [i v] (walk-paths (conj prefix i) v)) data))\n          (satisfies? IDeref data) (walk-paths prefix @data)\n          :else #{})\n    prefix)))\n\n(defn matching-paths [data filter']\n  (set (filter #(filter-matcher/match filter' %) (walk-paths data))))\n\n(defn prefixes [path]\n  (set (reductions conj [] path)))\n\n;; Any node which is a prefix of a matched path needs to be expnaded\n(defn expanded-matching-paths [paths]\n  (apply set/union (map prefixes paths)))\n\n(defn Root [data id state-atom]\n  (let [data-frisk (:data-frisk @state-atom)\n        swappable (when (satisfies? IAtom data)\n                    data)\n        filter (or (get-in data-frisk [id :filter]) [])\n        matching (matching-paths data filter)\n        expanded-matching (expanded-matching-paths matching)\n        emit-fn (emit-fn-factory state-atom id swappable)]\n    [re-com/v-box :style {:background-color \"#f3f3f3\" :color \"#444444\"}\n     :size \"1\"\n     :children\n     [[:div {:style {:padding \"4px 2px\" :display \"flex\"}}\n       [ExpandAllButton emit-fn data]\n       [CollapseAllButton emit-fn]\n       [:div {:style {:padding \"2px\" :margin-left \"4px\" :background-color \"#fff9db\"}} (count matching)]\n       [FilterEditBox emit-fn (get-in data-frisk [id :raw-filter])]\n       [FilterReset emit-fn]]\n      [components/scroller\n       [DataFrisk {:data data\n                   :swappable swappable\n                   :path []\n                   :expanded-paths (get-in data-frisk [id :expanded-paths])\n                   :matching-paths matching\n                   :expanded-matching-paths expanded-matching\n                   :emit-fn emit-fn}]]]]))\n\n(def expand-by-default (reduce #(assoc-in %1 [:data-frisk %2 :expanded-paths] #{[]}) {} (range 1)))"]}